@file:Suppress("INTERFACE_WITH_SUPERCLASS", "OVERRIDING_FINAL_MEMBER", "RETURN_TYPE_MISMATCH_ON_OVERRIDE", "CONFLICTING_OVERLOADS", "EXTERNAL_DELEGATION", "NESTED_CLASS_IN_EXTERNAL_INTERFACE")
@file:JsQualifier("BABYLON")
package BABYLON

import kotlin.js.*
import kotlin.js.Json
import org.khronos.webgl.*
import org.w3c.dom.*
import org.w3c.dom.events.*
import org.w3c.dom.parsing.*
import org.w3c.dom.svg.*
import org.w3c.dom.url.*
import org.w3c.fetch.*
import org.w3c.files.*
import org.w3c.notifications.*
import org.w3c.performance.*
import org.w3c.workers.*
import org.w3c.xhr.*

external interface DeepImmutableArray<T> : ReadonlyArray<T>
external open class ArrayTools {
    companion object {
        fun <T> BuildArray(size: Number, itemBuilder: () -> T): Array<T> = definedExternally
    }
}
external open class Scalar {
    companion object {
        var TwoPi: Number = definedExternally
        fun WithinEpsilon(a: Number, b: Number, epsilon: Number? = definedExternally /* null */): Boolean = definedExternally
        fun ToHex(i: Number): String = definedExternally
        fun Sign(value: Number): Number = definedExternally
        fun Clamp(value: Number, min: Number? = definedExternally /* null */, max: Number? = definedExternally /* null */): Number = definedExternally
        fun Log2(value: Number): Number = definedExternally
        fun Repeat(value: Number, length: Number): Number = definedExternally
        fun Normalize(value: Number, min: Number, max: Number): Number = definedExternally
        fun Denormalize(normalized: Number, min: Number, max: Number): Number = definedExternally
        fun DeltaAngle(current: Number, target: Number): Number = definedExternally
        fun PingPong(tx: Number, length: Number): Number = definedExternally
        fun SmoothStep(from: Number, to: Number, tx: Number): Number = definedExternally
        fun MoveTowards(current: Number, target: Number, maxDelta: Number): Number = definedExternally
        fun MoveTowardsAngle(current: Number, target: Number, maxDelta: Number): Number = definedExternally
        fun Lerp(start: Number, end: Number, amount: Number): Number = definedExternally
        fun LerpAngle(start: Number, end: Number, amount: Number): Number = definedExternally
        fun InverseLerp(a: Number, b: Number, value: Number): Number = definedExternally
        fun Hermite(value1: Number, tangent1: Number, value2: Number, tangent2: Number, amount: Number): Number = definedExternally
        fun RandomRange(min: Number, max: Number): Number = definedExternally
        fun RangeToPercent(number: Number, min: Number, max: Number): Number = definedExternally
        fun PercentToRange(percent: Number, min: Number, max: Number): Number = definedExternally
        fun NormalizeRadians(angle: Number): Number = definedExternally
    }
}
external var ToGammaSpace: Number = definedExternally
external var ToLinearSpace: Any = definedExternally
external var Epsilon: Number = definedExternally
external open class Color3(r: Number? = definedExternally /* null */, g: Number? = definedExternally /* null */, b: Number? = definedExternally /* null */) {
    open var r: Number = definedExternally
    open var g: Number = definedExternally
    open var b: Number = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun toArray(array: Array<Number>, index: Number? = definedExternally /* null */): Color3 = definedExternally
    open fun toArray(array: Float32Array, index: Number? = definedExternally /* null */): Color3 = definedExternally
    open fun toColor4(alpha: Number? = definedExternally /* null */): Color4 = definedExternally
    open fun asArray(): Array<Number> = definedExternally
    open fun toLuminance(): Number = definedExternally
    open fun multiply(otherColor: Color3): Color3 = definedExternally
    open fun multiplyToRef(otherColor: Color3, result: Color3): Color3 = definedExternally
    open fun equals(otherColor: Color3): Boolean = definedExternally
    open fun equalsFloats(r: Number, g: Number, b: Number): Boolean = definedExternally
    open fun scale(scale: Number): Color3 = definedExternally
    open fun scaleToRef(scale: Number, result: Color3): Color3 = definedExternally
    open fun scaleAndAddToRef(scale: Number, result: Color3): Color3 = definedExternally
    open fun clampToRef(min: Number?, max: Number?, result: Color3): Color3 = definedExternally
    open fun add(otherColor: Color3): Color3 = definedExternally
    open fun addToRef(otherColor: Color3, result: Color3): Color3 = definedExternally
    open fun subtract(otherColor: Color3): Color3 = definedExternally
    open fun subtractToRef(otherColor: Color3, result: Color3): Color3 = definedExternally
    open fun clone(): Color3 = definedExternally
    open fun copyFrom(source: Color3): Color3 = definedExternally
    open fun copyFromFloats(r: Number, g: Number, b: Number): Color3 = definedExternally
    open fun set(r: Number, g: Number, b: Number): Color3 = definedExternally
    open fun toHexString(): String = definedExternally
    open fun toLinearSpace(): Color3 = definedExternally
    open fun toLinearSpaceToRef(convertedColor: Color3): Color3 = definedExternally
    open fun toGammaSpace(): Color3 = definedExternally
    open fun toGammaSpaceToRef(convertedColor: Color3): Color3 = definedExternally
    companion object {
        var _BlackReadOnly: Any = definedExternally
        fun FromHexString(hex: String): Color3 = definedExternally
        fun FromArray(array: ArrayLike<Number>, offset: Number? = definedExternally /* null */): Color3 = definedExternally
        fun FromInts(r: Number, g: Number, b: Number): Color3 = definedExternally
        fun Lerp(start: Color3, end: Color3, amount: Number): Color3 = definedExternally
        fun LerpToRef(left: Color3, right: Color3, amount: Number, result: Color3): Unit = definedExternally
        fun Red(): Color3 = definedExternally
        fun Green(): Color3 = definedExternally
        fun Blue(): Color3 = definedExternally
        fun Black(): Color3 = definedExternally
        var BlackReadOnly: Color3 = definedExternally
        fun White(): Color3 = definedExternally
        fun Purple(): Color3 = definedExternally
        fun Magenta(): Color3 = definedExternally
        fun Yellow(): Color3 = definedExternally
        fun Gray(): Color3 = definedExternally
        fun Teal(): Color3 = definedExternally
        fun Random(): Color3 = definedExternally
    }
}
external open class Color4(r: Number? = definedExternally /* null */, g: Number? = definedExternally /* null */, b: Number? = definedExternally /* null */, a: Number? = definedExternally /* null */) {
    open var r: Number = definedExternally
    open var g: Number = definedExternally
    open var b: Number = definedExternally
    open var a: Number = definedExternally
    open fun addInPlace(right: Color4): Color4 = definedExternally
    open fun asArray(): Array<Number> = definedExternally
    open fun toArray(array: Array<Number>, index: Number? = definedExternally /* null */): Color4 = definedExternally
    open fun equals(otherColor: Color4): Boolean = definedExternally
    open fun add(right: Color4): Color4 = definedExternally
    open fun subtract(right: Color4): Color4 = definedExternally
    open fun subtractToRef(right: Color4, result: Color4): Color4 = definedExternally
    open fun scale(scale: Number): Color4 = definedExternally
    open fun scaleToRef(scale: Number, result: Color4): Color4 = definedExternally
    open fun scaleAndAddToRef(scale: Number, result: Color4): Color4 = definedExternally
    open fun clampToRef(min: Number?, max: Number?, result: Color4): Color4 = definedExternally
    open fun multiply(color: Color4): Color4 = definedExternally
    open fun multiplyToRef(color: Color4, result: Color4): Color4 = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun clone(): Color4 = definedExternally
    open fun copyFrom(source: Color4): Color4 = definedExternally
    open fun copyFromFloats(r: Number, g: Number, b: Number, a: Number): Color4 = definedExternally
    open fun set(r: Number, g: Number, b: Number, a: Number): Color4 = definedExternally
    open fun toHexString(): String = definedExternally
    open fun toLinearSpace(): Color4 = definedExternally
    open fun toLinearSpaceToRef(convertedColor: Color4): Color4 = definedExternally
    open fun toGammaSpace(): Color4 = definedExternally
    open fun toGammaSpaceToRef(convertedColor: Color4): Color4 = definedExternally
    companion object {
        fun FromHexString(hex: String): Color4 = definedExternally
        fun Lerp(left: Color4, right: Color4, amount: Number): Color4 = definedExternally
        fun LerpToRef(left: Color4, right: Color4, amount: Number, result: Color4): Unit = definedExternally
        fun FromColor3(color3: Color3, alpha: Number? = definedExternally /* null */): Color4 = definedExternally
        fun FromArray(array: ArrayLike<Number>, offset: Number? = definedExternally /* null */): Color4 = definedExternally
        fun FromInts(r: Number, g: Number, b: Number, a: Number): Color4 = definedExternally
        fun CheckColors4(colors: Array<Number>, count: Number): Array<Number> = definedExternally
    }
}
external open class Vector2(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */) {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun toArray(array: Array<Number>, index: Number? = definedExternally /* null */): Vector2 = definedExternally
    open fun toArray(array: Float32Array, index: Number? = definedExternally /* null */): Vector2 = definedExternally
    open fun asArray(): Array<Number> = definedExternally
    open fun copyFrom(source: Vector2): Vector2 = definedExternally
    open fun copyFromFloats(x: Number, y: Number): Vector2 = definedExternally
    open fun set(x: Number, y: Number): Vector2 = definedExternally
    open fun add(otherVector: Vector2): Vector2 = definedExternally
    open fun addToRef(otherVector: Vector2, result: Vector2): Vector2 = definedExternally
    open fun addInPlace(otherVector: Vector2): Vector2 = definedExternally
    open fun addVector3(otherVector: Vector3): Vector2 = definedExternally
    open fun subtract(otherVector: Vector2): Vector2 = definedExternally
    open fun subtractToRef(otherVector: Vector2, result: Vector2): Vector2 = definedExternally
    open fun subtractInPlace(otherVector: Vector2): Vector2 = definedExternally
    open fun multiplyInPlace(otherVector: Vector2): Vector2 = definedExternally
    open fun multiply(otherVector: Vector2): Vector2 = definedExternally
    open fun multiplyToRef(otherVector: Vector2, result: Vector2): Vector2 = definedExternally
    open fun multiplyByFloats(x: Number, y: Number): Vector2 = definedExternally
    open fun divide(otherVector: Vector2): Vector2 = definedExternally
    open fun divideToRef(otherVector: Vector2, result: Vector2): Vector2 = definedExternally
    open fun divideInPlace(otherVector: Vector2): Vector2 = definedExternally
    open fun negate(): Vector2 = definedExternally
    open fun scaleInPlace(scale: Number): Vector2 = definedExternally
    open fun scale(scale: Number): Vector2 = definedExternally
    open fun scaleToRef(scale: Number, result: Vector2): Vector2 = definedExternally
    open fun scaleAndAddToRef(scale: Number, result: Vector2): Vector2 = definedExternally
    open fun equals(otherVector: Vector2): Boolean = definedExternally
    open fun equalsWithEpsilon(otherVector: Vector2, epsilon: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun floor(): Vector2 = definedExternally
    open fun fract(): Vector2 = definedExternally
    open fun length(): Number = definedExternally
    open fun lengthSquared(): Number = definedExternally
    open fun normalize(): Vector2 = definedExternally
    open fun clone(): Vector2 = definedExternally
    companion object {
        fun Zero(): Vector2 = definedExternally
        fun One(): Vector2 = definedExternally
        fun FromArray(array: ArrayLike<Number>, offset: Number? = definedExternally /* null */): Vector2 = definedExternally
        fun FromArrayToRef(array: ArrayLike<Number>, offset: Number, result: Vector2): Unit = definedExternally
        fun CatmullRom(value1: Vector2, value2: Vector2, value3: Vector2, value4: Vector2, amount: Number): Vector2 = definedExternally
        fun Clamp(value: Vector2, min: Vector2, max: Vector2): Vector2 = definedExternally
        fun Hermite(value1: Vector2, tangent1: Vector2, value2: Vector2, tangent2: Vector2, amount: Number): Vector2 = definedExternally
        fun Lerp(start: Vector2, end: Vector2, amount: Number): Vector2 = definedExternally
        fun Dot(left: Vector2, right: Vector2): Number = definedExternally
        fun Normalize(vector: Vector2): Vector2 = definedExternally
        fun Minimize(left: Vector2, right: Vector2): Vector2 = definedExternally
        fun Maximize(left: Vector2, right: Vector2): Vector2 = definedExternally
        fun Transform(vector: Vector2, transformation: Matrix): Vector2 = definedExternally
        fun TransformToRef(vector: Vector2, transformation: Matrix, result: Vector2): Unit = definedExternally
        fun PointInTriangle(p: Vector2, p0: Vector2, p1: Vector2, p2: Vector2): Boolean = definedExternally
        fun Distance(value1: Vector2, value2: Vector2): Number = definedExternally
        fun DistanceSquared(value1: Vector2, value2: Vector2): Number = definedExternally
        fun Center(value1: Vector2, value2: Vector2): Vector2 = definedExternally
        fun DistanceOfPointFromSegment(p: Vector2, segA: Vector2, segB: Vector2): Number = definedExternally
    }
}
external open class Vector3(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */, z: Number? = definedExternally /* null */) {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
    open var z: Number = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun asArray(): Array<Number> = definedExternally
    open fun toArray(array: Array<Number>, index: Number? = definedExternally /* null */): Vector3 = definedExternally
    open fun toArray(array: Float32Array, index: Number? = definedExternally /* null */): Vector3 = definedExternally
    open fun toQuaternion(): Quaternion = definedExternally
    open fun addInPlace(otherVector: Vector3): Vector3 = definedExternally
    open fun addInPlaceFromFloats(x: Number, y: Number, z: Number): Vector3 = definedExternally
    open fun add(otherVector: Vector3): Vector3 = definedExternally
    open fun addToRef(otherVector: Vector3, result: Vector3): Vector3 = definedExternally
    open fun subtractInPlace(otherVector: Vector3): Vector3 = definedExternally
    open fun subtract(otherVector: Vector3): Vector3 = definedExternally
    open fun subtractToRef(otherVector: Vector3, result: Vector3): Vector3 = definedExternally
    open fun subtractFromFloats(x: Number, y: Number, z: Number): Vector3 = definedExternally
    open fun subtractFromFloatsToRef(x: Number, y: Number, z: Number, result: Vector3): Vector3 = definedExternally
    open fun negate(): Vector3 = definedExternally
    open fun scaleInPlace(scale: Number): Vector3 = definedExternally
    open fun scale(scale: Number): Vector3 = definedExternally
    open fun scaleToRef(scale: Number, result: Vector3): Vector3 = definedExternally
    open fun scaleAndAddToRef(scale: Number, result: Vector3): Vector3 = definedExternally
    open fun equals(otherVector: Vector3): Boolean = definedExternally
    open fun equalsWithEpsilon(otherVector: Vector3, epsilon: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun equalsToFloats(x: Number, y: Number, z: Number): Boolean = definedExternally
    open fun multiplyInPlace(otherVector: Vector3): Vector3 = definedExternally
    open fun multiply(otherVector: Vector3): Vector3 = definedExternally
    open fun multiplyToRef(otherVector: Vector3, result: Vector3): Vector3 = definedExternally
    open fun multiplyByFloats(x: Number, y: Number, z: Number): Vector3 = definedExternally
    open fun divide(otherVector: Vector3): Vector3 = definedExternally
    open fun divideToRef(otherVector: Vector3, result: Vector3): Vector3 = definedExternally
    open fun divideInPlace(otherVector: Vector3): Vector3 = definedExternally
    open fun minimizeInPlace(other: Vector3): Vector3 = definedExternally
    open fun maximizeInPlace(other: Vector3): Vector3 = definedExternally
    open fun minimizeInPlaceFromFloats(x: Number, y: Number, z: Number): Vector3 = definedExternally
    open fun maximizeInPlaceFromFloats(x: Number, y: Number, z: Number): Vector3 = definedExternally
    open fun isNonUniformWithinEpsilon(epsilon: Number): Boolean = definedExternally
    open var isNonUniform: Boolean = definedExternally
    open fun floor(): Vector3 = definedExternally
    open fun fract(): Vector3 = definedExternally
    open fun length(): Number = definedExternally
    open fun lengthSquared(): Number = definedExternally
    open fun normalize(): Vector3 = definedExternally
    open fun reorderInPlace(order: String): Vector3 /* this */ = definedExternally
    open fun rotateByQuaternionToRef(quaternion: Quaternion, result: Vector3): Vector3 = definedExternally
    open fun rotateByQuaternionAroundPointToRef(quaternion: Quaternion, point: Vector3, result: Vector3): Vector3 = definedExternally
    open fun normalizeFromLength(len: Number): Vector3 = definedExternally
    open fun normalizeToNew(): Vector3 = definedExternally
    open fun normalizeToRef(reference: Vector3): Vector3 = definedExternally
    open fun clone(): Vector3 = definedExternally
    open fun copyFrom(source: Vector3): Vector3 = definedExternally
    open fun copyFromFloats(x: Number, y: Number, z: Number): Vector3 = definedExternally
    open fun set(x: Number, y: Number, z: Number): Vector3 = definedExternally
    open fun setAll(v: Number): Vector3 = definedExternally
    companion object {
        var _UpReadOnly: Any = definedExternally
        fun GetClipFactor(vector0: Vector3, vector1: Vector3, axis: Vector3, size: Number): Number = definedExternally
        fun GetAngleBetweenVectors(vector0: Vector3, vector1: Vector3, normal: Vector3): Number = definedExternally
        fun FromArray(array: ArrayLike<Number>, offset: Number? = definedExternally /* null */): Vector3 = definedExternally
        fun FromFloatArray(array: Float32Array, offset: Number? = definedExternally /* null */): Vector3 = definedExternally
        fun FromArrayToRef(array: ArrayLike<Number>, offset: Number, result: Vector3): Unit = definedExternally
        fun FromFloatArrayToRef(array: Float32Array, offset: Number, result: Vector3): Unit = definedExternally
        fun FromFloatsToRef(x: Number, y: Number, z: Number, result: Vector3): Unit = definedExternally
        fun Zero(): Vector3 = definedExternally
        fun One(): Vector3 = definedExternally
        fun Up(): Vector3 = definedExternally
        var UpReadOnly: Vector3 = definedExternally
        fun Down(): Vector3 = definedExternally
        fun Forward(): Vector3 = definedExternally
        fun Backward(): Vector3 = definedExternally
        fun Right(): Vector3 = definedExternally
        fun Left(): Vector3 = definedExternally
        fun TransformCoordinates(vector: Vector3, transformation: Matrix): Vector3 = definedExternally
        fun TransformCoordinatesToRef(vector: Vector3, transformation: Matrix, result: Vector3): Unit = definedExternally
        fun TransformCoordinatesFromFloatsToRef(x: Number, y: Number, z: Number, transformation: Matrix, result: Vector3): Unit = definedExternally
        fun TransformNormal(vector: Vector3, transformation: Matrix): Vector3 = definedExternally
        fun TransformNormalToRef(vector: Vector3, transformation: Matrix, result: Vector3): Unit = definedExternally
        fun TransformNormalFromFloatsToRef(x: Number, y: Number, z: Number, transformation: Matrix, result: Vector3): Unit = definedExternally
        fun CatmullRom(value1: Vector3, value2: Vector3, value3: Vector3, value4: Vector3, amount: Number): Vector3 = definedExternally
        fun Clamp(value: Vector3, min: Vector3, max: Vector3): Vector3 = definedExternally
        fun ClampToRef(value: Vector3, min: Vector3, max: Vector3, result: Vector3): Unit = definedExternally
        fun Hermite(value1: Vector3, tangent1: Vector3, value2: Vector3, tangent2: Vector3, amount: Number): Vector3 = definedExternally
        fun Lerp(start: Vector3, end: Vector3, amount: Number): Vector3 = definedExternally
        fun LerpToRef(start: Vector3, end: Vector3, amount: Number, result: Vector3): Unit = definedExternally
        fun Dot(left: Vector3, right: Vector3): Number = definedExternally
        fun Cross(left: Vector3, right: Vector3): Vector3 = definedExternally
        fun CrossToRef(left: Vector3, right: Vector3, result: Vector3): Unit = definedExternally
        fun Normalize(vector: Vector3): Vector3 = definedExternally
        fun NormalizeToRef(vector: Vector3, result: Vector3): Unit = definedExternally
        fun Project(vector: Vector3, world: Matrix, transform: Matrix, viewport: Viewport): Vector3 = definedExternally
        fun _UnprojectFromInvertedMatrixToRef(source: Vector3, matrix: Matrix, result: Vector3): Unit = definedExternally
        fun UnprojectFromTransform(source: Vector3, viewportWidth: Number, viewportHeight: Number, world: Matrix, transform: Matrix): Vector3 = definedExternally
        fun Unproject(source: Vector3, viewportWidth: Number, viewportHeight: Number, world: Matrix, view: Matrix, projection: Matrix): Vector3 = definedExternally
        fun UnprojectToRef(source: Vector3, viewportWidth: Number, viewportHeight: Number, world: Matrix, view: Matrix, projection: Matrix, result: Vector3): Unit = definedExternally
        fun UnprojectFloatsToRef(sourceX: Number, sourceY: Number, sourceZ: Number, viewportWidth: Number, viewportHeight: Number, world: Matrix, view: Matrix, projection: Matrix, result: Vector3): Unit = definedExternally
        fun Minimize(left: Vector3, right: Vector3): Vector3 = definedExternally
        fun Maximize(left: Vector3, right: Vector3): Vector3 = definedExternally
        fun Distance(value1: Vector3, value2: Vector3): Number = definedExternally
        fun DistanceSquared(value1: Vector3, value2: Vector3): Number = definedExternally
        fun Center(value1: Vector3, value2: Vector3): Vector3 = definedExternally
        fun RotationFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Vector3 = definedExternally
        fun RotationFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Vector3): Unit = definedExternally
    }
}
external open class Vector4(x: Number, y: Number, z: Number, w: Number) {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
    open var z: Number = definedExternally
    open var w: Number = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun asArray(): Array<Number> = definedExternally
    open fun toArray(array: Array<Number>, index: Number? = definedExternally /* null */): Vector4 = definedExternally
    open fun toArray(array: Float32Array, index: Number? = definedExternally /* null */): Vector4 = definedExternally
    open fun addInPlace(otherVector: Vector4): Vector4 = definedExternally
    open fun add(otherVector: Vector4): Vector4 = definedExternally
    open fun addToRef(otherVector: Vector4, result: Vector4): Vector4 = definedExternally
    open fun subtractInPlace(otherVector: Vector4): Vector4 = definedExternally
    open fun subtract(otherVector: Vector4): Vector4 = definedExternally
    open fun subtractToRef(otherVector: Vector4, result: Vector4): Vector4 = definedExternally
    open fun subtractFromFloats(x: Number, y: Number, z: Number, w: Number): Vector4 = definedExternally
    open fun subtractFromFloatsToRef(x: Number, y: Number, z: Number, w: Number, result: Vector4): Vector4 = definedExternally
    open fun negate(): Vector4 = definedExternally
    open fun scaleInPlace(scale: Number): Vector4 = definedExternally
    open fun scale(scale: Number): Vector4 = definedExternally
    open fun scaleToRef(scale: Number, result: Vector4): Vector4 = definedExternally
    open fun scaleAndAddToRef(scale: Number, result: Vector4): Vector4 = definedExternally
    open fun equals(otherVector: Vector4): Boolean = definedExternally
    open fun equalsWithEpsilon(otherVector: Vector4, epsilon: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun equalsToFloats(x: Number, y: Number, z: Number, w: Number): Boolean = definedExternally
    open fun multiplyInPlace(otherVector: Vector4): Vector4 = definedExternally
    open fun multiply(otherVector: Vector4): Vector4 = definedExternally
    open fun multiplyToRef(otherVector: Vector4, result: Vector4): Vector4 = definedExternally
    open fun multiplyByFloats(x: Number, y: Number, z: Number, w: Number): Vector4 = definedExternally
    open fun divide(otherVector: Vector4): Vector4 = definedExternally
    open fun divideToRef(otherVector: Vector4, result: Vector4): Vector4 = definedExternally
    open fun divideInPlace(otherVector: Vector4): Vector4 = definedExternally
    open fun minimizeInPlace(other: Vector4): Vector4 = definedExternally
    open fun maximizeInPlace(other: Vector4): Vector4 = definedExternally
    open fun floor(): Vector4 = definedExternally
    open fun fract(): Vector4 = definedExternally
    open fun length(): Number = definedExternally
    open fun lengthSquared(): Number = definedExternally
    open fun normalize(): Vector4 = definedExternally
    open fun toVector3(): Vector3 = definedExternally
    open fun clone(): Vector4 = definedExternally
    open fun copyFrom(source: Vector4): Vector4 = definedExternally
    open fun copyFromFloats(x: Number, y: Number, z: Number, w: Number): Vector4 = definedExternally
    open fun set(x: Number, y: Number, z: Number, w: Number): Vector4 = definedExternally
    open fun setAll(v: Number): Vector4 = definedExternally
    companion object {
        fun FromArray(array: ArrayLike<Number>, offset: Number? = definedExternally /* null */): Vector4 = definedExternally
        fun FromArrayToRef(array: ArrayLike<Number>, offset: Number, result: Vector4): Unit = definedExternally
        fun FromFloatArrayToRef(array: Float32Array, offset: Number, result: Vector4): Unit = definedExternally
        fun FromFloatsToRef(x: Number, y: Number, z: Number, w: Number, result: Vector4): Unit = definedExternally
        fun Zero(): Vector4 = definedExternally
        fun One(): Vector4 = definedExternally
        fun Normalize(vector: Vector4): Vector4 = definedExternally
        fun NormalizeToRef(vector: Vector4, result: Vector4): Unit = definedExternally
        fun Minimize(left: Vector4, right: Vector4): Vector4 = definedExternally
        fun Maximize(left: Vector4, right: Vector4): Vector4 = definedExternally
        fun Distance(value1: Vector4, value2: Vector4): Number = definedExternally
        fun DistanceSquared(value1: Vector4, value2: Vector4): Number = definedExternally
        fun Center(value1: Vector4, value2: Vector4): Vector4 = definedExternally
        fun TransformNormal(vector: Vector4, transformation: Matrix): Vector4 = definedExternally
        fun TransformNormalToRef(vector: Vector4, transformation: Matrix, result: Vector4): Unit = definedExternally
        fun TransformNormalFromFloatsToRef(x: Number, y: Number, z: Number, w: Number, transformation: Matrix, result: Vector4): Unit = definedExternally
        fun FromVector3(source: Vector3, w: Number? = definedExternally /* null */): Vector4 = definedExternally
    }
}
external interface ISize {
    var width: Number
    var height: Number
}
external open class Size(width: Number, height: Number) : ISize {
    override var width: Number = definedExternally
    override var height: Number = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun copyFrom(src: Size): Unit = definedExternally
    open fun copyFromFloats(width: Number, height: Number): Size = definedExternally
    open fun set(width: Number, height: Number): Size = definedExternally
    open fun multiplyByFloats(w: Number, h: Number): Size = definedExternally
    open fun clone(): Size = definedExternally
    open fun equals(other: Size): Boolean = definedExternally
    open var surface: Number = definedExternally
    open fun add(otherSize: Size): Size = definedExternally
    open fun subtract(otherSize: Size): Size = definedExternally
    companion object {
        fun Zero(): Size = definedExternally
        fun Lerp(start: Size, end: Size, amount: Number): Size = definedExternally
    }
}
external open class Quaternion(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */, z: Number? = definedExternally /* null */, w: Number? = definedExternally /* null */) {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
    open var z: Number = definedExternally
    open var w: Number = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun asArray(): Array<Number> = definedExternally
    open fun equals(otherQuaternion: Quaternion): Boolean = definedExternally
    open fun clone(): Quaternion = definedExternally
    open fun copyFrom(other: Quaternion): Quaternion = definedExternally
    open fun copyFromFloats(x: Number, y: Number, z: Number, w: Number): Quaternion = definedExternally
    open fun set(x: Number, y: Number, z: Number, w: Number): Quaternion = definedExternally
    open fun add(other: Quaternion): Quaternion = definedExternally
    open fun addInPlace(other: Quaternion): Quaternion = definedExternally
    open fun subtract(other: Quaternion): Quaternion = definedExternally
    open fun scale(value: Number): Quaternion = definedExternally
    open fun scaleToRef(scale: Number, result: Quaternion): Quaternion = definedExternally
    open fun scaleInPlace(value: Number): Quaternion = definedExternally
    open fun scaleAndAddToRef(scale: Number, result: Quaternion): Quaternion = definedExternally
    open fun multiply(q1: Quaternion): Quaternion = definedExternally
    open fun multiplyToRef(q1: Quaternion, result: Quaternion): Quaternion = definedExternally
    open fun multiplyInPlace(q1: Quaternion): Quaternion = definedExternally
    open fun conjugateToRef(ref: Quaternion): Quaternion = definedExternally
    open fun conjugateInPlace(): Quaternion = definedExternally
    open fun conjugate(): Quaternion = definedExternally
    open fun length(): Number = definedExternally
    open fun normalize(): Quaternion = definedExternally
    open fun toEulerAngles(order: String? = definedExternally /* null */): Vector3 = definedExternally
    open fun toEulerAnglesToRef(result: Vector3): Quaternion = definedExternally
    open fun toRotationMatrix(result: Matrix): Quaternion = definedExternally
    open fun fromRotationMatrix(matrix: Matrix): Quaternion = definedExternally
    companion object {
        fun FromRotationMatrix(matrix: Matrix): Quaternion = definedExternally
        fun FromRotationMatrixToRef(matrix: Matrix, result: Quaternion): Unit = definedExternally
        fun Dot(left: Quaternion, right: Quaternion): Number = definedExternally
        fun AreClose(quat0: Quaternion, quat1: Quaternion): Boolean = definedExternally
        fun Zero(): Quaternion = definedExternally
        fun Inverse(q: Quaternion): Quaternion = definedExternally
        fun InverseToRef(q: Quaternion, result: Quaternion): Quaternion = definedExternally
        fun Identity(): Quaternion = definedExternally
        fun IsIdentity(quaternion: Quaternion): Boolean = definedExternally
        fun RotationAxis(axis: Vector3, angle: Number): Quaternion = definedExternally
        fun RotationAxisToRef(axis: Vector3, angle: Number, result: Quaternion): Quaternion = definedExternally
        fun FromArray(array: ArrayLike<Number>, offset: Number? = definedExternally /* null */): Quaternion = definedExternally
        fun FromEulerAngles(x: Number, y: Number, z: Number): Quaternion = definedExternally
        fun FromEulerAnglesToRef(x: Number, y: Number, z: Number, result: Quaternion): Quaternion = definedExternally
        fun FromEulerVector(vec: Vector3): Quaternion = definedExternally
        fun FromEulerVectorToRef(vec: Vector3, result: Quaternion): Quaternion = definedExternally
        fun RotationYawPitchRoll(yaw: Number, pitch: Number, roll: Number): Quaternion = definedExternally
        fun RotationYawPitchRollToRef(yaw: Number, pitch: Number, roll: Number, result: Quaternion): Unit = definedExternally
        fun RotationAlphaBetaGamma(alpha: Number, beta: Number, gamma: Number): Quaternion = definedExternally
        fun RotationAlphaBetaGammaToRef(alpha: Number, beta: Number, gamma: Number, result: Quaternion): Unit = definedExternally
        fun RotationQuaternionFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Quaternion = definedExternally
        fun RotationQuaternionFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Quaternion): Unit = definedExternally
        fun Slerp(left: Quaternion, right: Quaternion, amount: Number): Quaternion = definedExternally
        fun SlerpToRef(left: Quaternion, right: Quaternion, amount: Number, result: Quaternion): Unit = definedExternally
        fun Hermite(value1: Quaternion, tangent1: Quaternion, value2: Quaternion, tangent2: Quaternion, amount: Number): Quaternion = definedExternally
    }
}
external interface `T$0` {
    var upDegrees: Number
    var downDegrees: Number
    var leftDegrees: Number
    var rightDegrees: Number
}
external open class Matrix {
    open var _isIdentity: Any = definedExternally
    open var _isIdentityDirty: Any = definedExternally
    open var _isIdentity3x2: Any = definedExternally
    open var _isIdentity3x2Dirty: Any = definedExternally
    open var updateFlag: Number = definedExternally
    open var _m: Any = definedExternally
    open var m: Float32Array = definedExternally
    open fun _markAsUpdated(): Unit = definedExternally
    open var _updateIdentityStatus: Any = definedExternally
    open fun isIdentity(): Boolean = definedExternally
    open fun isIdentityAs3x2(): Boolean = definedExternally
    open fun determinant(): Number = definedExternally
    open fun toArray(): Float32Array = definedExternally
    open fun asArray(): Float32Array = definedExternally
    open fun invert(): Matrix = definedExternally
    open fun reset(): Matrix = definedExternally
    open fun add(other: Matrix): Matrix = definedExternally
    open fun addToRef(other: Matrix, result: Matrix): Matrix = definedExternally
    open fun addToSelf(other: Matrix): Matrix = definedExternally
    open fun invertToRef(other: Matrix): Matrix = definedExternally
    open fun addAtIndex(index: Number, value: Number): Matrix = definedExternally
    open fun multiplyAtIndex(index: Number, value: Number): Matrix = definedExternally
    open fun setTranslationFromFloats(x: Number, y: Number, z: Number): Matrix = definedExternally
    open fun addTranslationFromFloats(x: Number, y: Number, z: Number): Matrix = definedExternally
    open fun setTranslation(vector3: Vector3): Matrix = definedExternally
    open fun getTranslation(): Vector3 = definedExternally
    open fun getTranslationToRef(result: Vector3): Matrix = definedExternally
    open fun removeRotationAndScaling(): Matrix = definedExternally
    open fun multiply(other: Matrix): Matrix = definedExternally
    open fun copyFrom(other: Matrix): Matrix = definedExternally
    open fun copyToArray(array: Float32Array, offset: Number? = definedExternally /* null */): Matrix = definedExternally
    open fun multiplyToRef(other: Matrix, result: Matrix): Matrix = definedExternally
    open fun multiplyToArray(other: Matrix, result: Float32Array, offset: Number): Matrix = definedExternally
    open fun equals(value: Matrix): Boolean = definedExternally
    open fun clone(): Matrix = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun decompose(scale: Vector3? = definedExternally /* null */, rotation: Quaternion? = definedExternally /* null */, translation: Vector3? = definedExternally /* null */): Boolean = definedExternally
    open fun getRow(index: Number): Vector4 = definedExternally
    open fun setRow(index: Number, row: Vector4): Matrix = definedExternally
    open fun transpose(): Matrix = definedExternally
    open fun transposeToRef(result: Matrix): Matrix = definedExternally
    open fun setRowFromFloats(index: Number, x: Number, y: Number, z: Number, w: Number): Matrix = definedExternally
    open fun scale(scale: Number): Matrix = definedExternally
    open fun scaleToRef(scale: Number, result: Matrix): Matrix = definedExternally
    open fun scaleAndAddToRef(scale: Number, result: Matrix): Matrix = definedExternally
    open fun toNormalMatrix(ref: Matrix): Unit = definedExternally
    open fun getRotationMatrix(): Matrix = definedExternally
    open fun getRotationMatrixToRef(result: Matrix): Matrix = definedExternally
    open fun toggleModelMatrixHandInPlace(): Unit = definedExternally
    open fun toggleProjectionMatrixHandInPlace(): Unit = definedExternally
    companion object {
        var _updateFlagSeed: Any = definedExternally
        var _identityReadOnly: Any = definedExternally
        fun FromArray(array: ArrayLike<Number>, offset: Number? = definedExternally /* null */): Matrix = definedExternally
        fun FromArrayToRef(array: ArrayLike<Number>, offset: Number, result: Matrix): Unit = definedExternally
        fun FromFloat32ArrayToRefScaled(array: Float32Array, offset: Number, scale: Number, result: Matrix): Unit = definedExternally
        var IdentityReadOnly: Matrix = definedExternally
        fun FromValuesToRef(initialM11: Number, initialM12: Number, initialM13: Number, initialM14: Number, initialM21: Number, initialM22: Number, initialM23: Number, initialM24: Number, initialM31: Number, initialM32: Number, initialM33: Number, initialM34: Number, initialM41: Number, initialM42: Number, initialM43: Number, initialM44: Number, result: Matrix): Unit = definedExternally
        fun FromValues(initialM11: Number, initialM12: Number, initialM13: Number, initialM14: Number, initialM21: Number, initialM22: Number, initialM23: Number, initialM24: Number, initialM31: Number, initialM32: Number, initialM33: Number, initialM34: Number, initialM41: Number, initialM42: Number, initialM43: Number, initialM44: Number): Matrix = definedExternally
        fun Compose(scale: Vector3, rotation: Quaternion, translation: Vector3): Matrix = definedExternally
        fun ComposeToRef(scale: Vector3, rotation: Quaternion, translation: Vector3, result: Matrix): Unit = definedExternally
        fun Identity(): Matrix = definedExternally
        fun IdentityToRef(result: Matrix): Unit = definedExternally
        fun Zero(): Matrix = definedExternally
        fun RotationX(angle: Number): Matrix = definedExternally
        fun Invert(source: Matrix): Matrix = definedExternally
        fun RotationXToRef(angle: Number, result: Matrix): Unit = definedExternally
        fun RotationY(angle: Number): Matrix = definedExternally
        fun RotationYToRef(angle: Number, result: Matrix): Unit = definedExternally
        fun RotationZ(angle: Number): Matrix = definedExternally
        fun RotationZToRef(angle: Number, result: Matrix): Unit = definedExternally
        fun RotationAxis(axis: Vector3, angle: Number): Matrix = definedExternally
        fun RotationAxisToRef(axis: Vector3, angle: Number, result: Matrix): Unit = definedExternally
        fun RotationAlignToRef(from: Vector3, to: Vector3, result: Matrix): Unit = definedExternally
        fun RotationYawPitchRoll(yaw: Number, pitch: Number, roll: Number): Matrix = definedExternally
        fun RotationYawPitchRollToRef(yaw: Number, pitch: Number, roll: Number, result: Matrix): Unit = definedExternally
        fun Scaling(x: Number, y: Number, z: Number): Matrix = definedExternally
        fun ScalingToRef(x: Number, y: Number, z: Number, result: Matrix): Unit = definedExternally
        fun Translation(x: Number, y: Number, z: Number): Matrix = definedExternally
        fun TranslationToRef(x: Number, y: Number, z: Number, result: Matrix): Unit = definedExternally
        fun Lerp(startValue: Matrix, endValue: Matrix, gradient: Number): Matrix = definedExternally
        fun LerpToRef(startValue: Matrix, endValue: Matrix, gradient: Number, result: Matrix): Unit = definedExternally
        fun DecomposeLerp(startValue: Matrix, endValue: Matrix, gradient: Number): Matrix = definedExternally
        fun DecomposeLerpToRef(startValue: Matrix, endValue: Matrix, gradient: Number, result: Matrix): Unit = definedExternally
        fun LookAtLH(eye: Vector3, target: Vector3, up: Vector3): Matrix = definedExternally
        fun LookAtLHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): Unit = definedExternally
        fun LookAtRH(eye: Vector3, target: Vector3, up: Vector3): Matrix = definedExternally
        fun LookAtRHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): Unit = definedExternally
        fun OrthoLH(width: Number, height: Number, znear: Number, zfar: Number): Matrix = definedExternally
        fun OrthoLHToRef(width: Number, height: Number, znear: Number, zfar: Number, result: Matrix): Unit = definedExternally
        fun OrthoOffCenterLH(left: Number, right: Number, bottom: Number, top: Number, znear: Number, zfar: Number): Matrix = definedExternally
        fun OrthoOffCenterLHToRef(left: Number, right: Number, bottom: Number, top: Number, znear: Number, zfar: Number, result: Matrix): Unit = definedExternally
        fun OrthoOffCenterRH(left: Number, right: Number, bottom: Number, top: Number, znear: Number, zfar: Number): Matrix = definedExternally
        fun OrthoOffCenterRHToRef(left: Number, right: Number, bottom: Number, top: Number, znear: Number, zfar: Number, result: Matrix): Unit = definedExternally
        fun PerspectiveLH(width: Number, height: Number, znear: Number, zfar: Number): Matrix = definedExternally
        fun PerspectiveFovLH(fov: Number, aspect: Number, znear: Number, zfar: Number): Matrix = definedExternally
        fun PerspectiveFovLHToRef(fov: Number, aspect: Number, znear: Number, zfar: Number, result: Matrix, isVerticalFovFixed: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun PerspectiveFovRH(fov: Number, aspect: Number, znear: Number, zfar: Number): Matrix = definedExternally
        fun PerspectiveFovRHToRef(fov: Number, aspect: Number, znear: Number, zfar: Number, result: Matrix, isVerticalFovFixed: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun PerspectiveFovWebVRToRef(fov: `T$0`, znear: Number, zfar: Number, result: Matrix, rightHanded: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun GetFinalMatrix(viewport: Viewport, world: Matrix, view: Matrix, projection: Matrix, zmin: Number, zmax: Number): Matrix = definedExternally
        fun GetAsMatrix2x2(matrix: Matrix): Float32Array = definedExternally
        fun GetAsMatrix3x3(matrix: Matrix): Float32Array = definedExternally
        fun Transpose(matrix: Matrix): Matrix = definedExternally
        fun TransposeToRef(matrix: Matrix, result: Matrix): Unit = definedExternally
        fun Reflection(plane: Plane): Matrix = definedExternally
        fun ReflectionToRef(plane: Plane, result: Matrix): Unit = definedExternally
        fun FromXYZAxesToRef(xaxis: Vector3, yaxis: Vector3, zaxis: Vector3, result: Matrix): Unit = definedExternally
        fun FromQuaternionToRef(quat: Quaternion, result: Matrix): Unit = definedExternally
    }
}
external open class Plane(a: Number, b: Number, c: Number, d: Number) {
    open var normal: Vector3 = definedExternally
    open var d: Number = definedExternally
    open fun asArray(): Array<Number> = definedExternally
    open fun clone(): Plane = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getHashCode(): Number = definedExternally
    open fun normalize(): Plane = definedExternally
    open fun transform(transformation: Matrix): Plane = definedExternally
    open fun dotCoordinate(point: Vector3): Number = definedExternally
    open fun copyFromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane = definedExternally
    open fun isFrontFacingTo(direction: Vector3, epsilon: Number): Boolean = definedExternally
    open fun signedDistanceTo(point: Vector3): Number = definedExternally
    companion object {
        fun FromArray(array: ArrayLike<Number>): Plane = definedExternally
        fun FromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane = definedExternally
        fun FromPositionAndNormal(origin: Vector3, normal: Vector3): Plane = definedExternally
        fun SignedDistanceToPlaneFromPositionAndNormal(origin: Vector3, normal: Vector3, point: Vector3): Number = definedExternally
    }
}
external open class Viewport(x: Number, y: Number, width: Number, height: Number) {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open fun toGlobal(renderWidth: Number, renderHeight: Number): Viewport = definedExternally
    open fun toGlobalToRef(renderWidth: Number, renderHeight: Number, ref: Viewport): Viewport = definedExternally
    open fun clone(): Viewport = definedExternally
}
external open class Frustum {
    companion object {
        fun GetPlanes(transform: Matrix): Array<Plane> = definedExternally
        fun GetNearPlaneToRef(transform: Matrix, frustumPlane: Plane): Unit = definedExternally
        fun GetFarPlaneToRef(transform: Matrix, frustumPlane: Plane): Unit = definedExternally
        fun GetLeftPlaneToRef(transform: Matrix, frustumPlane: Plane): Unit = definedExternally
        fun GetRightPlaneToRef(transform: Matrix, frustumPlane: Plane): Unit = definedExternally
        fun GetTopPlaneToRef(transform: Matrix, frustumPlane: Plane): Unit = definedExternally
        fun GetBottomPlaneToRef(transform: Matrix, frustumPlane: Plane): Unit = definedExternally
        fun GetPlanesToRef(transform: Matrix, frustumPlanes: Array<Plane>): Unit = definedExternally
    }
}
external enum class Space {
    LOCAL /* = 0 */,
    WORLD /* = 1 */,
    BONE /* = 2 */
}
external open class Axis {
    companion object {
        var X: Vector3 = definedExternally
        var Y: Vector3 = definedExternally
        var Z: Vector3 = definedExternally
    }
}
external open class BezierCurve {
    companion object {
        fun Interpolate(t: Number, x1: Number, y1: Number, x2: Number, y2: Number): Number = definedExternally
    }
}
external enum class Orientation {
    CW /* = 0 */,
    CCW /* = 1 */
}
external open class Angle(radians: Number) {
    open var _radians: Any = definedExternally
    open fun degrees(): Number = definedExternally
    open fun radians(): Number = definedExternally
    companion object {
        fun BetweenTwoPoints(a: Vector2, b: Vector2): Angle = definedExternally
        fun FromRadians(radians: Number): Angle = definedExternally
        fun FromDegrees(degrees: Number): Angle = definedExternally
    }
}
external open class Arc2(startPoint: Vector2, midPoint: Vector2, endPoint: Vector2) {
    open var startPoint: Vector2 = definedExternally
    open var midPoint: Vector2 = definedExternally
    open var endPoint: Vector2 = definedExternally
    open var centerPoint: Vector2 = definedExternally
    open var radius: Number = definedExternally
    open var angle: Angle = definedExternally
    open var startAngle: Angle = definedExternally
    open var orientation: dynamic /* Number /* 0 */ | Number /* 1 */ */ = definedExternally
}
external open class Path2(x: Number, y: Number) {
    open var _points: Any = definedExternally
    open var _length: Any = definedExternally
    open var closed: Boolean = definedExternally
    open fun addLineTo(x: Number, y: Number): Path2 = definedExternally
    open fun addArcTo(midX: Number, midY: Number, endX: Number, endY: Number, numberOfSegments: Number? = definedExternally /* null */): Path2 = definedExternally
    open fun close(): Path2 = definedExternally
    open fun length(): Number = definedExternally
    open fun getPoints(): Array<Vector2> = definedExternally
    open fun getPointAtLengthPosition(normalizedLengthPosition: Number): Vector2 = definedExternally
    companion object {
        fun StartingAt(x: Number, y: Number): Path2 = definedExternally
    }
}
external open class Path3D(path: Array<Vector3>, firstNormal: Vector3? = definedExternally /* null */, raw: Boolean? = definedExternally /* null */) {
    open var path: Array<Vector3> = definedExternally
    open var _curve: Any = definedExternally
    open var _distances: Any = definedExternally
    open var _tangents: Any = definedExternally
    open var _normals: Any = definedExternally
    open var _binormals: Any = definedExternally
    open var _raw: Any = definedExternally
    open fun getCurve(): Array<Vector3> = definedExternally
    open fun getTangents(): Array<Vector3> = definedExternally
    open fun getNormals(): Array<Vector3> = definedExternally
    open fun getBinormals(): Array<Vector3> = definedExternally
    open fun getDistances(): Array<Number> = definedExternally
    open fun update(path: Array<Vector3>, firstNormal: Vector3? = definedExternally /* null */): Path3D = definedExternally
    open var _compute: Any = definedExternally
    open var _getFirstNonNullVector: Any = definedExternally
    open var _getLastNonNullVector: Any = definedExternally
    open var _normalVector: Any = definedExternally
}
external open class Curve3(points: Array<Vector3>) {
    open var _points: Any = definedExternally
    open var _length: Any = definedExternally
    open fun getPoints(): Array<Vector3> = definedExternally
    open fun length(): Number = definedExternally
    open fun `continue`(curve: Curve3): Curve3 = definedExternally
    open var _computeLength: Any = definedExternally
    companion object {
        fun CreateQuadraticBezier(v0: Vector3, v1: Vector3, v2: Vector3, nbPoints: Number): Curve3 = definedExternally
        fun CreateCubicBezier(v0: Vector3, v1: Vector3, v2: Vector3, v3: Vector3, nbPoints: Number): Curve3 = definedExternally
        fun CreateHermiteSpline(p1: Vector3, t1: Vector3, p2: Vector3, t2: Vector3, nbPoints: Number): Curve3 = definedExternally
        fun CreateCatmullRomSpline(points: Array<Vector3>, nbPoints: Number, closed: Boolean? = definedExternally /* null */): Curve3 = definedExternally
    }
}
external open class PositionNormalVertex(position: Vector3? = definedExternally /* null */, normal: Vector3? = definedExternally /* null */) {
    open var position: Vector3 = definedExternally
    open var normal: Vector3 = definedExternally
    open fun clone(): PositionNormalVertex = definedExternally
}
external open class PositionNormalTextureVertex(position: Vector3? = definedExternally /* null */, normal: Vector3? = definedExternally /* null */, uv: Vector2? = definedExternally /* null */) {
    open var position: Vector3 = definedExternally
    open var normal: Vector3 = definedExternally
    open var uv: Vector2 = definedExternally
    open fun clone(): PositionNormalTextureVertex = definedExternally
}
external open class Tmp {
    companion object {
        var Color3: Array<Color3> = definedExternally
        var Color4: Array<Color4> = definedExternally
        var Vector2: Array<Vector2> = definedExternally
        var Vector3: Array<Vector3> = definedExternally
        var Vector4: Array<Vector4> = definedExternally
        var Quaternion: Array<Quaternion> = definedExternally
        var Matrix: Array<Matrix> = definedExternally
    }
}
external interface IOfflineProvider {
    var enableSceneOffline: Boolean
    var enableTexturesOffline: Boolean
    fun open(successCallback: () -> Unit, errorCallback: () -> Unit)
    fun loadImage(url: String, image: HTMLImageElement)
    fun loadFile(url: String, sceneLoaded: (data: Any) -> Unit, progressCallBack: ((data: Any) -> Unit)? = definedExternally /* null */, errorCallback: (() -> Unit)? = definedExternally /* null */, useArrayBuffer: Boolean? = definedExternally /* null */)
}
external open class EventState(mask: Number, skipNextObservers: Boolean? = definedExternally /* null */, target: Any? = definedExternally /* null */, currentTarget: Any? = definedExternally /* null */) {
    open fun initalize(mask: Number, skipNextObservers: Boolean? = definedExternally /* null */, target: Any? = definedExternally /* null */, currentTarget: Any? = definedExternally /* null */): EventState = definedExternally
    open var skipNextObservers: Boolean = definedExternally
    open var mask: Number = definedExternally
    open var target: Any = definedExternally
    open var currentTarget: Any = definedExternally
    open var lastReturnValue: Any = definedExternally
}
external open class Observer<T>(callback: (eventData: T, eventState: EventState) -> Unit, mask: Number, scope: Any? = definedExternally /* null */) {
    open var callback: (eventData: T, eventState: EventState) -> Unit = definedExternally
    open var mask: Number = definedExternally
    open var scope: Any = definedExternally
    open var _willBeUnregistered: Boolean = definedExternally
    open var unregisterOnNextCall: Boolean = definedExternally
}
external open class MultiObserver<T> {
    open var _observers: Any = definedExternally
    open var _observables: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        fun <T> Watch(observables: Array<Observable<T>>, callback: (eventData: T, eventState: EventState) -> Unit, mask: Number? = definedExternally /* null */, scope: Any? = definedExternally /* null */): MultiObserver<T> = definedExternally
    }
}
external open class Observable<T>(onObserverAdded: ((observer: Observer<T>) -> Unit)? = definedExternally /* null */) {
    open var _observers: Any = definedExternally
    open var _eventState: Any = definedExternally
    open var _onObserverAdded: Any = definedExternally
    open fun add(callback: (eventData: T, eventState: EventState) -> Unit, mask: Number? = definedExternally /* null */, insertFirst: Boolean? = definedExternally /* null */, scope: Any? = definedExternally /* null */, unregisterOnFirstCall: Boolean? = definedExternally /* null */): Observer<T> = definedExternally
    open fun addOnce(callback: (eventData: T, eventState: EventState) -> Unit): Observer<T> = definedExternally
    open fun remove(observer: Observer<T>): Boolean = definedExternally
    open fun removeCallback(callback: (eventData: T, eventState: EventState) -> Unit, scope: Any? = definedExternally /* null */): Boolean = definedExternally
    open var _deferUnregister: Any = definedExternally
    open var _remove: Any = definedExternally
    open fun makeObserverTopPriority(observer: Observer<T>): Unit = definedExternally
    open fun makeObserverBottomPriority(observer: Observer<T>): Unit = definedExternally
    open fun notifyObservers(eventData: T, mask: Number? = definedExternally /* null */, target: Any? = definedExternally /* null */, currentTarget: Any? = definedExternally /* null */): Boolean = definedExternally
    open fun notifyObserversWithPromise(eventData: T, mask: Number? = definedExternally /* null */, target: Any? = definedExternally /* null */, currentTarget: Any? = definedExternally /* null */): Promise<T> = definedExternally
    open fun notifyObserver(observer: Observer<T>, eventData: T, mask: Number? = definedExternally /* null */): Unit = definedExternally
    open fun hasObservers(): Boolean = definedExternally
    open fun clear(): Unit = definedExternally
    open fun clone(): Observable<T> = definedExternally
    open fun hasSpecificMask(mask: Number? = definedExternally /* null */): Boolean = definedExternally
}
external interface `T$1` {
    @nativeGetter
    operator fun get(key: String): File?
    @nativeSetter
    operator fun set(key: String, value: File)
}
external open class FilesInputStore {
    companion object {
        var FilesToLoad: `T$1` = definedExternally
    }
}
external open class Constants {
    companion object {
        var ALPHA_DISABLE: Number = definedExternally
        var ALPHA_ADD: Number = definedExternally
        var ALPHA_COMBINE: Number = definedExternally
        var ALPHA_SUBTRACT: Number = definedExternally
        var ALPHA_MULTIPLY: Number = definedExternally
        var ALPHA_MAXIMIZED: Number = definedExternally
        var ALPHA_ONEONE: Number = definedExternally
        var ALPHA_PREMULTIPLIED: Number = definedExternally
        var ALPHA_PREMULTIPLIED_PORTERDUFF: Number = definedExternally
        var ALPHA_INTERPOLATE: Number = definedExternally
        var ALPHA_SCREENMODE: Number = definedExternally
        var DELAYLOADSTATE_NONE: Number = definedExternally
        var DELAYLOADSTATE_LOADED: Number = definedExternally
        var DELAYLOADSTATE_LOADING: Number = definedExternally
        var DELAYLOADSTATE_NOTLOADED: Number = definedExternally
        var NEVER: Number = definedExternally
        var ALWAYS: Number = definedExternally
        var LESS: Number = definedExternally
        var EQUAL: Number = definedExternally
        var LEQUAL: Number = definedExternally
        var GREATER: Number = definedExternally
        var GEQUAL: Number = definedExternally
        var NOTEQUAL: Number = definedExternally
        var KEEP: Number = definedExternally
        var REPLACE: Number = definedExternally
        var INCR: Number = definedExternally
        var DECR: Number = definedExternally
        var INVERT: Number = definedExternally
        var INCR_WRAP: Number = definedExternally
        var DECR_WRAP: Number = definedExternally
        var TEXTURE_CLAMP_ADDRESSMODE: Number = definedExternally
        var TEXTURE_WRAP_ADDRESSMODE: Number = definedExternally
        var TEXTURE_MIRROR_ADDRESSMODE: Number = definedExternally
        var TEXTUREFORMAT_ALPHA: Number = definedExternally
        var TEXTUREFORMAT_LUMINANCE: Number = definedExternally
        var TEXTUREFORMAT_LUMINANCE_ALPHA: Number = definedExternally
        var TEXTUREFORMAT_RGB: Number = definedExternally
        var TEXTUREFORMAT_RGBA: Number = definedExternally
        var TEXTUREFORMAT_RED: Number = definedExternally
        var TEXTUREFORMAT_R: Number = definedExternally
        var TEXTUREFORMAT_RG: Number = definedExternally
        var TEXTUREFORMAT_RED_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_R_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_RG_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_RGB_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_RGBA_INTEGER: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_BYTE: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT: Number = definedExternally
        var TEXTURETYPE_FLOAT: Number = definedExternally
        var TEXTURETYPE_HALF_FLOAT: Number = definedExternally
        var TEXTURETYPE_BYTE: Number = definedExternally
        var TEXTURETYPE_SHORT: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT: Number = definedExternally
        var TEXTURETYPE_INT: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INTEGER: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT_5_6_5: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_24_8: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV: Number = definedExternally
        var TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV: Number = definedExternally
        var TEXTURE_NEAREST_SAMPLINGMODE: Number = definedExternally
        var TEXTURE_BILINEAR_SAMPLINGMODE: Number = definedExternally
        var TEXTURE_TRILINEAR_SAMPLINGMODE: Number = definedExternally
        var TEXTURE_NEAREST_NEAREST_MIPLINEAR: Number = definedExternally
        var TEXTURE_LINEAR_LINEAR_MIPNEAREST: Number = definedExternally
        var TEXTURE_LINEAR_LINEAR_MIPLINEAR: Number = definedExternally
        var TEXTURE_NEAREST_NEAREST_MIPNEAREST: Number = definedExternally
        var TEXTURE_NEAREST_LINEAR_MIPNEAREST: Number = definedExternally
        var TEXTURE_NEAREST_LINEAR_MIPLINEAR: Number = definedExternally
        var TEXTURE_NEAREST_LINEAR: Number = definedExternally
        var TEXTURE_NEAREST_NEAREST: Number = definedExternally
        var TEXTURE_LINEAR_NEAREST_MIPNEAREST: Number = definedExternally
        var TEXTURE_LINEAR_NEAREST_MIPLINEAR: Number = definedExternally
        var TEXTURE_LINEAR_LINEAR: Number = definedExternally
        var TEXTURE_LINEAR_NEAREST: Number = definedExternally
        var TEXTURE_EXPLICIT_MODE: Number = definedExternally
        var TEXTURE_SPHERICAL_MODE: Number = definedExternally
        var TEXTURE_PLANAR_MODE: Number = definedExternally
        var TEXTURE_CUBIC_MODE: Number = definedExternally
        var TEXTURE_PROJECTION_MODE: Number = definedExternally
        var TEXTURE_SKYBOX_MODE: Number = definedExternally
        var TEXTURE_INVCUBIC_MODE: Number = definedExternally
        var TEXTURE_EQUIRECTANGULAR_MODE: Number = definedExternally
        var TEXTURE_FIXED_EQUIRECTANGULAR_MODE: Number = definedExternally
        var TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE: Number = definedExternally
        var SCALEMODE_FLOOR: Number = definedExternally
        var SCALEMODE_NEAREST: Number = definedExternally
        var SCALEMODE_CEILING: Number = definedExternally
        var MATERIAL_TextureDirtyFlag: Number = definedExternally
        var MATERIAL_LightDirtyFlag: Number = definedExternally
        var MATERIAL_FresnelDirtyFlag: Number = definedExternally
        var MATERIAL_AttributesDirtyFlag: Number = definedExternally
        var MATERIAL_MiscDirtyFlag: Number = definedExternally
        var MATERIAL_AllDirtyFlag: Number = definedExternally
        var MATERIAL_TriangleFillMode: Number = definedExternally
        var MATERIAL_WireFrameFillMode: Number = definedExternally
        var MATERIAL_PointFillMode: Number = definedExternally
        var MATERIAL_PointListDrawMode: Number = definedExternally
        var MATERIAL_LineListDrawMode: Number = definedExternally
        var MATERIAL_LineLoopDrawMode: Number = definedExternally
        var MATERIAL_LineStripDrawMode: Number = definedExternally
        var MATERIAL_TriangleStripDrawMode: Number = definedExternally
        var MATERIAL_TriangleFanDrawMode: Number = definedExternally
        var MATERIAL_ClockWiseSideOrientation: Number = definedExternally
        var MATERIAL_CounterClockWiseSideOrientation: Number = definedExternally
        var ACTION_NothingTrigger: Number = definedExternally
        var ACTION_OnPickTrigger: Number = definedExternally
        var ACTION_OnLeftPickTrigger: Number = definedExternally
        var ACTION_OnRightPickTrigger: Number = definedExternally
        var ACTION_OnCenterPickTrigger: Number = definedExternally
        var ACTION_OnPickDownTrigger: Number = definedExternally
        var ACTION_OnDoublePickTrigger: Number = definedExternally
        var ACTION_OnPickUpTrigger: Number = definedExternally
        var ACTION_OnPickOutTrigger: Number = definedExternally
        var ACTION_OnLongPressTrigger: Number = definedExternally
        var ACTION_OnPointerOverTrigger: Number = definedExternally
        var ACTION_OnPointerOutTrigger: Number = definedExternally
        var ACTION_OnEveryFrameTrigger: Number = definedExternally
        var ACTION_OnIntersectionEnterTrigger: Number = definedExternally
        var ACTION_OnIntersectionExitTrigger: Number = definedExternally
        var ACTION_OnKeyDownTrigger: Number = definedExternally
        var ACTION_OnKeyUpTrigger: Number = definedExternally
        var PARTICLES_BILLBOARDMODE_Y: Number = definedExternally
        var PARTICLES_BILLBOARDMODE_ALL: Number = definedExternally
        var PARTICLES_BILLBOARDMODE_STRETCHED: Number = definedExternally
        var PARTICLES_BaseAssetsUrl: String = definedExternally
        var MESHES_CULLINGSTRATEGY_STANDARD: Number = definedExternally
        var MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY: Number = definedExternally
        var MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION: Number = definedExternally
        var MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY: Number = definedExternally
        var SCENELOADER_NO_LOGGING: Number = definedExternally
        var SCENELOADER_MINIMAL_LOGGING: Number = definedExternally
        var SCENELOADER_SUMMARY_LOGGING: Number = definedExternally
        var SCENELOADER_DETAILED_LOGGING: Number = definedExternally
    }
}
external open class DomManagement {
    companion object {
        fun IsWindowObjectExist(): Boolean = definedExternally
        fun GetDOMTextContent(element: HTMLElement): String = definedExternally
    }
}
external open class Logger {
    companion object {
        var NoneLogLevel: Number = definedExternally
        var MessageLogLevel: Number = definedExternally
        var WarningLogLevel: Number = definedExternally
        var ErrorLogLevel: Number = definedExternally
        var AllLogLevel: Number = definedExternally
        var _LogCache: Any = definedExternally
        var errorsCount: Number = definedExternally
        var OnNewCacheEntry: (entry: String) -> Unit = definedExternally
        var _AddLogEntry: Any = definedExternally
        var _FormatMessage: Any = definedExternally
        var _LogDisabled: Any = definedExternally
        var _LogEnabled: Any = definedExternally
        var _WarnDisabled: Any = definedExternally
        var _WarnEnabled: Any = definedExternally
        var _ErrorDisabled: Any = definedExternally
        var _ErrorEnabled: Any = definedExternally
        var Log: (message: String) -> Unit = definedExternally
        var Warn: (message: String) -> Unit = definedExternally
        var Error: (message: String) -> Unit = definedExternally
        var LogCache: String = definedExternally
        fun ClearLogCache(): Unit = definedExternally
        var LogLevels: Number = definedExternally
    }
}
external open class _TypeStore {
    companion object {
        var RegisteredTypes: Json = definedExternally
        fun GetClass(fqdn: String): Any = definedExternally
    }
}
external open class DeepCopier {
    companion object {
        fun DeepCopy(source: Any, destination: Any, doNotCopyList: Array<String>? = definedExternally /* null */, mustCopyList: Array<String>? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class PrecisionDate {
    companion object {
        var Now: Number = definedExternally
    }
}
external open class _DevTools {
    companion object {
        fun WarnImport(name: String): String = definedExternally
    }
}
external interface `T$2` {
    @nativeGetter
    operator fun get(key: String): String?
    @nativeSetter
    operator fun set(key: String, value: String)
}

external open class WebRequest {
    open var _xhr: Any = definedExternally
    open var _injectCustomRequestHeaders: Any = definedExternally
    open var onprogress: ((`this`: XMLHttpRequest, ev: ProgressEvent) -> Any)? = definedExternally
    open var readyState: Number = definedExternally
    open var status: Number = definedExternally
    open var statusText: String = definedExternally
    open var response: Any = definedExternally
    open var responseURL: String = definedExternally
    open var responseText: String = definedExternally
    open var responseType: dynamic /* String /* "" */ | String /* "arraybuffer" */ | String /* "blob" */ | String /* "document" */ | String /* "json" */ | String /* "text" */ */ = definedExternally
    open fun  /* String /* "readystatechange" */ | String /* "abort" */ | String /* "error" */ | String /* "load" */ | String /* "loadend" */ | String /* "loadstart" */ | String /* "progress" */ | String /* "timeout" */ */ addEventListener(type: String, listener: (`this`: XMLHttpRequest, ev: Any?) -> Any, options: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun  /* String /* "readystatechange" */ | String /* "abort" */ | String /* "error" */ | String /* "load" */ | String /* "loadend" */ | String /* "loadstart" */ | String /* "progress" */ | String /* "timeout" */ */ addEventListener(type: String, listener: (`this`: XMLHttpRequest, ev: Any?) -> Any, options: AddEventListenerOptions? = definedExternally /* null */): Unit = definedExternally
    open fun  /* String /* "readystatechange" */ | String /* "abort" */ | String /* "error" */ | String /* "load" */ | String /* "loadend" */ | String /* "loadstart" */ | String /* "progress" */ | String /* "timeout" */ */ removeEventListener(type: String, listener: (`this`: XMLHttpRequest, ev: Any?) -> Any, options: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun  /* String /* "readystatechange" */ | String /* "abort" */ | String /* "error" */ | String /* "load" */ | String /* "loadend" */ | String /* "loadstart" */ | String /* "progress" */ | String /* "timeout" */ */ removeEventListener(type: String, listener: (`this`: XMLHttpRequest, ev: Any?) -> Any, options: EventListenerOptions? = definedExternally /* null */): Unit = definedExternally
    open fun abort(): Unit = definedExternally
    open fun send(body: Document? = definedExternally /* null */): Unit = definedExternally
    open fun send(body: BodyInit? = definedExternally /* null */): Unit = definedExternally
    open fun send(body: Nothing? = definedExternally /* null */): Unit = definedExternally
    open fun open(method: String, url: String): Unit = definedExternally
    companion object {
        var CustomRequestHeaders: `T$2` = definedExternally
        var CustomRequestModifiers: Array<(request: XMLHttpRequest) -> Unit> = definedExternally
    }
    open fun /* String /* "readystatechange" */ | String /* "abort" */ | String /* "error" */ | String /* "load" */ | String /* "loadend" */ | String /* "loadstart" */ | String /* "progress" */ | String /* "timeout" */ */ addEventListener(type: String, listener: (`this`: XMLHttpRequest, ev: Any?) -> Any): Unit = definedExternally
    open fun /* String /* "readystatechange" */ | String /* "abort" */ | String /* "error" */ | String /* "load" */ | String /* "loadend" */ | String /* "loadstart" */ | String /* "progress" */ | String /* "timeout" */ */ removeEventListener(type: String, listener: (`this`: XMLHttpRequest, ev: Any?) -> Any): Unit = definedExternally
    open fun send(): Unit = definedExternally
}
external open class AndOrNotEvaluator {
    companion object {
        fun Eval(query: String, evaluateCallback: (`val`: Any) -> Boolean): Boolean = definedExternally
        var _HandleParenthesisContent: Any = definedExternally
        var _SimplifyNegation: Any = definedExternally
    }
}
external open class Tags {
    companion object {
        fun EnableFor(obj: Any): Unit = definedExternally
        fun DisableFor(obj: Any): Unit = definedExternally
        fun HasTags(obj: Any): Boolean = definedExternally
        fun GetTags(obj: Any, asString: Boolean? = definedExternally /* null */): Any = definedExternally
        fun AddTagsTo(obj: Any, tagsString: String): Unit = definedExternally
        fun _AddTagTo(obj: Any, tag: String): Unit = definedExternally
        fun RemoveTagsFrom(obj: Any, tagsString: String): Unit = definedExternally
        fun _RemoveTagFrom(obj: Any, tag: String): Unit = definedExternally
        fun MatchesQuery(obj: Any, tagsQuery: String): Boolean = definedExternally
    }
}
external open class MaterialDefines {
    open var _keys: Any = definedExternally
    open var _isDirty: Any = definedExternally
    open var _renderId: Number = definedExternally
    open var _areLightsDirty: Boolean = definedExternally
    open var _areAttributesDirty: Boolean = definedExternally
    open var _areTexturesDirty: Boolean = definedExternally
    open var _areFresnelDirty: Boolean = definedExternally
    open var _areMiscDirty: Boolean = definedExternally
    open var _areImageProcessingDirty: Boolean = definedExternally
    open var _normals: Boolean = definedExternally
    open var _uvs: Boolean = definedExternally
    open var _needNormals: Boolean = definedExternally
    open var _needUVs: Boolean = definedExternally
    open var isDirty: Boolean = definedExternally
    open fun markAsProcessed(): Unit = definedExternally
    open fun markAsUnprocessed(): Unit = definedExternally
    open fun markAllAsDirty(): Unit = definedExternally
    open fun markAsImageProcessingDirty(): Unit = definedExternally
    open fun markAsLightDirty(): Unit = definedExternally
    open fun markAsAttributesDirty(): Unit = definedExternally
    open fun markAsTexturesDirty(): Unit = definedExternally
    open fun markAsFresnelDirty(): Unit = definedExternally
    open fun markAsMiscDirty(): Unit = definedExternally
    open fun rebuild(): Unit = definedExternally
    open fun isEqual(other: MaterialDefines): Boolean = definedExternally
    open fun cloneTo(other: MaterialDefines): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    override fun toString(): String = definedExternally
}
external interface IPipelineContext {
    var isAsync: Boolean
    var isReady: Boolean
    fun _handlesSpectorRebuildCallback(onCompiled: (compiledObject: Any) -> Unit)
}
external open class DataBuffer {
    open var references: Number = definedExternally
    open var capacity: Number = definedExternally
    open var is32Bits: Boolean = definedExternally
    open var underlyingResource: Any = definedExternally
}
external open class PerformanceMonitor(frameSampleSize: Number? = definedExternally /* null */) {
    open var _enabled: Any = definedExternally
    open var _rollingFrameTime: Any = definedExternally
    open var _lastFrameTimeMs: Any = definedExternally
    open fun sampleFrame(timeMs: Number? = definedExternally /* null */): Unit = definedExternally
    open var averageFrameTime: Number = definedExternally
    open var averageFrameTimeVariance: Number = definedExternally
    open var instantaneousFrameTime: Number = definedExternally
    open var averageFPS: Number = definedExternally
    open var instantaneousFPS: Number = definedExternally
    open var isSaturated: Boolean = definedExternally
    open fun enable(): Unit = definedExternally
    open fun disable(): Unit = definedExternally
    open var isEnabled: Boolean = definedExternally
    open fun reset(): Unit = definedExternally
}
external open class RollingAverage(length: Number) {
    open var average: Number = definedExternally
    open var variance: Number = definedExternally
    open var _samples: Array<Number> = definedExternally
    open var _sampleCount: Number = definedExternally
    open var _pos: Number = definedExternally
    open var _m2: Number = definedExternally
    open fun add(v: Number): Unit = definedExternally
    open fun history(i: Number): Number = definedExternally
    open fun isSaturated(): Boolean = definedExternally
    open fun reset(): Unit = definedExternally
    open fun _wrapPosition(i: Number): Number = definedExternally
}
external open class StringDictionary<T> {
    open fun copyFrom(source: StringDictionary<T>): Unit = definedExternally
    open fun get(key: String): T? = definedExternally
    open fun getOrAddWithFactory(key: String, factory: (key: String) -> T): T = definedExternally
    open fun getOrAdd(key: String, `val`: T): T = definedExternally
    open fun contains(key: String): Boolean = definedExternally
    open fun add(key: String, value: T): Boolean = definedExternally
    open fun set(key: String, value: T): Boolean = definedExternally
    open fun getAndRemove(key: String): T = definedExternally
    open fun remove(key: String): Boolean = definedExternally
    open fun clear(): Unit = definedExternally
    open var count: Number = definedExternally
    open fun forEach(callback: (key: String, `val`: T) -> Unit): Unit = definedExternally
    open fun <TRes> first(callback: (key: String, `val`: T) -> TRes): TRes? = definedExternally
    open var _count: Any = definedExternally
    open var _data: Any = definedExternally
}
external open class PromisePolyfill {
    companion object {
        fun Apply(force: Boolean? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class Buffer {
    constructor(engine: Any, data: Array<Number>, updatable: Boolean, stride: Number? = definedExternally /* null */, postponeInternalCreation: Boolean? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */)
    constructor(engine: Any, data: ArrayBuffer, updatable: Boolean, stride: Number? = definedExternally /* null */, postponeInternalCreation: Boolean? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */)
    constructor(engine: Any, data: ArrayBufferView, updatable: Boolean, stride: Number? = definedExternally /* null */, postponeInternalCreation: Boolean? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */)
    open var _engine: Any = definedExternally
    open var _buffer: Any = definedExternally
    open var _data: dynamic /* Array<Number> | ArrayBuffer | ArrayBufferView */ = definedExternally
    open var _updatable: Any = definedExternally
    open var _instanced: Any = definedExternally
    open var byteStride: Number = definedExternally
    open fun createVertexBuffer(kind: String, offset: Number, size: Number, stride: Number? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */): VertexBuffer = definedExternally
    open fun isUpdatable(): Boolean = definedExternally
    open fun getData(): dynamic /* Array<Number> | ArrayBuffer | ArrayBufferView */ = definedExternally
    open fun getBuffer(): DataBuffer = definedExternally
    open fun getStrideSize(): Number = definedExternally
    open fun create(data: Array<Number>? = definedExternally /* null */): Unit = definedExternally
    open fun create(data: ArrayBuffer? = definedExternally /* null */): Unit = definedExternally
    open fun create(data: ArrayBufferView? = definedExternally /* null */): Unit = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun update(data: Array<Number>): Unit = definedExternally
    open fun update(data: ArrayBuffer): Unit = definedExternally
    open fun update(data: ArrayBufferView): Unit = definedExternally
    open fun updateDirectly(data: Array<Number>, offset: Number, vertexCount: Number? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateDirectly(data: ArrayBuffer, offset: Number, vertexCount: Number? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateDirectly(data: ArrayBufferView, offset: Number, vertexCount: Number? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun create(): Unit = definedExternally
}
external open class VertexBuffer {
    constructor(engine: Any, data: Array<Number>, kind: String, updatable: Boolean, postponeInternalCreation: Boolean? = definedExternally /* null */, stride: Number? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, offset: Number? = definedExternally /* null */, size: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */, normalized: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */)
    constructor(engine: Any, data: ArrayBuffer, kind: String, updatable: Boolean, postponeInternalCreation: Boolean? = definedExternally /* null */, stride: Number? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, offset: Number? = definedExternally /* null */, size: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */, normalized: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */)
    constructor(engine: Any, data: ArrayBufferView, kind: String, updatable: Boolean, postponeInternalCreation: Boolean? = definedExternally /* null */, stride: Number? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, offset: Number? = definedExternally /* null */, size: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */, normalized: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */)
    constructor(engine: Any, data: Buffer, kind: String, updatable: Boolean, postponeInternalCreation: Boolean? = definedExternally /* null */, stride: Number? = definedExternally /* null */, instanced: Boolean? = definedExternally /* null */, offset: Number? = definedExternally /* null */, size: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */, normalized: Boolean? = definedExternally /* null */, useBytes: Boolean? = definedExternally /* null */)
    open var _buffer: Buffer = definedExternally
    open var _kind: Any = definedExternally
    open var _size: Any = definedExternally
    open var _ownsBuffer: Any = definedExternally
    open var _instanced: Any = definedExternally
    open var _instanceDivisor: Any = definedExternally
    open var instanceDivisor: Number = definedExternally
    open var byteStride: Number = definedExternally
    open var byteOffset: Number = definedExternally
    open var normalized: Boolean = definedExternally
    open var type: Number = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun getKind(): String = definedExternally
    open fun isUpdatable(): Boolean = definedExternally
    open fun getData(): dynamic /* Array<Number> | ArrayBuffer | ArrayBufferView */ = definedExternally
    open fun getBuffer(): DataBuffer = definedExternally
    open fun getStrideSize(): Number = definedExternally
    open fun getOffset(): Number = definedExternally
    open fun getSize(): Number = definedExternally
    open fun getIsInstanced(): Boolean = definedExternally
    open fun getInstanceDivisor(): Number = definedExternally
    open fun create(data: Array<Number>? = definedExternally /* null */): Unit = definedExternally
    open fun create(data: ArrayBuffer? = definedExternally /* null */): Unit = definedExternally
    open fun create(data: ArrayBufferView? = definedExternally /* null */): Unit = definedExternally
    open fun update(data: Array<Number>): Unit = definedExternally
    open fun update(data: ArrayBuffer): Unit = definedExternally
    open fun update(data: ArrayBufferView): Unit = definedExternally
    open fun updateDirectly(data: Array<Number>, offset: Number, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateDirectly(data: ArrayBuffer, offset: Number, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateDirectly(data: ArrayBufferView, offset: Number, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun forEach(count: Number, callback: (value: Number, index: Number) -> Unit): Unit = definedExternally
    companion object {
        var BYTE: Number = definedExternally
        var UNSIGNED_BYTE: Number = definedExternally
        var SHORT: Number = definedExternally
        var UNSIGNED_SHORT: Number = definedExternally
        var INT: Number = definedExternally
        var UNSIGNED_INT: Number = definedExternally
        var FLOAT: Number = definedExternally
        var PositionKind: String = definedExternally
        var NormalKind: String = definedExternally
        var TangentKind: String = definedExternally
        var UVKind: String = definedExternally
        var UV2Kind: String = definedExternally
        var UV3Kind: String = definedExternally
        var UV4Kind: String = definedExternally
        var UV5Kind: String = definedExternally
        var UV6Kind: String = definedExternally
        var ColorKind: String = definedExternally
        var MatricesIndicesKind: String = definedExternally
        var MatricesWeightsKind: String = definedExternally
        var MatricesIndicesExtraKind: String = definedExternally
        var MatricesWeightsExtraKind: String = definedExternally
        fun DeduceStride(kind: String): Number = definedExternally
        fun GetTypeByteLength(type: Number): Number = definedExternally
        fun ForEach(data: Array<Number>, byteOffset: Number, byteStride: Number, componentCount: Number, componentType: Number, count: Number, normalized: Boolean, callback: (value: Number, index: Number) -> Unit): Unit = definedExternally
        fun ForEach(data: ArrayBuffer, byteOffset: Number, byteStride: Number, componentCount: Number, componentType: Number, count: Number, normalized: Boolean, callback: (value: Number, index: Number) -> Unit): Unit = definedExternally
        fun ForEach(data: ArrayBufferView, byteOffset: Number, byteStride: Number, componentCount: Number, componentType: Number, count: Number, normalized: Boolean, callback: (value: Number, index: Number) -> Unit): Unit = definedExternally
        var _GetFloatValue: Any = definedExternally
    }
    open fun create(): Unit = definedExternally
}
external open class SphericalHarmonics {
    open var preScaled: Boolean = definedExternally
    open var l00: Vector3 = definedExternally
    open var l1_1: Vector3 = definedExternally
    open var l10: Vector3 = definedExternally
    open var l11: Vector3 = definedExternally
    open var l2_2: Vector3 = definedExternally
    open var l2_1: Vector3 = definedExternally
    open var l20: Vector3 = definedExternally
    open var l21: Vector3 = definedExternally
    open var l22: Vector3 = definedExternally
    open fun addLight(direction: Vector3, color: Color3, deltaSolidAngle: Number): Unit = definedExternally
    open fun scaleInPlace(scale: Number): Unit = definedExternally
    open fun convertIncidentRadianceToIrradiance(): Unit = definedExternally
    open fun convertIrradianceToLambertianRadiance(): Unit = definedExternally
    open fun preScaleForRendering(): Unit = definedExternally
    companion object {
        fun FromArray(data: ArrayLike<ArrayLike<Number>>): SphericalHarmonics = definedExternally
        fun FromPolynomial(polynomial: SphericalPolynomial): SphericalHarmonics = definedExternally
    }
}
external open class SphericalPolynomial {
    open var _harmonics: Any = definedExternally
    open var preScaledHarmonics: SphericalHarmonics = definedExternally
    open var x: Vector3 = definedExternally
    open var y: Vector3 = definedExternally
    open var z: Vector3 = definedExternally
    open var xx: Vector3 = definedExternally
    open var yy: Vector3 = definedExternally
    open var zz: Vector3 = definedExternally
    open var xy: Vector3 = definedExternally
    open var yz: Vector3 = definedExternally
    open var zx: Vector3 = definedExternally
    open fun addAmbient(color: Color3): Unit = definedExternally
    open fun scaleInPlace(scale: Number): Unit = definedExternally
    companion object {
        fun FromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial = definedExternally
        fun FromArray(data: ArrayLike<ArrayLike<Number>>): SphericalPolynomial = definedExternally
    }
}
external interface CubeMapInfo {
    var front: ArrayBufferView
    var back: ArrayBufferView
    var left: ArrayBufferView
    var right: ArrayBufferView
    var up: ArrayBufferView
    var down: ArrayBufferView
    var size: Number
    var format: Number
    var type: Number
    var gammaSpace: Boolean
}
external open class PanoramaToCubeMapTools {
    companion object {
        var FACE_FRONT: Any = definedExternally
        var FACE_BACK: Any = definedExternally
        var FACE_RIGHT: Any = definedExternally
        var FACE_LEFT: Any = definedExternally
        var FACE_DOWN: Any = definedExternally
        var FACE_UP: Any = definedExternally
        fun ConvertPanoramaToCubemap(float32Array: Float32Array, inputWidth: Number, inputHeight: Number, size: Number): CubeMapInfo = definedExternally
        var CreateCubemapTexture: Any = definedExternally
        var CalcProjectionSpherical: Any = definedExternally
    }
}
external open class CubeMapToSphericalPolynomialTools {
    companion object {
        var FileFaces: Any = definedExternally
        fun ConvertCubeMapTextureToSphericalPolynomial(texture: BaseTexture): SphericalPolynomial? = definedExternally
        fun ConvertCubeMapToSphericalPolynomial(cubeInfo: CubeMapInfo): SphericalPolynomial = definedExternally
    }
}
external open class EngineStore {
    companion object {
        var Instances: Array<Engine> = definedExternally
        var _LastCreatedScene: Scene = definedExternally
        var LastCreatedEngine: Engine = definedExternally
        var LastCreatedScene: Scene = definedExternally
    }
}
external open class RenderTargetCreationOptions {
    open var generateMipMaps: Boolean = definedExternally
    open var generateDepthBuffer: Boolean = definedExternally
    open var generateStencilBuffer: Boolean = definedExternally
    open var type: Number = definedExternally
    open var samplingMode: Number = definedExternally
    open var format: Number = definedExternally
}
external open class _AlphaState {
    open var _isAlphaBlendDirty: Any = definedExternally
    open var _isBlendFunctionParametersDirty: Any = definedExternally
    open var _isBlendEquationParametersDirty: Any = definedExternally
    open var _isBlendConstantsDirty: Any = definedExternally
    open var _alphaBlend: Any = definedExternally
    open var _blendFunctionParameters: Any = definedExternally
    open var _blendEquationParameters: Any = definedExternally
    open var _blendConstants: Any = definedExternally
    open var isDirty: Boolean = definedExternally
    open var alphaBlend: Boolean = definedExternally
    open fun setAlphaBlendConstants(r: Number, g: Number, b: Number, a: Number): Unit = definedExternally
    open fun setAlphaBlendFunctionParameters(value0: Number, value1: Number, value2: Number, value3: Number): Unit = definedExternally
    open fun setAlphaEquationParameters(rgb: Number, alpha: Number): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open fun apply(gl: WebGLRenderingContext): Unit = definedExternally
}
external open class _DepthCullingState {
    open var _isDepthTestDirty: Any = definedExternally
    open var _isDepthMaskDirty: Any = definedExternally
    open var _isDepthFuncDirty: Any = definedExternally
    open var _isCullFaceDirty: Any = definedExternally
    open var _isCullDirty: Any = definedExternally
    open var _isZOffsetDirty: Any = definedExternally
    open var _isFrontFaceDirty: Any = definedExternally
    open var _depthTest: Any = definedExternally
    open var _depthMask: Any = definedExternally
    open var _depthFunc: Any = definedExternally
    open var _cull: Any = definedExternally
    open var _cullFace: Any = definedExternally
    open var _zOffset: Any = definedExternally
    open var _frontFace: Any = definedExternally
    open var isDirty: Boolean = definedExternally
    open var zOffset: Number = definedExternally
    open var cullFace: Number = definedExternally
    open var cull: Boolean = definedExternally
    open var depthFunc: Number = definedExternally
    open var depthMask: Boolean = definedExternally
    open var depthTest: Boolean = definedExternally
    open var frontFace: Number = definedExternally
    open fun reset(): Unit = definedExternally
    open fun apply(gl: WebGLRenderingContext): Unit = definedExternally
}
external open class _StencilState {
    open var _isStencilTestDirty: Any = definedExternally
    open var _isStencilMaskDirty: Any = definedExternally
    open var _isStencilFuncDirty: Any = definedExternally
    open var _isStencilOpDirty: Any = definedExternally
    open var _stencilTest: Any = definedExternally
    open var _stencilMask: Any = definedExternally
    open var _stencilFunc: Any = definedExternally
    open var _stencilFuncRef: Any = definedExternally
    open var _stencilFuncMask: Any = definedExternally
    open var _stencilOpStencilFail: Any = definedExternally
    open var _stencilOpDepthFail: Any = definedExternally
    open var _stencilOpStencilDepthPass: Any = definedExternally
    open var isDirty: Boolean = definedExternally
    open var stencilFunc: Number = definedExternally
    open var stencilFuncRef: Number = definedExternally
    open var stencilFuncMask: Number = definedExternally
    open var stencilOpStencilFail: Number = definedExternally
    open var stencilOpDepthFail: Number = definedExternally
    open var stencilOpStencilDepthPass: Number = definedExternally
    open var stencilMask: Number = definedExternally
    open var stencilTest: Boolean = definedExternally
    open fun reset(): Unit = definedExternally
    open fun apply(gl: WebGLRenderingContext): Unit = definedExternally
    companion object {
        var ALWAYS: Number = definedExternally
        var KEEP: Number = definedExternally
        var REPLACE: Number = definedExternally
    }
}
external open class _TimeToken {
    open var _startTimeQuery: WebGLQuery = definedExternally
    open var _endTimeQuery: WebGLQuery = definedExternally
    open var _timeElapsedQuery: WebGLQuery = definedExternally
    open var _timeElapsedQueryEnded: Boolean = definedExternally
}
external open class InternalTexture(engine: Engine, dataSource: Number, delayAllocation: Boolean? = definedExternally /* null */) {
    open var isReady: Boolean = definedExternally
    open var isCube: Boolean = definedExternally
    open var is3D: Boolean = definedExternally
    open var isMultiview: Boolean = definedExternally
    open var url: String = definedExternally
    open var samplingMode: Number = definedExternally
    open var generateMipMaps: Boolean = definedExternally
    open var samples: Number = definedExternally
    open var type: Number = definedExternally
    open var format: Number = definedExternally
    open var onLoadedObservable: Observable<InternalTexture> = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var depth: Number = definedExternally
    open var baseWidth: Number = definedExternally
    open var baseHeight: Number = definedExternally
    open var baseDepth: Number = definedExternally
    open var invertY: Boolean = definedExternally
    open var _invertVScale: Boolean = definedExternally
    open var _associatedChannel: Number = definedExternally
    open var _dataSource: Number = definedExternally
    open var _buffer: dynamic /* String | HTMLImageElement | Blob | ArrayBuffer */ = definedExternally
    open var _bufferView: ArrayBufferView = definedExternally
    open var _bufferViewArray: Array<ArrayBufferView> = definedExternally
    open var _bufferViewArrayArray: Array<Array<ArrayBufferView>> = definedExternally
    open var _size: Number = definedExternally
    open var _extension: String = definedExternally
    open var _files: Array<String> = definedExternally
    open var _workingCanvas: HTMLCanvasElement = definedExternally
    open var _workingContext: CanvasRenderingContext2D = definedExternally
    open var _framebuffer: WebGLFramebuffer = definedExternally
    open var _depthStencilBuffer: WebGLRenderbuffer = definedExternally
    open var _MSAAFramebuffer: WebGLFramebuffer = definedExternally
    open var _MSAARenderBuffer: WebGLRenderbuffer = definedExternally
    open var _attachments: Array<Number> = definedExternally
    open var _cachedCoordinatesMode: Number = definedExternally
    open var _cachedWrapU: Number = definedExternally
    open var _cachedWrapV: Number = definedExternally
    open var _cachedWrapR: Number = definedExternally
    open var _cachedAnisotropicFilteringLevel: Number = definedExternally
    open var _isDisabled: Boolean = definedExternally
    open var _compression: String = definedExternally
    open var _generateStencilBuffer: Boolean = definedExternally
    open var _generateDepthBuffer: Boolean = definedExternally
    open var _comparisonFunction: Number = definedExternally
    open var _sphericalPolynomial: SphericalPolynomial = definedExternally
    open var _lodGenerationScale: Number = definedExternally
    open var _lodGenerationOffset: Number = definedExternally
    open var _colorTextureArray: WebGLTexture = definedExternally
    open var _depthStencilTextureArray: WebGLTexture = definedExternally
    open var _lodTextureHigh: BaseTexture = definedExternally
    open var _lodTextureMid: BaseTexture = definedExternally
    open var _lodTextureLow: BaseTexture = definedExternally
    open var _isRGBD: Boolean = definedExternally
    open var _webGLTexture: WebGLTexture = definedExternally
    open var _references: Number = definedExternally
    open var _engine: Any = definedExternally
    open fun getEngine(): Engine = definedExternally
    open var dataSource: Number = definedExternally
    open fun incrementReferences(): Unit = definedExternally
    open fun updateSize(width: Number, height: Number, depth: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun _swapAndDie(target: InternalTexture): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        var _UpdateRGBDAsync: (internalTexture: InternalTexture, data: Array<Array<ArrayBufferView>>, sphericalPolynomial: SphericalPolynomial?, lodScale: Number, lodOffset: Number) -> Promise<Unit> = definedExternally
        var DATASOURCE_UNKNOWN: Number = definedExternally
        var DATASOURCE_URL: Number = definedExternally
        var DATASOURCE_TEMP: Number = definedExternally
        var DATASOURCE_RAW: Number = definedExternally
        var DATASOURCE_DYNAMIC: Number = definedExternally
        var DATASOURCE_RENDERTARGET: Number = definedExternally
        var DATASOURCE_MULTIRENDERTARGET: Number = definedExternally
        var DATASOURCE_CUBE: Number = definedExternally
        var DATASOURCE_CUBERAW: Number = definedExternally
        var DATASOURCE_CUBEPREFILTERED: Number = definedExternally
        var DATASOURCE_RAW3D: Number = definedExternally
        var DATASOURCE_DEPTHTEXTURE: Number = definedExternally
        var DATASOURCE_CUBERAW_RGBD: Number = definedExternally
    }
}
external interface IEasingFunction {
    fun ease(gradient: Number): Number
}
external open class EasingFunction : IEasingFunction {
    open var _easingMode: Any = definedExternally
    open fun setEasingMode(easingMode: Number): Unit = definedExternally
    open fun getEasingMode(): Number = definedExternally
    open fun easeInCore(gradient: Number): Number = definedExternally
    override fun ease(gradient: Number): Number = definedExternally
    companion object {
        var EASINGMODE_EASEIN: Number = definedExternally
        var EASINGMODE_EASEOUT: Number = definedExternally
        var EASINGMODE_EASEINOUT: Number = definedExternally
    }
}
external open class CircleEase : EasingFunction, IEasingFunction {
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class BackEase(amplitude: Number? = definedExternally /* null */) : EasingFunction, IEasingFunction {
    open var amplitude: Number = definedExternally
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class BounceEase(bounces: Number? = definedExternally /* null */, bounciness: Number? = definedExternally /* null */) : EasingFunction, IEasingFunction {
    open var bounces: Number = definedExternally
    open var bounciness: Number = definedExternally
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class CubicEase : EasingFunction, IEasingFunction {
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class ElasticEase(oscillations: Number? = definedExternally /* null */, springiness: Number? = definedExternally /* null */) : EasingFunction, IEasingFunction {
    open var oscillations: Number = definedExternally
    open var springiness: Number = definedExternally
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class ExponentialEase(exponent: Number? = definedExternally /* null */) : EasingFunction, IEasingFunction {
    open var exponent: Number = definedExternally
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class PowerEase(power: Number? = definedExternally /* null */) : EasingFunction, IEasingFunction {
    open var power: Number = definedExternally
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class QuadraticEase : EasingFunction, IEasingFunction {
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class QuarticEase : EasingFunction, IEasingFunction {
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class QuinticEase : EasingFunction, IEasingFunction {
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class SineEase : EasingFunction, IEasingFunction {
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external open class BezierCurveEase(x1: Number? = definedExternally /* null */, y1: Number? = definedExternally /* null */, x2: Number? = definedExternally /* null */, y2: Number? = definedExternally /* null */) : EasingFunction, IEasingFunction {
    open var x1: Number = definedExternally
    open var y1: Number = definedExternally
    open var x2: Number = definedExternally
    open var y2: Number = definedExternally
    override fun easeInCore(gradient: Number): Number = definedExternally
}
external interface IAnimationKey {
    var frame: Number
    var value: Any
    var inTangent: Any? get() = definedExternally; set(value) = definedExternally
    var outTangent: Any? get() = definedExternally; set(value) = definedExternally
    var interpolation: Number? /* 1 */ get() = definedExternally; set(value) = definedExternally
}
external enum class AnimationKeyInterpolation {
    STEP /* = 1 */
}
external open class AnimationRange(name: String, from: Number, to: Number) {
    open var name: String = definedExternally
    open var from: Number = definedExternally
    open var to: Number = definedExternally
    open fun clone(): AnimationRange = definedExternally
}
external open class AnimationEvent(frame: Number, action: (currentFrame: Number) -> Unit, onlyOnce: Boolean? = definedExternally /* null */) {
    open var frame: Number = definedExternally
    open var action: (currentFrame: Number) -> Unit = definedExternally
    open var onlyOnce: Boolean = definedExternally
    open var isDone: Boolean = definedExternally
    open fun _clone(): AnimationEvent = definedExternally
}
external interface Behavior<T> {
    var name: String
    fun init()
    fun attach(target: T)
    fun detach()
}
external interface IBehaviorAware<T> {
    fun addBehavior(behavior: Behavior<T>): T
    fun removeBehavior(behavior: Behavior<T>): T
    fun getBehaviorByName(name: String): Behavior<T>
}
external open class IntersectionInfo(bu: Number, bv: Number, distance: Number) {
    open var bu: Number = definedExternally
    open var bv: Number = definedExternally
    open var distance: Number = definedExternally
    open var faceId: Number = definedExternally
    open var subMeshId: Number = definedExternally
}
external open class BoundingSphere(min: Vector3, max: Vector3, worldMatrix: Matrix? = definedExternally /* null */) {
    open var center: Vector3 = definedExternally
    open var radius: Number = definedExternally
    open var centerWorld: Vector3 = definedExternally
    open var radiusWorld: Number = definedExternally
    open var minimum: Vector3 = definedExternally
    open var maximum: Vector3 = definedExternally
    open var _worldMatrix: Any = definedExternally
    open fun reConstruct(min: Vector3, max: Vector3, worldMatrix: Matrix? = definedExternally /* null */): Unit = definedExternally
    open fun scale(factor: Number): BoundingSphere = definedExternally
    open fun getWorldMatrix(): Matrix = definedExternally
    open fun _update(worldMatrix: Matrix): Unit = definedExternally
    open fun isInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun isCenterInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun intersectsPoint(point: Vector3): Boolean = definedExternally
    companion object {
        var TmpVector3: Any = definedExternally
        fun Intersects(sphere0: BoundingSphere, sphere1: BoundingSphere): Boolean = definedExternally
    }
}
external open class BoundingBox(min: Vector3, max: Vector3, worldMatrix: Matrix? = definedExternally /* null */) : ICullable {
    open var vectors: Array<Vector3> = definedExternally
    open var center: Vector3 = definedExternally
    open var centerWorld: Vector3 = definedExternally
    open var extendSize: Vector3 = definedExternally
    open var extendSizeWorld: Vector3 = definedExternally
    open var directions: Array<Vector3> = definedExternally
    open var vectorsWorld: Array<Vector3> = definedExternally
    open var minimumWorld: Vector3 = definedExternally
    open var maximumWorld: Vector3 = definedExternally
    open var minimum: Vector3 = definedExternally
    open var maximum: Vector3 = definedExternally
    open var _worldMatrix: Any = definedExternally
    open var _tag: Number = definedExternally
    open fun reConstruct(min: Vector3, max: Vector3, worldMatrix: Matrix? = definedExternally /* null */): Unit = definedExternally
    open fun scale(factor: Number): BoundingBox = definedExternally
    open fun getWorldMatrix(): Matrix = definedExternally
    open fun _update(world: Matrix): Unit = definedExternally
    override fun isInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    override fun isCompletelyInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun intersectsPoint(point: Vector3): Boolean = definedExternally
    open fun intersectsSphere(sphere: BoundingSphere): Boolean = definedExternally
    open fun intersectsMinMax(min: Vector3, max: Vector3): Boolean = definedExternally
    companion object {
        var TmpVector3: Any = definedExternally
        fun Intersects(box0: BoundingBox, box1: BoundingBox): Boolean = definedExternally
        fun IntersectsSphere(minPoint: Vector3, maxPoint: Vector3, sphereCenter: Vector3, sphereRadius: Number): Boolean = definedExternally
        fun IsCompletelyInFrustum(boundingVectors: Array<Vector3>, frustumPlanes: Array<Plane>): Boolean = definedExternally
        fun IsInFrustum(boundingVectors: Array<Vector3>, frustumPlanes: Array<Plane>): Boolean = definedExternally
    }
}
external open class Collider {
    open var collisionFound: Boolean = definedExternally
    open var intersectionPoint: Vector3 = definedExternally
    open var collidedMesh: AbstractMesh = definedExternally
    open var _collisionPoint: Any = definedExternally
    open var _planeIntersectionPoint: Any = definedExternally
    open var _tempVector: Any = definedExternally
    open var _tempVector2: Any = definedExternally
    open var _tempVector3: Any = definedExternally
    open var _tempVector4: Any = definedExternally
    open var _edge: Any = definedExternally
    open var _baseToVertex: Any = definedExternally
    open var _destinationPoint: Any = definedExternally
    open var _slidePlaneNormal: Any = definedExternally
    open var _displacementVector: Any = definedExternally
    open var _radius: Vector3 = definedExternally
    open var _retry: Number = definedExternally
    open var _velocity: Any = definedExternally
    open var _basePoint: Any = definedExternally
    open var _epsilon: Any = definedExternally
    open var _velocityWorldLength: Number = definedExternally
    open var _basePointWorld: Vector3 = definedExternally
    open var _velocityWorld: Any = definedExternally
    open var _normalizedVelocity: Any = definedExternally
    open var _initialVelocity: Vector3 = definedExternally
    open var _initialPosition: Vector3 = definedExternally
    open var _nearestDistance: Any = definedExternally
    open var _collisionMask: Any = definedExternally
    open var collisionMask: Number = definedExternally
    open var slidePlaneNormal: Vector3 = definedExternally
    open fun _initialize(source: Vector3, dir: Vector3, e: Number): Unit = definedExternally
    open fun _checkPointInTriangle(point: Vector3, pa: Vector3, pb: Vector3, pc: Vector3, n: Vector3): Boolean = definedExternally
    open fun _canDoCollision(sphereCenter: Vector3, sphereRadius: Number, vecMin: Vector3, vecMax: Vector3): Boolean = definedExternally
    open fun _testTriangle(faceIndex: Number, trianglePlaneArray: Array<Plane>, p1: Vector3, p2: Vector3, p3: Vector3, hasMaterial: Boolean): Unit = definedExternally
    open fun _collide(trianglePlaneArray: Array<Plane>, pts: Array<Vector3>, indices: Array<Number>, indexStart: Number, indexEnd: Number, decal: Number, hasMaterial: Boolean): Unit = definedExternally
    open fun _collide(trianglePlaneArray: Array<Plane>, pts: Array<Vector3>, indices: Int32Array, indexStart: Number, indexEnd: Number, decal: Number, hasMaterial: Boolean): Unit = definedExternally
    open fun _collide(trianglePlaneArray: Array<Plane>, pts: Array<Vector3>, indices: Uint32Array, indexStart: Number, indexEnd: Number, decal: Number, hasMaterial: Boolean): Unit = definedExternally
    open fun _collide(trianglePlaneArray: Array<Plane>, pts: Array<Vector3>, indices: Uint16Array, indexStart: Number, indexEnd: Number, decal: Number, hasMaterial: Boolean): Unit = definedExternally
    open fun _getResponse(pos: Vector3, vel: Vector3): Unit = definedExternally
}
external interface ICullable {
    fun isInFrustum(frustumPlanes: Array<Plane>): Boolean
    fun isCompletelyInFrustum(frustumPlanes: Array<Plane>): Boolean
}
external open class BoundingInfo(minimum: Vector3, maximum: Vector3, worldMatrix: Matrix? = definedExternally /* null */) : ICullable {
    open var boundingBox: BoundingBox = definedExternally
    open var boundingSphere: BoundingSphere = definedExternally
    open var _isLocked: Any = definedExternally
    open fun reConstruct(min: Vector3, max: Vector3, worldMatrix: Matrix? = definedExternally /* null */): Unit = definedExternally
    open var minimum: Vector3 = definedExternally
    open var maximum: Vector3 = definedExternally
    open var isLocked: Boolean = definedExternally
    open fun update(world: Matrix): Unit = definedExternally
    open fun centerOn(center: Vector3, extend: Vector3): BoundingInfo = definedExternally
    open fun scale(factor: Number): BoundingInfo = definedExternally
	override open fun isInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
	open fun isInFrustum(frustumPlanes: Array<Plane>, strategy: Number? = definedExternally /* null */): Boolean = definedExternally
    open var diagonalLength: Number = definedExternally
    override fun isCompletelyInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun _checkCollision(collider: Collider): Boolean = definedExternally
    open fun intersectsPoint(point: Vector3): Boolean = definedExternally
    open fun intersects(boundingInfo: BoundingInfo, precise: Boolean): Boolean = definedExternally
    companion object {
        var TmpVector3: Any = definedExternally
    }
}
external interface ISmartArrayLike<T> {
    var data: Array<T>
    var length: Number
}
external open class SmartArray<T>(capacity: Number) : ISmartArrayLike<T> {
    override var data: Array<T> = definedExternally
    override var length: Number = definedExternally
    open var _id: Number = definedExternally
    open fun push(value: T): Unit = definedExternally
    open fun forEach(func: (content: T) -> Unit): Unit = definedExternally
    open fun sort(compareFn: (a: T, b: T) -> Number): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun concat(array: Any): Unit = definedExternally
    open fun indexOf(value: T): Number = definedExternally
    open fun contains(value: T): Boolean = definedExternally
    companion object {
        var _GlobalId: Any = definedExternally
    }
}
external open class SmartArrayNoDuplicate<T> : SmartArray<T> {
    open var _duplicateId: Any = definedExternally
	override open fun push(value: T): Unit = definedExternally
    open fun pushNoDuplicate(value: T): Boolean = definedExternally
    override fun reset(): Unit = definedExternally
    open fun concatWithNoDuplicate(array: Any): Unit = definedExternally
}
external open class MultiMaterial(name: String, scene: Scene) : Material {
    open var _subMaterials: Any = definedExternally
    open var subMaterials: Array<Material> = definedExternally
    open fun getChildren(): Array<Material> = definedExternally
    open var _hookArray: Any = definedExternally
    open fun getSubMaterial(index: Number): Material = definedExternally
    override fun getActiveTextures(): Array<BaseTexture> = definedExternally
    override fun getClassName(): String = definedExternally
    override fun isReadyForSubMesh(mesh: AbstractMesh, subMesh: BaseSubMesh, useInstances: Boolean?): Boolean = definedExternally
    open fun clone(name: String, cloneChildren: Boolean? = definedExternally /* null */): MultiMaterial = definedExternally
    override fun serialize(): Any = definedExternally
    override fun dispose(forceDisposeEffect: Boolean?, forceDisposeTextures: Boolean?, forceDisposeChildren: Boolean?): Unit = definedExternally
    companion object {
        fun ParseMultiMaterial(parsedMultiMaterial: Any, scene: Scene): MultiMaterial = definedExternally
    }
}
external open class SceneLoaderFlags {
    companion object {
        var _ForceFullSceneLoadingForIncremental: Any = definedExternally
        var _ShowLoadingScreen: Any = definedExternally
        var _CleanBoneMatrixWeights: Any = definedExternally
        var _loggingLevel: Any = definedExternally
        var ForceFullSceneLoadingForIncremental: Boolean = definedExternally
        var ShowLoadingScreen: Boolean = definedExternally
        var loggingLevel: Number = definedExternally
        var CleanBoneMatrixWeights: Boolean = definedExternally
    }
}
external open class TransformNode(name: String, scene: Scene? = definedExternally /* null */, isPure: Boolean? = definedExternally /* null */) : Node {
    open var _forward: Any = definedExternally
    open var _forwardInverted: Any = definedExternally
    open var _up: Any = definedExternally
    open var _right: Any = definedExternally
    open var _rightInverted: Any = definedExternally
    open var _position: Any = definedExternally
    open var _rotation: Any = definedExternally
    open var _rotationQuaternion: Any = definedExternally
    open var _scaling: Vector3 = definedExternally
    open var _isDirty: Boolean = definedExternally
    open var _transformToBoneReferal: Any = definedExternally
    open var _billboardMode: Any = definedExternally
    open var billboardMode: Number = definedExternally
    open var _preserveParentRotationForBillboard: Any = definedExternally
    open var preserveParentRotationForBillboard: Boolean = definedExternally
    open var scalingDeterminant: Number = definedExternally
    open var _infiniteDistance: Any = definedExternally
    open var infiniteDistance: Boolean = definedExternally
    open var ignoreNonUniformScaling: Boolean = definedExternally
    open var reIntegrateRotationIntoRotationQuaternion: Boolean = definedExternally
    open var _poseMatrix: Matrix = definedExternally
    open var _localMatrix: Matrix = definedExternally
    open var _usePivotMatrix: Any = definedExternally
    open var _absolutePosition: Any = definedExternally
    open var _pivotMatrix: Any = definedExternally
    open var _pivotMatrixInverse: Any = definedExternally
    open var _postMultiplyPivotMatrix: Boolean = definedExternally
    open var _isWorldMatrixFrozen: Boolean = definedExternally
    open var _indexInSceneTransformNodesArray: Number = definedExternally
    open var onAfterWorldMatrixUpdateObservable: Observable<TransformNode> = definedExternally
    override fun getClassName(): String = definedExternally
    open var position: Vector3 = definedExternally
    open var rotation: Vector3 = definedExternally
    open var scaling: Vector3 = definedExternally
    open var rotationQuaternion: Quaternion = definedExternally
    open var forward: Vector3 = definedExternally
    open var up: Vector3 = definedExternally
    open var right: Vector3 = definedExternally
    open fun updatePoseMatrix(matrix: Matrix): TransformNode = definedExternally
    open fun getPoseMatrix(): Matrix = definedExternally
    override fun _isSynchronized(): Boolean = definedExternally
    override fun _initCache(): Unit = definedExternally
    open fun markAsDirty(property: String): TransformNode = definedExternally
    open var absolutePosition: Vector3 = definedExternally
    open fun setPreTransformMatrix(matrix: Matrix): TransformNode = definedExternally
    open fun setPivotMatrix(matrix: Matrix, postMultiplyPivotMatrix: Boolean? = definedExternally /* null */): TransformNode = definedExternally
    open fun getPivotMatrix(): Matrix = definedExternally
    open fun freezeWorldMatrix(): TransformNode = definedExternally
    open fun unfreezeWorldMatrix(): TransformNode /* this */ = definedExternally
    open var isWorldMatrixFrozen: Boolean = definedExternally
    open fun getAbsolutePosition(): Vector3 = definedExternally
    open fun setAbsolutePosition(absolutePosition: Vector3): TransformNode = definedExternally
    open fun setPositionWithLocalVector(vector3: Vector3): TransformNode = definedExternally
    open fun getPositionExpressedInLocalSpace(): Vector3 = definedExternally
    open fun locallyTranslate(vector3: Vector3): TransformNode = definedExternally
    open fun lookAt(targetPoint: Vector3, yawCor: Number? = definedExternally /* null */, pitchCor: Number? = definedExternally /* null */, rollCor: Number? = definedExternally /* null */, space: Number? /* 0 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun lookAt(targetPoint: Vector3, yawCor: Number? = definedExternally /* null */, pitchCor: Number? = definedExternally /* null */, rollCor: Number? = definedExternally /* null */, space: Number? /* 1 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun lookAt(targetPoint: Vector3, yawCor: Number? = definedExternally /* null */, pitchCor: Number? = definedExternally /* null */, rollCor: Number? = definedExternally /* null */, space: Number? /* 2 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun getDirection(localAxis: Vector3): Vector3 = definedExternally
    open fun getDirectionToRef(localAxis: Vector3, result: Vector3): TransformNode = definedExternally
    open fun setDirection(localAxis: Vector3, yawCor: Number? = definedExternally /* null */, pitchCor: Number? = definedExternally /* null */, rollCor: Number? = definedExternally /* null */): TransformNode = definedExternally
    open fun setPivotPoint(point: Vector3, space: Number? /* 0 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun setPivotPoint(point: Vector3, space: Number? /* 1 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun setPivotPoint(point: Vector3, space: Number? /* 2 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun getPivotPoint(): Vector3 = definedExternally
    open fun getPivotPointToRef(result: Vector3): TransformNode = definedExternally
    open fun getAbsolutePivotPoint(): Vector3 = definedExternally
    open fun getAbsolutePivotPointToRef(result: Vector3): TransformNode = definedExternally
    open fun setParent(node: Node): TransformNode = definedExternally
    open var _nonUniformScaling: Any = definedExternally
    open var nonUniformScaling: Boolean = definedExternally
    open fun _updateNonUniformScalingState(value: Boolean): Boolean = definedExternally
    open fun attachToBone(bone: Bone, affectedTransformNode: TransformNode): TransformNode = definedExternally
    open fun detachFromBone(): TransformNode = definedExternally
    open fun rotate(axis: Vector3, amount: Number, space: Number? /* 0 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun rotate(axis: Vector3, amount: Number, space: Number? /* 1 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun rotate(axis: Vector3, amount: Number, space: Number? /* 2 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun rotateAround(point: Vector3, axis: Vector3, amount: Number): TransformNode = definedExternally
    open fun translate(axis: Vector3, distance: Number, space: Number? /* 0 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun translate(axis: Vector3, distance: Number, space: Number? /* 1 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun translate(axis: Vector3, distance: Number, space: Number? /* 2 */ = definedExternally /* null */): TransformNode = definedExternally
    open fun addRotation(x: Number, y: Number, z: Number): TransformNode = definedExternally
    open fun _getEffectiveParent(): Node = definedExternally
    override fun computeWorldMatrix(force: Boolean?): Matrix = definedExternally
    open fun _afterComputeWorldMatrix(): Unit = definedExternally
    open fun registerAfterWorldMatrixUpdate(func: (mesh: TransformNode) -> Unit): TransformNode = definedExternally
    open fun unregisterAfterWorldMatrixUpdate(func: (mesh: TransformNode) -> Unit): TransformNode = definedExternally
    open fun getPositionInCameraSpace(camera: Camera? = definedExternally /* null */): Vector3 = definedExternally
    open fun getDistanceToCamera(camera: Camera? = definedExternally /* null */): Number = definedExternally
    open fun clone(name: String, newParent: Node, doNotCloneChildren: Boolean? = definedExternally /* null */): TransformNode = definedExternally
    open fun serialize(currentSerializationObject: Any? = definedExternally /* null */): Any = definedExternally
    open fun getChildTransformNodes(directDescendantsOnly: Boolean? = definedExternally /* null */, predicate: ((node: Node) -> Boolean)? = definedExternally /* null */): Array<TransformNode> = definedExternally
    override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
    companion object {
        var BILLBOARDMODE_NONE: Number = definedExternally
        var BILLBOARDMODE_X: Number = definedExternally
        var BILLBOARDMODE_Y: Number = definedExternally
        var BILLBOARDMODE_Z: Number = definedExternally
        var BILLBOARDMODE_ALL: Number = definedExternally
        var _lookAtVectorCache: Any = definedExternally
        var _rotationAxisCache: Any = definedExternally
        fun Parse(parsedTransformNode: Any, scene: Scene, rootUrl: String): TransformNode = definedExternally
    }
    open fun lookAt(targetPoint: Vector3): TransformNode = definedExternally
    open fun setPivotPoint(point: Vector3): TransformNode = definedExternally
    open fun rotate(axis: Vector3, amount: Number): TransformNode = definedExternally
    open fun translate(axis: Vector3, distance: Number): TransformNode = definedExternally
}
external open class AnimationPropertiesOverride {
    open var enableBlending: Boolean = definedExternally
    open var blendingSpeed: Number = definedExternally
    open var loopMode: Number = definedExternally
}
external open class Bone(name: String, skeleton: Skeleton, parentBone: Bone? = definedExternally /* null */, localMatrix: Matrix? = definedExternally /* null */, restPose: Matrix? = definedExternally /* null */, baseMatrix: Matrix? = definedExternally /* null */, index: Number? = definedExternally /* null */) : Node {
    override var name: String = definedExternally
    open var children: Array<Bone> = definedExternally
    override var animations: Array<Animation> = definedExternally
    open var length: Number = definedExternally
    open var _index: Number = definedExternally
    open var _skeleton: Any = definedExternally
    open var _localMatrix: Any = definedExternally
    open var _restPose: Any = definedExternally
    open var _baseMatrix: Any = definedExternally
    open var _absoluteTransform: Any = definedExternally
    open var _invertedAbsoluteTransform: Any = definedExternally
    open var _parent: Any = definedExternally
    open var _scalingDeterminant: Any = definedExternally
    open var _worldTransform: Any = definedExternally
    open var _localScaling: Any = definedExternally
    open var _localRotation: Any = definedExternally
    open var _localPosition: Any = definedExternally
    open var _needToDecompose: Any = definedExternally
    open var _needToCompose: Any = definedExternally
    open var _linkedTransformNode: TransformNode = definedExternally
    open var _waitingTransformNodeId: String = definedExternally
    open var _matrix: Matrix = definedExternally
    override fun getClassName(): String = definedExternally
    open fun getSkeleton(): Skeleton = definedExternally
    open fun getParent(): Bone = definedExternally
    open fun getChildren(): Array<Bone> = definedExternally
    open fun setParent(parent: Bone, updateDifferenceMatrix: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getLocalMatrix(): Matrix = definedExternally
    open fun getBaseMatrix(): Matrix = definedExternally
    open fun getRestPose(): Matrix = definedExternally
    override fun getWorldMatrix(): Matrix = definedExternally
    open fun returnToRest(): Unit = definedExternally
    open fun getInvertedAbsoluteTransform(): Matrix = definedExternally
    open fun getAbsoluteTransform(): Matrix = definedExternally
    open fun linkTransformNode(transformNode: TransformNode): Unit = definedExternally
    open var position: Vector3 = definedExternally
    open var rotation: Vector3 = definedExternally
    open var rotationQuaternion: Quaternion = definedExternally
    open var scaling: Vector3 = definedExternally
    override var animationPropertiesOverride: AnimationPropertiesOverride = definedExternally
    open var _decompose: Any = definedExternally
    open var _compose: Any = definedExternally
    open fun updateMatrix(matrix: Matrix, updateDifferenceMatrix: Boolean? = definedExternally /* null */, updateLocalMatrix: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun _updateDifferenceMatrix(rootMatrix: Matrix? = definedExternally /* null */, updateChildren: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun markAsDirty(): Unit = definedExternally
    open var _markAsDirtyAndCompose: Any = definedExternally
    open var _markAsDirtyAndDecompose: Any = definedExternally
    open fun translate(vec: Vector3, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun translate(vec: Vector3, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun translate(vec: Vector3, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setPosition(position: Vector3, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setPosition(position: Vector3, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setPosition(position: Vector3, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setAbsolutePosition(position: Vector3, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun scale(x: Number, y: Number, z: Number, scaleChildren: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setScale(scale: Vector3): Unit = definedExternally
    open fun getScale(): Vector3 = definedExternally
    open fun getScaleToRef(result: Vector3): Unit = definedExternally
    open fun setYawPitchRoll(yaw: Number, pitch: Number, roll: Number, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setYawPitchRoll(yaw: Number, pitch: Number, roll: Number, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setYawPitchRoll(yaw: Number, pitch: Number, roll: Number, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun rotate(axis: Vector3, amount: Number, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun rotate(axis: Vector3, amount: Number, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun rotate(axis: Vector3, amount: Number, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setAxisAngle(axis: Vector3, angle: Number, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setAxisAngle(axis: Vector3, angle: Number, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setAxisAngle(axis: Vector3, angle: Number, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotation(rotation: Vector3, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotation(rotation: Vector3, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotation(rotation: Vector3, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotationQuaternion(quat: Quaternion, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotationQuaternion(quat: Quaternion, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotationQuaternion(quat: Quaternion, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotationMatrix(rotMat: Matrix, space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotationMatrix(rotMat: Matrix, space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open fun setRotationMatrix(rotMat: Matrix, space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    open var _rotateWithMatrix: Any = definedExternally
    open var _getNegativeRotationToRef: Any = definedExternally
    open fun getPosition(space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getPosition(space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getPosition(space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getPositionToRef(space: Number /* 0 */, mesh: AbstractMesh, result: Vector3): Unit = definedExternally
    open fun getPositionToRef(space: Number /* 1 */, mesh: AbstractMesh, result: Vector3): Unit = definedExternally
    open fun getPositionToRef(space: Number /* 2 */, mesh: AbstractMesh, result: Vector3): Unit = definedExternally
    open fun getAbsolutePosition(mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getAbsolutePositionToRef(mesh: AbstractMesh, result: Vector3): Unit = definedExternally
    open fun computeAbsoluteTransforms(): Unit = definedExternally
    open fun getDirection(localAxis: Vector3, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getDirectionToRef(localAxis: Vector3, mesh: AbstractMesh?, result: Vector3): Unit = definedExternally
    open fun getRotation(space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getRotation(space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getRotation(space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getRotationToRef(space: Number /* 0 */, mesh: AbstractMesh?, result: Vector3): Unit = definedExternally
    open fun getRotationToRef(space: Number /* 1 */, mesh: AbstractMesh?, result: Vector3): Unit = definedExternally
    open fun getRotationToRef(space: Number /* 2 */, mesh: AbstractMesh?, result: Vector3): Unit = definedExternally
    open fun getRotationQuaternion(space: Number? /* 0 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Quaternion = definedExternally
    open fun getRotationQuaternion(space: Number? /* 1 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Quaternion = definedExternally
    open fun getRotationQuaternion(space: Number? /* 2 */ = definedExternally /* null */, mesh: AbstractMesh? = definedExternally /* null */): Quaternion = definedExternally
    open fun getRotationQuaternionToRef(space: Number /* 0 */, mesh: AbstractMesh?, result: Quaternion): Unit = definedExternally
    open fun getRotationQuaternionToRef(space: Number /* 1 */, mesh: AbstractMesh?, result: Quaternion): Unit = definedExternally
    open fun getRotationQuaternionToRef(space: Number /* 2 */, mesh: AbstractMesh?, result: Quaternion): Unit = definedExternally
    open fun getRotationMatrix(space: Number /* 0 */, mesh: AbstractMesh): Matrix = definedExternally
    open fun getRotationMatrix(space: Number /* 1 */, mesh: AbstractMesh): Matrix = definedExternally
    open fun getRotationMatrix(space: Number /* 2 */, mesh: AbstractMesh): Matrix = definedExternally
    open fun getRotationMatrixToRef(space: Number /* 0 */, mesh: AbstractMesh, result: Matrix): Unit = definedExternally
    open fun getRotationMatrixToRef(space: Number /* 1 */, mesh: AbstractMesh, result: Matrix): Unit = definedExternally
    open fun getRotationMatrixToRef(space: Number /* 2 */, mesh: AbstractMesh, result: Matrix): Unit = definedExternally
    open fun getAbsolutePositionFromLocal(position: Vector3, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getAbsolutePositionFromLocalToRef(position: Vector3, mesh: AbstractMesh?, result: Vector3): Unit = definedExternally
    open fun getLocalPositionFromAbsolute(position: Vector3, mesh: AbstractMesh? = definedExternally /* null */): Vector3 = definedExternally
    open fun getLocalPositionFromAbsoluteToRef(position: Vector3, mesh: AbstractMesh?, result: Vector3): Unit = definedExternally
    companion object {
        var _tmpVecs: Any = definedExternally
        var _tmpQuat: Any = definedExternally
        var _tmpMats: Any = definedExternally
    }
    fun copyAnimationRange(source: Bone, rangeName: String, frameOffset: Number, rescaleAsRequired: Boolean, skelDimensionsRatio: Vector3): Boolean
    open fun translate(vec: Vector3): Unit = definedExternally
    open fun setPosition(position: Vector3): Unit = definedExternally
    open fun setYawPitchRoll(yaw: Number, pitch: Number, roll: Number): Unit = definedExternally
    open fun rotate(axis: Vector3, amount: Number): Unit = definedExternally
    open fun setAxisAngle(axis: Vector3, angle: Number): Unit = definedExternally
    open fun setRotation(rotation: Vector3): Unit = definedExternally
    open fun setRotationQuaternion(quat: Quaternion): Unit = definedExternally
    open fun setRotationMatrix(rotMat: Matrix): Unit = definedExternally
    open fun getPosition(): Vector3 = definedExternally
    open fun getRotation(): Vector3 = definedExternally
    open fun getRotationQuaternion(): Quaternion = definedExternally
}
external enum class InspectableType {
    Checkbox /* = 0 */,
    Slider /* = 1 */,
    Vector3 /* = 2 */,
    Quaternion /* = 3 */,
    Color3 /* = 4 */
}
external interface IInspectable {
    var label: String
    var propertyName: String
    var type: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ */
    var min: Number? get() = definedExternally; set(value) = definedExternally
    var max: Number? get() = definedExternally; set(value) = definedExternally
    var step: Number? get() = definedExternally; set(value) = definedExternally
}
external interface IInternalTextureLoader {
    var supportCascades: Boolean
    fun canLoad(extension: String, textureFormatInUse: String, fallback: InternalTexture, isBase64: Boolean, isBuffer: Boolean): Boolean
    fun transformUrl(rootUrl: String, textureFormatInUse: String): String
    fun getFallbackTextureUrl(rootUrl: String, textureFormatInUse: String): String
    fun loadCubeData(data: String, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)
    fun loadCubeData(data: ArrayBuffer, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)
    fun loadCubeData(data: Array<dynamic /* String | ArrayBuffer */>, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)
    fun loadData(data: ArrayBuffer, texture: InternalTexture, callback: (width: Number, height: Number, loadMipmap: Boolean, isCompressed: Boolean, done: () -> Unit, loadFailed: Boolean? /*= null*/) -> Unit)
}
external open class Engine {
    constructor(canvasOrContext: WebGLRenderingContext, antialias: Boolean? = definedExternally /* null */, options: EngineOptions? = definedExternally /* null */, adaptToDeviceRatio: Boolean? = definedExternally /* null */)
    constructor(canvasOrContext: HTMLCanvasElement, antialias: Boolean? = definedExternally /* null */, options: EngineOptions? = definedExternally /* null */, adaptToDeviceRatio: Boolean? = definedExternally /* null */)
    open var description: String = definedExternally
    open var forcePOTTextures: Boolean = definedExternally
    open var isFullscreen: Boolean = definedExternally
    open var isPointerLock: Boolean = definedExternally
    open var cullBackFaces: Boolean = definedExternally
    open var renderEvenInBackground: Boolean = definedExternally
    open var preventCacheWipeBetweenFrames: Boolean = definedExternally
    open var enableOfflineSupport: Boolean = definedExternally
    open var disableManifestCheck: Boolean = definedExternally
    open var scenes: Array<Scene> = definedExternally
    open var onNewSceneAddedObservable: Observable<Scene> = definedExternally
    open var postProcesses: Array<PostProcess> = definedExternally
    open var validateShaderPrograms: Boolean = definedExternally
    open var onResizeObservable: Observable<Engine> = definedExternally
    open var onCanvasBlurObservable: Observable<Engine> = definedExternally
    open var onCanvasFocusObservable: Observable<Engine> = definedExternally
    open var onCanvasPointerOutObservable: Observable<PointerEvent> = definedExternally
    open var onBeforeTextureInitObservable: Observable<Texture> = definedExternally
    open var disableUniformBuffers: Boolean = definedExternally
    open var _uniformBuffers: Array<UniformBuffer> = definedExternally
    open var supportsUniformBuffers: Boolean = definedExternally
    open var onBeginFrameObservable: Observable<Engine> = definedExternally
    open var customAnimationFrameRequester: ICustomAnimationFrameRequester = definedExternally
    open var onEndFrameObservable: Observable<Engine> = definedExternally
    open var onBeforeShaderCompilationObservable: Observable<Engine> = definedExternally
    open var onAfterShaderCompilationObservable: Observable<Engine> = definedExternally
    open var _gl: WebGLRenderingContext = definedExternally
    open var _renderingCanvas: Any = definedExternally
    open var _windowIsBackground: Any = definedExternally
    open var _webGLVersion: Any = definedExternally
    open var _highPrecisionShadersAllowed: Boolean = definedExternally
    open var _shouldUseHighPrecisionShader: Boolean = definedExternally
    open var needPOTTextures: Boolean = definedExternally
    open var _badOS: Boolean = definedExternally
    open var _badDesktopOS: Boolean = definedExternally
    open var _onFocus: Any = definedExternally
    open var _onBlur: Any = definedExternally
    open var _onCanvasPointerOut: Any = definedExternally
    open var _onCanvasBlur: Any = definedExternally
    open var _onCanvasFocus: Any = definedExternally
    open var _onFullscreenChange: Any = definedExternally
    open var _onPointerLockChange: Any = definedExternally
    open var _hardwareScalingLevel: Any = definedExternally
    open var _caps: EngineCapabilities = definedExternally
    open var _pointerLockRequested: Any = definedExternally
    open var _isStencilEnable: Any = definedExternally
    open var _colorWrite: Any = definedExternally
    open var _loadingScreen: Any = definedExternally
    open var _drawCalls: PerfCounter = definedExternally
    open var _glVersion: Any = definedExternally
    open var _glRenderer: Any = definedExternally
    open var _glVendor: Any = definedExternally
    open var _videoTextureSupported: Any = definedExternally
    open var _renderingQueueLaunched: Any = definedExternally
    open var _activeRenderLoops: Any = definedExternally
    open var _deterministicLockstep: Any = definedExternally
    open var _lockstepMaxSteps: Any = definedExternally
    open var onContextLostObservable: Observable<Engine> = definedExternally
    open var onContextRestoredObservable: Observable<Engine> = definedExternally
    open var _onContextLost: Any = definedExternally
    open var _onContextRestored: Any = definedExternally
    open var _contextWasLost: Any = definedExternally
    open var _doNotHandleContextLost: Boolean = definedExternally
    open var doNotHandleContextLost: Boolean = definedExternally
    open var _performanceMonitor: Any = definedExternally
    open var _fps: Any = definedExternally
    open var _deltaTime: Any = definedExternally
    open var disablePerformanceMonitorInBackground: Boolean = definedExternally
    open var performanceMonitor: PerformanceMonitor = definedExternally
    open var disableVertexArrayObjects: Boolean = definedExternally
    open var _depthCullingState: _DepthCullingState = definedExternally
    open var _stencilState: _StencilState = definedExternally
    open var _alphaState: _AlphaState = definedExternally
    open var _alphaMode: Number = definedExternally
    open var _internalTexturesCache: Array<InternalTexture> = definedExternally
    open var _activeChannel: Number = definedExternally
    open var _currentTextureChannel: Any = definedExternally
    open var _boundTexturesCache: `T$61` = definedExternally
    open var _currentEffect: Effect = definedExternally
    open var _currentProgram: WebGLProgram = definedExternally
    open var _compiledEffects: Any = definedExternally
    open var _vertexAttribArraysEnabled: Any = definedExternally
    open var _cachedViewport: Viewport = definedExternally
    open var _cachedVertexArrayObject: Any = definedExternally
    open var _cachedVertexBuffers: Any = definedExternally
    open var _cachedIndexBuffer: DataBuffer = definedExternally
    open var _cachedEffectForVertexBuffers: Effect = definedExternally
    open var _currentRenderTarget: InternalTexture = definedExternally
    open var _uintIndicesCurrentlySet: Any = definedExternally
    open var _currentBoundBuffer: Any = definedExternally
    open var _currentFramebuffer: WebGLFramebuffer = definedExternally
    open var _currentBufferPointers: Any = definedExternally
    open var _currentInstanceLocations: Any = definedExternally
    open var _currentInstanceBuffers: Any = definedExternally
    open var _textureUnits: Any = definedExternally
    open var _workingCanvas: HTMLCanvasElement = definedExternally
    open var _workingContext: CanvasRenderingContext2D = definedExternally
    open var _rescalePostProcess: Any = definedExternally
    open var _dummyFramebuffer: Any = definedExternally
    open var _externalData: Any = definedExternally
    open var _bindedRenderFunction: Any = definedExternally
    open var _vaoRecordInProgress: Any = definedExternally
    open var _mustWipeVertexAttributes: Any = definedExternally
    open var _emptyTexture: Any = definedExternally
    open var _emptyCubeTexture: Any = definedExternally
    open var _emptyTexture3D: Any = definedExternally
    open var _frameHandler: Number = definedExternally
    open var _nextFreeTextureSlots: Any = definedExternally
    open var _maxSimultaneousTextures: Any = definedExternally
    open var _activeRequests: Any = definedExternally
    open var _texturesSupported: Any = definedExternally
    open var _textureFormatInUse: String = definedExternally
    open var texturesSupported: Array<String> = definedExternally
    open var textureFormatInUse: String = definedExternally
    open var currentViewport: Viewport = definedExternally
    open var emptyTexture: InternalTexture = definedExternally
    open var emptyTexture3D: InternalTexture = definedExternally
    open var emptyCubeTexture: InternalTexture = definedExternally
    open var premultipliedAlpha: Boolean = definedExternally
    open fun initWebVR(): Observable<IDisplayChangedEventArgs> = definedExternally
    open fun _prepareVRComponent(): Unit = definedExternally
    open fun _connectVREvents(canvas: HTMLCanvasElement, document: Any): Unit = definedExternally
    open fun _submitVRFrame(): Unit = definedExternally
    open fun disableVR(): Unit = definedExternally
    open fun isVRPresenting(): Boolean = definedExternally
    open fun _requestVRFrame(): Unit = definedExternally
    open var _disableTouchAction: Any = definedExternally
    open var _rebuildInternalTextures: Any = definedExternally
    open var _rebuildEffects: Any = definedExternally
    open fun areAllEffectsReady(): Boolean = definedExternally
    open var _rebuildBuffers: Any = definedExternally
    open var _initGLContext: Any = definedExternally
    open var webGLVersion: Number = definedExternally
    open var isStencilEnable: Boolean = definedExternally
    open fun _prepareWorkingCanvas(): Unit = definedExternally
    open fun resetTextureCache(): Unit = definedExternally
    open fun isDeterministicLockStep(): Boolean = definedExternally
    open fun getLockstepMaxSteps(): Number = definedExternally
    open fun getGlInfo(): `T$62` = definedExternally
    open fun getAspectRatio(camera: Camera, useScreen: Boolean? = definedExternally /* null */): Number = definedExternally
    open fun getScreenAspectRatio(): Number = definedExternally
    open fun getRenderWidth(useScreen: Boolean? = definedExternally /* null */): Number = definedExternally
    open fun getRenderHeight(useScreen: Boolean? = definedExternally /* null */): Number = definedExternally
    open fun getRenderingCanvas(): HTMLCanvasElement = definedExternally
    open fun getRenderingCanvasClientRect(): ClientRect = definedExternally
    open fun setHardwareScalingLevel(level: Number): Unit = definedExternally
    open fun getHardwareScalingLevel(): Number = definedExternally
    open fun getLoadedTexturesCache(): Array<InternalTexture> = definedExternally
    open fun getCaps(): EngineCapabilities = definedExternally
    open fun getDepthFunction(): Number = definedExternally
    open fun setDepthFunction(depthFunc: Number): Unit = definedExternally
    open fun setDepthFunctionToGreater(): Unit = definedExternally
    open fun setDepthFunctionToGreaterOrEqual(): Unit = definedExternally
    open fun setDepthFunctionToLess(): Unit = definedExternally
    open var _cachedStencilBuffer: Any = definedExternally
    open var _cachedStencilFunction: Any = definedExternally
    open var _cachedStencilMask: Any = definedExternally
    open var _cachedStencilOperationPass: Any = definedExternally
    open var _cachedStencilOperationFail: Any = definedExternally
    open var _cachedStencilOperationDepthFail: Any = definedExternally
    open var _cachedStencilReference: Any = definedExternally
    open fun cacheStencilState(): Unit = definedExternally
    open fun restoreStencilState(): Unit = definedExternally
    open fun setDepthFunctionToLessOrEqual(): Unit = definedExternally
    open fun getStencilBuffer(): Boolean = definedExternally
    open fun setStencilBuffer(enable: Boolean): Unit = definedExternally
    open fun getStencilMask(): Number = definedExternally
    open fun setStencilMask(mask: Number): Unit = definedExternally
    open fun getStencilFunction(): Number = definedExternally
    open fun getStencilFunctionReference(): Number = definedExternally
    open fun getStencilFunctionMask(): Number = definedExternally
    open fun setStencilFunction(stencilFunc: Number): Unit = definedExternally
    open fun setStencilFunctionReference(reference: Number): Unit = definedExternally
    open fun setStencilFunctionMask(mask: Number): Unit = definedExternally
    open fun getStencilOperationFail(): Number = definedExternally
    open fun getStencilOperationDepthFail(): Number = definedExternally
    open fun getStencilOperationPass(): Number = definedExternally
    open fun setStencilOperationFail(operation: Number): Unit = definedExternally
    open fun setStencilOperationDepthFail(operation: Number): Unit = definedExternally
    open fun setStencilOperationPass(operation: Number): Unit = definedExternally
    open fun setDitheringState(value: Boolean): Unit = definedExternally
    open fun setRasterizerState(value: Boolean): Unit = definedExternally
    open fun stopRenderLoop(renderFunction: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun _renderLoop(): Unit = definedExternally
    open fun runRenderLoop(renderFunction: () -> Unit): Unit = definedExternally
    open fun switchFullscreen(requestPointerLock: Boolean): Unit = definedExternally
    open fun enterFullscreen(requestPointerLock: Boolean): Unit = definedExternally
    open fun exitFullscreen(): Unit = definedExternally
    open fun clear(color: Color4, backBuffer: Boolean, depth: Boolean, stencil: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun scissorClear(x: Number, y: Number, width: Number, height: Number, clearColor: Color4): Unit = definedExternally
    open fun enableScissor(x: Number, y: Number, width: Number, height: Number): Unit = definedExternally
    open fun disableScissor(): Unit = definedExternally
    open var _viewportCached: Any = definedExternally
    open fun _viewport(x: Number, y: Number, width: Number, height: Number): Unit = definedExternally
    open fun setViewport(viewport: Viewport, requiredWidth: Number? = definedExternally /* null */, requiredHeight: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setDirectViewport(x: Number, y: Number, width: Number, height: Number): Viewport = definedExternally
    open fun beginFrame(): Unit = definedExternally
    open fun endFrame(): Unit = definedExternally
    open fun resize(): Unit = definedExternally
    open fun setSize(width: Number, height: Number): Unit = definedExternally
    open fun bindFramebuffer(texture: InternalTexture, faceIndex: Number? = definedExternally /* null */, requiredWidth: Number? = definedExternally /* null */, requiredHeight: Number? = definedExternally /* null */, forceFullscreenViewport: Boolean? = definedExternally /* null */, depthStencilTexture: InternalTexture? = definedExternally /* null */, lodLevel: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _bindUnboundFramebuffer(framebuffer: WebGLFramebuffer): Unit = definedExternally
    open fun unBindFramebuffer(texture: InternalTexture, disableGenerateMipMaps: Boolean? = definedExternally /* null */, onBeforeUnbind: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun generateMipMapsForCubemap(texture: InternalTexture): Unit = definedExternally
    open fun flushFramebuffer(): Unit = definedExternally
    open fun restoreDefaultFramebuffer(): Unit = definedExternally
    open fun createUniformBuffer(elements: Array<Number>): DataBuffer = definedExternally
    open fun createUniformBuffer(elements: Float32Array): DataBuffer = definedExternally
    open fun createDynamicUniformBuffer(elements: Array<Number>): DataBuffer = definedExternally
    open fun createDynamicUniformBuffer(elements: Float32Array): DataBuffer = definedExternally
    open fun updateUniformBuffer(uniformBuffer: DataBuffer, elements: Array<Number>, offset: Number? = definedExternally /* null */, count: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateUniformBuffer(uniformBuffer: DataBuffer, elements: Float32Array, offset: Number? = definedExternally /* null */, count: Number? = definedExternally /* null */): Unit = definedExternally
    open var _resetVertexBufferBinding: Any = definedExternally
    open fun createVertexBuffer(data: Array<Number>): DataBuffer = definedExternally
    open fun createVertexBuffer(data: ArrayBuffer): DataBuffer = definedExternally
    open fun createVertexBuffer(data: ArrayBufferView): DataBuffer = definedExternally
    open fun createDynamicVertexBuffer(data: Array<Number>): DataBuffer = definedExternally
    open fun createDynamicVertexBuffer(data: ArrayBuffer): DataBuffer = definedExternally
    open fun createDynamicVertexBuffer(data: ArrayBufferView): DataBuffer = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: Array<Number>, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: Int32Array, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: Uint32Array, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: Uint16Array, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: Array<Number>, byteOffset: Number? = definedExternally /* null */, byteLength: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: ArrayBuffer, byteOffset: Number? = definedExternally /* null */, byteLength: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: ArrayBufferView, byteOffset: Number? = definedExternally /* null */, byteLength: Number? = definedExternally /* null */): Unit = definedExternally
    open var _resetIndexBufferBinding: Any = definedExternally
    open fun createIndexBuffer(indices: Array<Number>, updatable: Boolean? = definedExternally /* null */): DataBuffer = definedExternally
    open fun createIndexBuffer(indices: Int32Array, updatable: Boolean? = definedExternally /* null */): DataBuffer = definedExternally
    open fun createIndexBuffer(indices: Uint32Array, updatable: Boolean? = definedExternally /* null */): DataBuffer = definedExternally
    open fun createIndexBuffer(indices: Uint16Array, updatable: Boolean? = definedExternally /* null */): DataBuffer = definedExternally
    open fun bindArrayBuffer(buffer: DataBuffer): Unit = definedExternally
    open fun bindUniformBuffer(buffer: DataBuffer): Unit = definedExternally
    open fun bindUniformBufferBase(buffer: DataBuffer, location: Number): Unit = definedExternally
    open fun bindUniformBlock(pipelineContext: IPipelineContext, blockName: String, index: Number): Unit = definedExternally
    open var bindIndexBuffer: Any = definedExternally
    open var bindBuffer: Any = definedExternally
    open fun updateArrayBuffer(data: Float32Array): Unit = definedExternally
    open var _vertexAttribPointer: Any = definedExternally
    open var _bindIndexBufferWithCache: Any = definedExternally
    open var _bindVertexBuffersAttributes: Any = definedExternally
    open fun recordVertexArrayObject(vertexBuffers: `T$63`, indexBuffer: DataBuffer, effect: Effect): WebGLVertexArrayObject = definedExternally
    open fun bindVertexArrayObject(vertexArrayObject: WebGLVertexArrayObject, indexBuffer: DataBuffer): Unit = definedExternally
    open fun bindBuffersDirectly(vertexBuffer: DataBuffer, indexBuffer: DataBuffer, vertexDeclaration: Array<Number>, vertexStrideSize: Number, effect: Effect): Unit = definedExternally
    open var _unbindVertexArrayObject: Any = definedExternally
    open fun bindBuffers(vertexBuffers: `T$63`, indexBuffer: DataBuffer, effect: Effect): Unit = definedExternally
    open fun unbindInstanceAttributes(): Unit = definedExternally
    open fun releaseVertexArrayObject(vao: WebGLVertexArrayObject): Unit = definedExternally
    open fun _releaseBuffer(buffer: DataBuffer): Boolean = definedExternally
    open fun createInstancesBuffer(capacity: Number): DataBuffer = definedExternally
    open fun deleteInstancesBuffer(buffer: WebGLBuffer): Unit = definedExternally
    open fun updateAndBindInstancesBuffer(instancesBuffer: DataBuffer, data: Float32Array, offsetLocations: Array<Number>): Unit = definedExternally
    open fun updateAndBindInstancesBuffer(instancesBuffer: DataBuffer, data: Float32Array, offsetLocations: Array<InstancingAttributeInfo>): Unit = definedExternally
    open fun applyStates(): Unit = definedExternally
    open fun draw(useTriangles: Boolean, indexStart: Number, indexCount: Number, instancesCount: Number? = definedExternally /* null */): Unit = definedExternally
    open fun drawPointClouds(verticesStart: Number, verticesCount: Number, instancesCount: Number? = definedExternally /* null */): Unit = definedExternally
    open fun drawUnIndexed(useTriangles: Boolean, verticesStart: Number, verticesCount: Number, instancesCount: Number? = definedExternally /* null */): Unit = definedExternally
    open fun drawElementsType(fillMode: Number, indexStart: Number, indexCount: Number, instancesCount: Number? = definedExternally /* null */): Unit = definedExternally
    open fun drawArraysType(fillMode: Number, verticesStart: Number, verticesCount: Number, instancesCount: Number? = definedExternally /* null */): Unit = definedExternally
    open var _drawMode: Any = definedExternally
    open fun _releaseEffect(effect: Effect): Unit = definedExternally
    open fun _deletePipelineContext(pipelineContext: IPipelineContext): Unit = definedExternally
    open fun createEffect(baseName: Any, attributesNamesOrOptions: Array<String>, uniformsNamesOrEngine: Array<String>, samplers: Array<String>? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */): Effect = definedExternally
    open fun createEffect(baseName: Any, attributesNamesOrOptions: Array<String>, uniformsNamesOrEngine: Engine, samplers: Array<String>? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */): Effect = definedExternally
    open fun createEffect(baseName: Any, attributesNamesOrOptions: EffectCreationOptions, uniformsNamesOrEngine: Array<String>, samplers: Array<String>? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */): Effect = definedExternally
    open fun createEffect(baseName: Any, attributesNamesOrOptions: EffectCreationOptions, uniformsNamesOrEngine: Engine, samplers: Array<String>? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */): Effect = definedExternally
    open var _compileShader: Any = definedExternally
    open var _compileRawShader: Any = definedExternally
    open fun createRawShaderProgram(pipelineContext: IPipelineContext, vertexCode: String, fragmentCode: String, context: WebGLRenderingContext? = definedExternally /* null */, transformFeedbackVaryings: Array<String>? = definedExternally /* null */): WebGLProgram = definedExternally
    open fun createShaderProgram(pipelineContext: IPipelineContext, vertexCode: String, fragmentCode: String, defines: String, context: WebGLRenderingContext? = definedExternally /* null */, transformFeedbackVaryings: Array<String>? = definedExternally /* null */): WebGLProgram = definedExternally
    open fun createPipelineContext(): WebGLPipelineContext = definedExternally
    open var _createShaderProgram: Any = definedExternally
    open var _finalizePipelineContext: Any = definedExternally
    open fun _preparePipelineContext(pipelineContext: IPipelineContext, vertexSourceCode: String, fragmentSourceCode: String, createAsRaw: Boolean, rebuildRebind: Any, defines: String, transformFeedbackVaryings: Array<String>): Unit = definedExternally
    open fun _isRenderingStateCompiled(pipelineContext: IPipelineContext): Boolean = definedExternally
    open fun _executeWhenRenderingStateIsCompiled(pipelineContext: IPipelineContext, action: () -> Unit): Unit = definedExternally
    open fun getUniforms(pipelineContext: IPipelineContext, uniformsNames: Array<String>): Array<WebGLUniformLocation> = definedExternally
    open fun getAttributes(pipelineContext: IPipelineContext, attributesNames: Array<String>): Array<Number> = definedExternally
    open fun enableEffect(effect: Effect): Unit = definedExternally
    open fun setIntArray(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    open fun setIntArray2(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    open fun setIntArray3(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    open fun setIntArray4(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    open fun setFloatArray(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    open fun setFloatArray2(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    open fun setFloatArray3(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    open fun setFloatArray4(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    open fun setArray(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    open fun setArray2(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    open fun setArray3(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    open fun setArray4(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    open fun setMatrices(uniform: WebGLUniformLocation, matrices: Float32Array): Unit = definedExternally
    open fun setMatrix(uniform: WebGLUniformLocation, matrix: Matrix): Unit = definedExternally
    open fun setMatrix3x3(uniform: WebGLUniformLocation, matrix: Float32Array): Unit = definedExternally
    open fun setMatrix2x2(uniform: WebGLUniformLocation, matrix: Float32Array): Unit = definedExternally
    open fun setInt(uniform: WebGLUniformLocation, value: Number): Unit = definedExternally
    open fun setFloat(uniform: WebGLUniformLocation, value: Number): Unit = definedExternally
    open fun setFloat2(uniform: WebGLUniformLocation, x: Number, y: Number): Unit = definedExternally
    open fun setFloat3(uniform: WebGLUniformLocation, x: Number, y: Number, z: Number): Unit = definedExternally
    open fun setBool(uniform: WebGLUniformLocation, bool: Number): Unit = definedExternally
    open fun setFloat4(uniform: WebGLUniformLocation, x: Number, y: Number, z: Number, w: Number): Unit = definedExternally
    open fun setColor3(uniform: WebGLUniformLocation, color3: Color3): Unit = definedExternally
    open fun setColor4(uniform: WebGLUniformLocation, color3: Color3, alpha: Number): Unit = definedExternally
    open fun setDirectColor4(uniform: WebGLUniformLocation, color4: Color4): Unit = definedExternally
    open fun setState(culling: Boolean, zOffset: Number? = definedExternally /* null */, force: Boolean? = definedExternally /* null */, reverseSide: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setZOffset(value: Number): Unit = definedExternally
    open fun getZOffset(): Number = definedExternally
    open fun setDepthBuffer(enable: Boolean): Unit = definedExternally
    open fun getDepthWrite(): Boolean = definedExternally
    open fun setDepthWrite(enable: Boolean): Unit = definedExternally
    open fun setColorWrite(enable: Boolean): Unit = definedExternally
    open fun getColorWrite(): Boolean = definedExternally
    open fun setAlphaConstants(r: Number, g: Number, b: Number, a: Number): Unit = definedExternally
    open fun setAlphaMode(mode: Number, noDepthWriteChange: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getAlphaMode(): Number = definedExternally
    open fun clearInternalTexturesCache(): Unit = definedExternally
    open fun wipeCaches(bruteForce: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setTextureFormatToUse(formatsAvailable: Array<String>): String = definedExternally
    open fun _getSamplingParameters(samplingMode: Number, generateMipMaps: Boolean): `T$64` = definedExternally
    open fun _createTexture(): WebGLTexture = definedExternally
    open fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String, exception: Any) -> Unit)? = definedExternally /* null */, buffer: String? = definedExternally /* null */, fallback: InternalTexture? = definedExternally /* null */, format: Number? = definedExternally /* null */, forcedExtension: String? = definedExternally /* null */, excludeLoaders: Array<IInternalTextureLoader>? = definedExternally /* null */): InternalTexture = definedExternally
    open fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String, exception: Any) -> Unit)? = definedExternally /* null */, buffer: HTMLImageElement? = definedExternally /* null */, fallback: InternalTexture? = definedExternally /* null */, format: Number? = definedExternally /* null */, forcedExtension: String? = definedExternally /* null */, excludeLoaders: Array<IInternalTextureLoader>? = definedExternally /* null */): InternalTexture = definedExternally
    open fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String, exception: Any) -> Unit)? = definedExternally /* null */, buffer: Blob? = definedExternally /* null */, fallback: InternalTexture? = definedExternally /* null */, format: Number? = definedExternally /* null */, forcedExtension: String? = definedExternally /* null */, excludeLoaders: Array<IInternalTextureLoader>? = definedExternally /* null */): InternalTexture = definedExternally
    open fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String, exception: Any) -> Unit)? = definedExternally /* null */, buffer: ArrayBuffer? = definedExternally /* null */, fallback: InternalTexture? = definedExternally /* null */, format: Number? = definedExternally /* null */, forcedExtension: String? = definedExternally /* null */, excludeLoaders: Array<IInternalTextureLoader>? = definedExternally /* null */): InternalTexture = definedExternally
    open var _rescaleTexture: Any = definedExternally
    open var _unpackFlipYCached: Any = definedExternally
    open var enableUnpackFlipYCached: Boolean = definedExternally
    open fun _unpackFlipY(value: Boolean): Unit = definedExternally
    open fun _getUnpackAlignement(): Number = definedExternally
    open fun createDynamicTexture(width: Number, height: Number, generateMipMaps: Boolean, samplingMode: Number): InternalTexture = definedExternally
    open fun updateTextureSamplingMode(samplingMode: Number, texture: InternalTexture): Unit = definedExternally
    open fun updateDynamicTexture(texture: InternalTexture, canvas: HTMLCanvasElement, invertY: Boolean, premulAlpha: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */, forceBindTexture: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateVideoTexture(texture: InternalTexture, video: HTMLVideoElement, invertY: Boolean): Unit = definedExternally
    open fun updateTextureComparisonFunction(texture: InternalTexture, comparisonFunction: Number): Unit = definedExternally
    open fun _setupDepthStencilTexture(internalTexture: InternalTexture, size: Number, generateStencil: Boolean, bilinearFiltering: Boolean, comparisonFunction: Number): Unit = definedExternally
    open fun _setupDepthStencilTexture(internalTexture: InternalTexture, size: `T$65`, generateStencil: Boolean, bilinearFiltering: Boolean, comparisonFunction: Number): Unit = definedExternally
    open fun createDepthStencilTexture(size: Number, options: DepthTextureCreationOptions): InternalTexture = definedExternally
    open fun createDepthStencilTexture(size: `T$65`, options: DepthTextureCreationOptions): InternalTexture = definedExternally
    open var _createDepthStencilTexture: Any = definedExternally
    open fun setFrameBufferDepthStencilTexture(renderTarget: RenderTargetTexture): Unit = definedExternally
    open fun createRenderTargetTexture(size: Number, options: Boolean): InternalTexture = definedExternally
    open fun createRenderTargetTexture(size: Number, options: RenderTargetCreationOptions): InternalTexture = definedExternally
    open fun createRenderTargetTexture(size: `T$65`, options: Boolean): InternalTexture = definedExternally
    open fun createRenderTargetTexture(size: `T$65`, options: RenderTargetCreationOptions): InternalTexture = definedExternally
    open fun _setupFramebufferDepthAttachments(generateStencilBuffer: Boolean, generateDepthBuffer: Boolean, width: Number, height: Number, samples: Number? = definedExternally /* null */): WebGLRenderbuffer = definedExternally
    open fun updateRenderTargetTextureSampleCount(texture: InternalTexture, samples: Number): Number = definedExternally
    open fun _uploadCompressedDataToTextureDirectly(texture: InternalTexture, internalFormat: Number, width: Number, height: Number, data: ArrayBufferView, faceIndex: Number? = definedExternally /* null */, lod: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _uploadDataToTextureDirectly(texture: InternalTexture, imageData: ArrayBufferView, faceIndex: Number? = definedExternally /* null */, lod: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _uploadArrayBufferViewToTexture(texture: InternalTexture, imageData: ArrayBufferView, faceIndex: Number? = definedExternally /* null */, lod: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement, faceIndex: Number? = definedExternally /* null */, lod: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _setCubeMapTextureParams(loadMipmap: Boolean): Unit = definedExternally
    open var _prepareWebGLTextureContinuation: Any = definedExternally
    open var _prepareWebGLTexture: Any = definedExternally
    open fun _convertRGBtoRGBATextureData(rgbData: Any, width: Number, height: Number, textureType: Number): ArrayBufferView = definedExternally
    open fun _releaseFramebufferObjects(texture: InternalTexture): Unit = definedExternally
    open fun _releaseTexture(texture: InternalTexture): Unit = definedExternally
    open var setProgram: Any = definedExternally
    open var _boundUniforms: Any = definedExternally
    open fun bindSamplers(effect: Effect): Unit = definedExternally
    open var _activateCurrentTexture: Any = definedExternally
    open fun _bindTextureDirectly(target: Number, texture: InternalTexture, forTextureDataUpdate: Boolean? = definedExternally /* null */, force: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun _bindTexture(channel: Number, texture: InternalTexture): Unit = definedExternally
    open fun setTextureFromPostProcess(channel: Number, postProcess: PostProcess): Unit = definedExternally
    open fun setTextureFromPostProcessOutput(channel: Number, postProcess: PostProcess): Unit = definedExternally
    open fun unbindAllTextures(): Unit = definedExternally
    open fun setTexture(channel: Number, uniform: WebGLUniformLocation, texture: BaseTexture): Unit = definedExternally
    open fun setDepthStencilTexture(channel: Number, uniform: WebGLUniformLocation, texture: RenderTargetTexture): Unit = definedExternally
    open var _bindSamplerUniformToChannel: Any = definedExternally
    open var _getTextureWrapMode: Any = definedExternally
    open var _setTexture: Any = definedExternally
    open fun setTextureArray(channel: Number, uniform: WebGLUniformLocation, textures: Array<BaseTexture>): Unit = definedExternally
    open fun _setAnisotropicLevel(target: Number, texture: BaseTexture): Unit = definedExternally
    open var _setTextureParameterFloat: Any = definedExternally
    open var _setTextureParameterInteger: Any = definedExternally
    open fun readPixels(x: Number, y: Number, width: Number, height: Number): Uint8Array = definedExternally
    open fun <T> addExternalData(key: String, data: T): Boolean = definedExternally
    open fun <T> getExternalData(key: String): T = definedExternally
    open fun <T> getOrAddExternalDataWithFactory(key: String, factory: (k: String) -> T): T = definedExternally
    open fun removeExternalData(key: String): Boolean = definedExternally
    open fun unbindAllAttributes(): Unit = definedExternally
    open fun releaseEffects(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun displayLoadingUI(): Unit = definedExternally
    open fun hideLoadingUI(): Unit = definedExternally
    open var loadingScreen: ILoadingScreen = definedExternally
    open var loadingUIText: String = definedExternally
    open var loadingUIBackgroundColor: String = definedExternally
    open fun attachContextLostEvent(callback: (event: WebGLContextEvent) -> Unit): Unit = definedExternally
    open fun attachContextRestoredEvent(callback: (event: WebGLContextEvent) -> Unit): Unit = definedExternally
    open fun getVertexShaderSource(program: WebGLProgram): String = definedExternally
    open fun getFragmentShaderSource(program: WebGLProgram): String = definedExternally
    open fun getError(): Number = definedExternally
    open fun getFps(): Number = definedExternally
    open fun getDeltaTime(): Number = definedExternally
    open var _measureFps: Any = definedExternally
    open fun _readTexturePixels(texture: InternalTexture, width: Number, height: Number, faceIndex: Number? = definedExternally /* null */, level: Number? = definedExternally /* null */, buffer: ArrayBufferView? = definedExternally /* null */): ArrayBufferView = definedExternally
    open var _canRenderToFloatFramebuffer: Any = definedExternally
    open var _canRenderToHalfFloatFramebuffer: Any = definedExternally
    open var _canRenderToFramebuffer: Any = definedExternally
    open fun _getWebGLTextureType(type: Number): Number = definedExternally
    open fun _getInternalFormat(format: Number): Number = definedExternally
    open fun _getRGBABufferInternalSizedFormat(type: Number, format: Number? = definedExternally /* null */): Number = definedExternally
    open fun _getRGBAMultiSampleBufferFormat(type: Number): Number = definedExternally
    open fun _loadFile(url: String, onSuccess: (data: dynamic /* String | ArrayBuffer */, responseURL: String? /*= null*/) -> Unit, onProgress: ((data: Any) -> Unit)? = definedExternally /* null */, offlineProvider: IOfflineProvider? = definedExternally /* null */, useArrayBuffer: Boolean? = definedExternally /* null */, onError: ((request: WebRequest? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */): IFileRequest = definedExternally
    open fun _loadFileAsync(url: String, offlineProvider: IOfflineProvider? = definedExternally /* null */, useArrayBuffer: Boolean? = definedExternally /* null */): Promise<dynamic /* String | ArrayBuffer */> = definedExternally
    companion object {
        var ExceptionList: Array<dynamic /* `T$59` | `T$60` */> = definedExternally
        var Instances: Array<Engine> = definedExternally
        var LastCreatedEngine: Engine = definedExternally
        var LastCreatedScene: Scene = definedExternally
        fun MarkAllMaterialsAsDirty(flag: Number, predicate: ((mat: Material) -> Boolean)? = definedExternally /* null */): Unit = definedExternally
        var _TextureLoaders: Array<IInternalTextureLoader> = definedExternally
        var ALPHA_DISABLE: Number = definedExternally
        var ALPHA_ADD: Number = definedExternally
        var ALPHA_COMBINE: Number = definedExternally
        var ALPHA_SUBTRACT: Number = definedExternally
        var ALPHA_MULTIPLY: Number = definedExternally
        var ALPHA_MAXIMIZED: Number = definedExternally
        var ALPHA_ONEONE: Number = definedExternally
        var ALPHA_PREMULTIPLIED: Number = definedExternally
        var ALPHA_PREMULTIPLIED_PORTERDUFF: Number = definedExternally
        var ALPHA_INTERPOLATE: Number = definedExternally
        var ALPHA_SCREENMODE: Number = definedExternally
        var DELAYLOADSTATE_NONE: Number = definedExternally
        var DELAYLOADSTATE_LOADED: Number = definedExternally
        var DELAYLOADSTATE_LOADING: Number = definedExternally
        var DELAYLOADSTATE_NOTLOADED: Number = definedExternally
        var NEVER: Number = definedExternally
        var ALWAYS: Number = definedExternally
        var LESS: Number = definedExternally
        var EQUAL: Number = definedExternally
        var LEQUAL: Number = definedExternally
        var GREATER: Number = definedExternally
        var GEQUAL: Number = definedExternally
        var NOTEQUAL: Number = definedExternally
        var KEEP: Number = definedExternally
        var REPLACE: Number = definedExternally
        var INCR: Number = definedExternally
        var DECR: Number = definedExternally
        var INVERT: Number = definedExternally
        var INCR_WRAP: Number = definedExternally
        var DECR_WRAP: Number = definedExternally
        var TEXTURE_CLAMP_ADDRESSMODE: Number = definedExternally
        var TEXTURE_WRAP_ADDRESSMODE: Number = definedExternally
        var TEXTURE_MIRROR_ADDRESSMODE: Number = definedExternally
        var TEXTUREFORMAT_ALPHA: Number = definedExternally
        var TEXTUREFORMAT_LUMINANCE: Number = definedExternally
        var TEXTUREFORMAT_LUMINANCE_ALPHA: Number = definedExternally
        var TEXTUREFORMAT_RGB: Number = definedExternally
        var TEXTUREFORMAT_RGBA: Number = definedExternally
        var TEXTUREFORMAT_RED: Number = definedExternally
        var TEXTUREFORMAT_R: Number = definedExternally
        var TEXTUREFORMAT_RG: Number = definedExternally
        var TEXTUREFORMAT_RED_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_R_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_RG_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_RGB_INTEGER: Number = definedExternally
        var TEXTUREFORMAT_RGBA_INTEGER: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_BYTE: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT: Number = definedExternally
        var TEXTURETYPE_FLOAT: Number = definedExternally
        var TEXTURETYPE_HALF_FLOAT: Number = definedExternally
        var TEXTURETYPE_BYTE: Number = definedExternally
        var TEXTURETYPE_SHORT: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT: Number = definedExternally
        var TEXTURETYPE_INT: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INTEGER: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_SHORT_5_6_5: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_24_8: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV: Number = definedExternally
        var TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV: Number = definedExternally
        var TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV: Number = definedExternally
        var TEXTURE_NEAREST_SAMPLINGMODE: Number = definedExternally
        var TEXTURE_BILINEAR_SAMPLINGMODE: Number = definedExternally
        var TEXTURE_TRILINEAR_SAMPLINGMODE: Number = definedExternally
        var TEXTURE_NEAREST_NEAREST_MIPLINEAR: Number = definedExternally
        var TEXTURE_LINEAR_LINEAR_MIPNEAREST: Number = definedExternally
        var TEXTURE_LINEAR_LINEAR_MIPLINEAR: Number = definedExternally
        var TEXTURE_NEAREST_NEAREST_MIPNEAREST: Number = definedExternally
        var TEXTURE_NEAREST_LINEAR_MIPNEAREST: Number = definedExternally
        var TEXTURE_NEAREST_LINEAR_MIPLINEAR: Number = definedExternally
        var TEXTURE_NEAREST_LINEAR: Number = definedExternally
        var TEXTURE_NEAREST_NEAREST: Number = definedExternally
        var TEXTURE_LINEAR_NEAREST_MIPNEAREST: Number = definedExternally
        var TEXTURE_LINEAR_NEAREST_MIPLINEAR: Number = definedExternally
        var TEXTURE_LINEAR_LINEAR: Number = definedExternally
        var TEXTURE_LINEAR_NEAREST: Number = definedExternally
        var TEXTURE_EXPLICIT_MODE: Number = definedExternally
        var TEXTURE_SPHERICAL_MODE: Number = definedExternally
        var TEXTURE_PLANAR_MODE: Number = definedExternally
        var TEXTURE_CUBIC_MODE: Number = definedExternally
        var TEXTURE_PROJECTION_MODE: Number = definedExternally
        var TEXTURE_SKYBOX_MODE: Number = definedExternally
        var TEXTURE_INVCUBIC_MODE: Number = definedExternally
        var TEXTURE_EQUIRECTANGULAR_MODE: Number = definedExternally
        var TEXTURE_FIXED_EQUIRECTANGULAR_MODE: Number = definedExternally
        var TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE: Number = definedExternally
        var SCALEMODE_FLOOR: Number = definedExternally
        var SCALEMODE_NEAREST: Number = definedExternally
        var SCALEMODE_CEILING: Number = definedExternally
        var NpmPackage: String = definedExternally
        var Version: String = definedExternally
        var CollisionsEpsilon: Number = definedExternally
        var ShadersRepository: String = definedExternally
        fun DefaultLoadingScreenFactory(canvas: HTMLCanvasElement): ILoadingScreen = definedExternally
        var _RescalePostProcessFactory: (engine: Engine) -> PostProcess = definedExternally
        var audioEngine: IAudioEngine = definedExternally
        var AudioEngineFactory: (hostElement: HTMLElement) -> IAudioEngine = definedExternally
        var OfflineProviderFactory: (urlToScene: String, callbackManifestChecked: (checked: Boolean) -> Any, disableManifestCheck: Boolean) -> IOfflineProvider = definedExternally
        fun isSupported(): Boolean = definedExternally
    }
    fun _createDepthStencilCubeTexture(size: Number, options: DepthTextureCreationOptions): InternalTexture
    fun createCubeTexture(rootUrl: String, scene: Scene, files: Array<String>, noMipmap: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit, format: Number?, forcedExtension: Any, createPolynomials: Boolean, lodScale: Number, lodOffset: Number, fallback: InternalTexture, excludeLoaders: Array<IInternalTextureLoader>): InternalTexture
    fun createCubeTexture(rootUrl: String, scene: Scene, files: Array<String>, noMipmap: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit, format: Number?, forcedExtension: Any): InternalTexture
    fun createCubeTexture(rootUrl: String, scene: Scene, files: Array<String>, noMipmap: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit, format: Number?, forcedExtension: Any, createPolynomials: Boolean, lodScale: Number, lodOffset: Number): InternalTexture
    fun _partialLoadFile(url: String, index: Number, loadedFiles: Array<dynamic /* String | ArrayBuffer */>, onfinish: (files: Array<dynamic /* String | ArrayBuffer */>) -> Unit, onErrorCallBack: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)
    fun _cascadeLoadFiles(scene: Scene, onfinish: (images: Array<dynamic /* String | ArrayBuffer */>) -> Unit, files: Array<String>, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)
    fun _cascadeLoadImgs(scene: Scene, onfinish: (images: Array<HTMLImageElement>) -> Unit, files: Array<String>, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)
    fun _partialLoadImg(url: String, index: Number, loadedImages: Array<HTMLImageElement>, scene: Scene, onfinish: (images: Array<HTMLImageElement>) -> Unit, onErrorCallBack: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)
    fun createMultiviewRenderTargetTexture(width: Number, height: Number): InternalTexture
    fun bindMultiviewFramebuffer(multiviewTexture: InternalTexture)
    var _vrDisplay: Any
    var _vrSupported: Boolean
    var _oldSize: Size
    var _oldHardwareScaleFactor: Number
    var _vrExclusivePointerMode: Boolean
    var _webVRInitPromise: Promise<IDisplayChangedEventArgs>
    var _onVRDisplayPointerRestricted: () -> Unit
    var _onVRDisplayPointerUnrestricted: () -> Unit
    var _onVrDisplayConnect: (display: Any) -> Unit
    var _onVrDisplayDisconnect: () -> Unit
    var _onVrDisplayPresentChange: () -> Unit
    var onVRDisplayChangedObservable: Observable<IDisplayChangedEventArgs>
    var onVRRequestPresentComplete: Observable<Boolean>
    var onVRRequestPresentStart: Observable<Engine>
    var isInVRExclusivePointerMode: Boolean
    fun isVRDevicePresent(): Boolean
    fun getVRDevice(): Any
    fun initWebVRAsync(): Promise<IDisplayChangedEventArgs>
    fun _getVRDisplaysAsync(): Promise<IDisplayChangedEventArgs>
    fun enableVR()
    fun _onVRFullScreenTriggered()
    fun createRenderTargetCubeTexture(size: Number, options: Any? = definedExternally /* null */): InternalTexture
    fun createRawTexture(data: ArrayBufferView, width: Number, height: Number, format: Number, generateMipMaps: Boolean, invertY: Boolean, samplingMode: Number, compression: String, type: Number): InternalTexture
    fun updateRawTexture(texture: InternalTexture, data: ArrayBufferView, format: Number, invertY: Boolean)
    fun updateRawTexture(texture: InternalTexture, data: ArrayBufferView, format: Number, invertY: Boolean, compression: String, type: Number)
    fun createRawCubeTexture(data: Array<ArrayBufferView>, size: Number, format: Number, type: Number, generateMipMaps: Boolean, invertY: Boolean, samplingMode: Number, compression: String): InternalTexture
    fun updateRawCubeTexture(texture: InternalTexture, data: Array<ArrayBufferView>, format: Number, type: Number, invertY: Boolean)
    fun updateRawCubeTexture(texture: InternalTexture, data: Array<ArrayBufferView>, format: Number, type: Number, invertY: Boolean, compression: String)
    fun updateRawCubeTexture(texture: InternalTexture, data: Array<ArrayBufferView>, format: Number, type: Number, invertY: Boolean, compression: String, level: Number)
    fun createRawCubeTextureFromUrl(url: String, scene: Scene, size: Number, format: Number, type: Number, noMipmap: Boolean, callback: (ArrayBuffer: ArrayBuffer) -> Array<ArrayBufferView>, mipmapGenerator: (faces: Array<ArrayBufferView>) -> Array<Array<ArrayBufferView>>, onLoad: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): InternalTexture
    fun createRawCubeTextureFromUrl(url: String, scene: Scene, size: Number, format: Number, type: Number, noMipmap: Boolean, callback: (ArrayBuffer: ArrayBuffer) -> Array<ArrayBufferView>, mipmapGenerator: (faces: Array<ArrayBufferView>) -> Array<Array<ArrayBufferView>>, onLoad: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit, samplingMode: Number, invertY: Boolean): InternalTexture
    fun createRawTexture3D(data: ArrayBufferView, width: Number, height: Number, depth: Number, format: Number, generateMipMaps: Boolean, invertY: Boolean, samplingMode: Number, compression: String, textureType: Number): InternalTexture
    fun updateRawTexture3D(texture: InternalTexture, data: ArrayBufferView, format: Number, invertY: Boolean)
    fun updateRawTexture3D(texture: InternalTexture, data: ArrayBufferView, format: Number, invertY: Boolean, compression: String, textureType: Number)
    fun createQuery(): WebGLQuery
    fun deleteQuery(query: WebGLQuery): Engine
    fun isQueryResultAvailable(query: WebGLQuery): Boolean
    fun getQueryResult(query: WebGLQuery): Number
    fun beginOcclusionQuery(algorithmType: Number, query: WebGLQuery): Engine
    fun endOcclusionQuery(algorithmType: Number): Engine
    fun startTimeQuery(): _TimeToken
    fun endTimeQuery(token: _TimeToken): Number
    var _currentNonTimestampToken: _TimeToken
    fun _createTimeQuery(): WebGLQuery
    fun _deleteTimeQuery(query: WebGLQuery)
    fun _getGlAlgorithmType(algorithmType: Number): Number
    fun _getTimeQueryResult(query: WebGLQuery): Any
    fun _getTimeQueryAvailability(query: WebGLQuery): Any
    fun createTransformFeedback(): WebGLTransformFeedback
    fun deleteTransformFeedback(value: WebGLTransformFeedback)
    fun bindTransformFeedback(value: WebGLTransformFeedback)
    fun beginTransformFeedback(usePoints: Boolean)
    fun endTransformFeedback()
    fun setTranformFeedbackVaryings(program: WebGLProgram, value: Array<String>)
    fun bindTransformFeedbackBuffer(value: DataBuffer)
    fun unBindMultiColorAttachmentFramebuffer(textures: Array<InternalTexture>, disableGenerateMipMaps: Boolean, onBeforeUnbind: (() -> Unit)? = definedExternally /* null */)
    fun createMultipleRenderTarget(size: Any, options: IMultiRenderTargetOptions): Array<InternalTexture>
    fun updateMultipleRenderTargetTextureSampleCount(textures: Array<InternalTexture>, samples: Number): Number
    fun createPrefilteredCubeTexture(rootUrl: String, scene: Scene, lodScale: Number, lodOffset: Number, onLoad: ((internalTexture: InternalTexture) -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, format: Number? = definedExternally /* null */, forcedExtension: Any? = definedExternally /* null */, createPolynomials: Boolean? = definedExternally /* null */): InternalTexture
    fun createEffectForParticles(fragmentName: String, uniformsNames: Array<String>, samplers: Array<String>, defines: String, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */): Effect
    open fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene): InternalTexture = definedExternally
}
external open class CubeTexture(rootUrl: String, scene: Scene, extensions: Array<String>? = definedExternally /* null */, noMipmap: Boolean? = definedExternally /* null */, files: Array<String>? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, format: Number? = definedExternally /* null */, prefiltered: Boolean? = definedExternally /* null */, forcedExtension: Any? = definedExternally /* null */, createPolynomials: Boolean? = definedExternally /* null */, lodScale: Number? = definedExternally /* null */, lodOffset: Number? = definedExternally /* null */) : BaseTexture {
    open var _delayedOnLoad: Any = definedExternally
    open var url: String = definedExternally
    open var boundingBoxPosition: Vector3 = definedExternally
    open var _boundingBoxSize: Any = definedExternally
    open var boundingBoxSize: Vector3 = definedExternally
    open var _rotationY: Number = definedExternally
    open var rotationY: Number = definedExternally
    override var noMipmap: Boolean = definedExternally
    open var _noMipmap: Any = definedExternally
    open var _files: Any = definedExternally
    open var _extensions: Any = definedExternally
    open var _textureMatrix: Any = definedExternally
    open var _format: Any = definedExternally
    open var _createPolynomials: Any = definedExternally
    open var _prefiltered: Boolean = definedExternally
    open var isPrefiltered: Boolean = definedExternally
    override fun getClassName(): String = definedExternally
    open fun updateURL(url: String, forcedExtension: String? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun delayLoad(forcedExtension: String? = definedExternally /* null */): Unit = definedExternally
    override fun getReflectionTextureMatrix(): Matrix = definedExternally
    open fun setReflectionTextureMatrix(value: Matrix): Unit = definedExternally
    override fun clone(): CubeTexture = definedExternally
    companion object {
        fun CreateFromImages(files: Array<String>, scene: Scene, noMipmap: Boolean? = definedExternally /* null */): CubeTexture = definedExternally
        fun CreateFromPrefilteredData(url: String, scene: Scene, forcedExtension: Any? = definedExternally /* null */, createPolynomials: Boolean? = definedExternally /* null */): CubeTexture = definedExternally
        fun Parse(parsedTexture: Any, scene: Scene, rootUrl: String): CubeTexture = definedExternally
    }
}
external object postprocessVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class TargetCamera(name: String, position: Vector3, scene: Scene, setActiveOnSceneIfNoneActive: Boolean? = definedExternally /* null */) : Camera {
    open var cameraDirection: Vector3 = definedExternally
    open var cameraRotation: Vector2 = definedExternally
    open var updateUpVectorFromRotation: Boolean = definedExternally
    open var _tmpQuaternion: Any = definedExternally
    open var rotation: Vector3 = definedExternally
    open var rotationQuaternion: Quaternion = definedExternally
    open var speed: Number = definedExternally
    open var noRotationConstraint: Boolean = definedExternally
    open var lockedTarget: TransformNode = definedExternally
    open var _currentTarget: Vector3 = definedExternally
    open var _initialFocalDistance: Number = definedExternally
    open var _viewMatrix: Matrix = definedExternally
    open var _camMatrix: Matrix = definedExternally
    open var _cameraTransformMatrix: Matrix = definedExternally
    open var _cameraRotationMatrix: Matrix = definedExternally
    open var _referencePoint: Vector3 = definedExternally
    open var _transformedReferencePoint: Vector3 = definedExternally
    open var _globalCurrentTarget: Vector3 = definedExternally
    open var _globalCurrentUpVector: Vector3 = definedExternally
    open var _reset: () -> Unit = definedExternally
    open var _defaultUp: Any = definedExternally
    open fun getFrontPosition(distance: Number): Vector3 = definedExternally
    open fun _getLockedTargetPosition(): Vector3 = definedExternally
    open var _storedPosition: Any = definedExternally
    open var _storedRotation: Any = definedExternally
    open var _storedRotationQuaternion: Any = definedExternally
    override fun storeState(): Camera = definedExternally
    override fun _restoreStateValues(): Boolean = definedExternally
    override fun _initCache(): Unit = definedExternally
    override fun _updateCache(ignoreParentClass: Boolean?): Unit = definedExternally
    override fun _isSynchronizedViewMatrix(): Boolean = definedExternally
    open fun _computeLocalCameraSpeed(): Number = definedExternally
    open fun setTarget(target: Vector3): Unit = definedExternally
    open fun getTarget(): Vector3 = definedExternally
    open fun _decideIfNeedsToMove(): Boolean = definedExternally
    open fun _updatePosition(): Unit = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    override fun _updateCameraRotationMatrix(): Unit = definedExternally
    open var _rotateUpVectorWithCameraRotationMatrix: Any = definedExternally
    open var _cachedRotationZ: Any = definedExternally
    open var _cachedQuaternionRotationZ: Any = definedExternally
    override fun _getViewMatrix(): Matrix = definedExternally
    open fun _computeViewMatrix(position: Vector3, target: Vector3, up: Vector3): Unit = definedExternally
    override fun createRigCamera(name: String, cameraIndex: Number): Camera = definedExternally
    override fun _updateRigCameras(): Unit = definedExternally
    open var _getRigCamPositionAndTarget: Any = definedExternally
    override fun getClassName(): String = definedExternally
    companion object {
        var _RigCamTransformMatrix: Any = definedExternally
        var _TargetTransformMatrix: Any = definedExternally
        var _TargetFocalPoint: Any = definedExternally
    }
}
external object CameraInputTypes {
}
external interface ICameraInput<TCamera : Camera> {
    var camera: TCamera
    fun getClassName(): String
    fun getSimpleName(): String
    fun attachControl(element: HTMLElement, noPreventDefault: Boolean? = definedExternally /* null */)
    fun detachControl(element: HTMLElement)
    var checkInputs: (() -> Unit)? get() = definedExternally; set(value) = definedExternally
}
external interface CameraInputsMap<TCamera : Camera> {
    @nativeGetter
    operator fun get(name: String): ICameraInput<TCamera>?
    @nativeSetter
    operator fun set(name: String, value: ICameraInput<TCamera>)
    @nativeGetter
    operator fun get(idx: Number): ICameraInput<TCamera>?
    @nativeSetter
    operator fun set(idx: Number, value: ICameraInput<TCamera>)
}
external open class CameraInputsManager<TCamera : Camera>(camera: TCamera) {
    open var attached: CameraInputsMap<TCamera> = definedExternally
    open var attachedElement: HTMLElement = definedExternally
    open var noPreventDefault: Boolean = definedExternally
    open var camera: TCamera = definedExternally
    open var checkInputs: () -> Unit = definedExternally
    open fun add(input: ICameraInput<TCamera>): Unit = definedExternally
    open fun remove(inputToRemove: ICameraInput<TCamera>): Unit = definedExternally
    open fun removeByType(inputType: String): Unit = definedExternally
    open var _addCheckInputs: Any = definedExternally
    open fun attachInput(input: ICameraInput<TCamera>): Unit = definedExternally
    open fun attachElement(element: HTMLElement, noPreventDefault: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun detachElement(element: HTMLElement, disconnect: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun rebuildInputCheck(): Unit = definedExternally
    open fun clear(): Unit = definedExternally
    open fun serialize(serializedCamera: Any): Unit = definedExternally
    open fun parse(parsedCamera: Any): Unit = definedExternally
}
external open class KeyboardEventTypes {
    companion object {
        var KEYDOWN: Number = definedExternally
        var KEYUP: Number = definedExternally
    }
}
external open class KeyboardInfo(type: Number, event: KeyboardEvent) {
    open var type: Number = definedExternally
    open var event: KeyboardEvent = definedExternally
}
external open class KeyboardInfoPre(type: Number, event: KeyboardEvent) : KeyboardInfo {
    override var type: Number = definedExternally
    override var event: KeyboardEvent = definedExternally
    open var skipOnPointerObservable: Boolean = definedExternally
}
external open class FreeCameraKeyboardMoveInput : ICameraInput<FreeCamera> {
    override var camera: FreeCamera = definedExternally
    open var keysUp: Array<Number> = definedExternally
    open var keysDown: Array<Number> = definedExternally
    open var keysLeft: Array<Number> = definedExternally
    open var keysRight: Array<Number> = definedExternally
    open var _keys: Any = definedExternally
    open var _onCanvasBlurObserver: Any = definedExternally
    open var _onKeyboardObserver: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _scene: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    open fun _onLostFocus(): Unit = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external interface IShadowLight : Light {
    var position: Vector3
    var direction: Vector3
    var transformedPosition: Vector3
    var transformedDirection: Vector3
    var shadowMinZ: Number
    var shadowMaxZ: Number
    fun computeTransformedInformation(): Boolean
    var customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) -> Unit
    fun setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight
    fun getDepthScale(): Number
    fun needCube(): Boolean
    fun needProjectionMatrixCompute(): Boolean
    fun forceProjectionMatrixCompute()
    fun getShadowDirection(faceIndex: Number? = definedExternally /* null */): Vector3
    fun getDepthMinZ(activeCamera: Camera): Number
    fun getDepthMaxZ(activeCamera: Camera): Number
}
external open class ShadowLight : IShadowLight {
    open fun _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): Unit = definedExternally
    open var _position: Vector3 = definedExternally
    open fun _setPosition(value: Vector3): Unit = definedExternally
    override var position: Vector3 = definedExternally
    open var _direction: Vector3 = definedExternally
    open fun _setDirection(value: Vector3): Unit = definedExternally
    override var direction: Vector3 = definedExternally
    open var _shadowMinZ: Any = definedExternally
    override var shadowMinZ: Number = definedExternally
    open var _shadowMaxZ: Any = definedExternally
    override var shadowMaxZ: Number = definedExternally
    override var customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) -> Unit = definedExternally
    override var transformedPosition: Vector3 = definedExternally
    override var transformedDirection: Vector3 = definedExternally
    open var _needProjectionMatrixCompute: Any = definedExternally
    override fun computeTransformedInformation(): Boolean = definedExternally
    override fun getDepthScale(): Number = definedExternally
    override fun getShadowDirection(faceIndex: Number?): Vector3 = definedExternally
    override fun getAbsolutePosition(): Vector3 = definedExternally
    open fun setDirectionToTarget(target: Vector3): Vector3 = definedExternally
    open fun getRotation(): Vector3 = definedExternally
    override fun needCube(): Boolean = definedExternally
    override fun needProjectionMatrixCompute(): Boolean = definedExternally
    override fun forceProjectionMatrixCompute(): Unit = definedExternally
    override fun _initCache(): Unit = definedExternally
    override fun _isSynchronized(): Boolean = definedExternally
    override fun computeWorldMatrix(force: Boolean?): Matrix = definedExternally
    override fun getDepthMinZ(activeCamera: Camera): Number = definedExternally
    override fun getDepthMaxZ(activeCamera: Camera): Number = definedExternally
    override fun setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight = definedExternally
	open fun updateEffect(defines: String? = definedExternally /* null */, uniforms: Array<String>? = definedExternally /* null */, samplers: Array<String>? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */): Unit = definedExternally
}

external open class MaterialHelper {
    companion object {
        fun BindEyePosition(effect: Effect, scene: Scene): Unit = definedExternally
        fun PrepareDefinesForMergedUV(texture: BaseTexture, defines: Any, key: String): Unit = definedExternally
        fun BindTextureMatrix(texture: BaseTexture, uniformBuffer: UniformBuffer, key: String): Unit = definedExternally
        fun PrepareDefinesForMisc(mesh: AbstractMesh, scene: Scene, useLogarithmicDepth: Boolean, pointsCloud: Boolean, fogEnabled: Boolean, alphaTest: Boolean, defines: Any): Unit = definedExternally
        fun PrepareDefinesForFrameBoundValues(scene: Scene, engine: Engine, defines: Any, useInstances: Boolean, useClipPlane: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun PrepareDefinesForAttributes(mesh: AbstractMesh, defines: Any, useVertexColor: Boolean, useBones: Boolean, useMorphTargets: Boolean? = definedExternally /* null */, useVertexAlpha: Boolean? = definedExternally /* null */): Boolean = definedExternally
        fun PrepareDefinesForMultiview(scene: Scene, defines: Any): Unit = definedExternally
        fun PrepareDefinesForLights(scene: Scene, mesh: AbstractMesh, defines: Any, specularSupported: Boolean, maxSimultaneousLights: Number? = definedExternally /* null */, disableLighting: Boolean? = definedExternally /* null */): Boolean = definedExternally
        fun PrepareUniformsAndSamplersList(uniformsListOrOptions: Array<String>, samplersList: Array<String>? = definedExternally /* null */, defines: Any? = definedExternally /* null */, maxSimultaneousLights: Number? = definedExternally /* null */): Unit = definedExternally
        fun PrepareUniformsAndSamplersList(uniformsListOrOptions: EffectCreationOptions, samplersList: Array<String>? = definedExternally /* null */, defines: Any? = definedExternally /* null */, maxSimultaneousLights: Number? = definedExternally /* null */): Unit = definedExternally
        fun HandleFallbacksForShadows(defines: Any, fallbacks: EffectFallbacks, maxSimultaneousLights: Number? = definedExternally /* null */, rank: Number? = definedExternally /* null */): Number = definedExternally
        fun PrepareAttributesForMorphTargets(attribs: Array<String>, mesh: AbstractMesh, defines: Any): Unit = definedExternally
        fun PrepareAttributesForBones(attribs: Array<String>, mesh: AbstractMesh, defines: Any, fallbacks: EffectFallbacks): Unit = definedExternally
        fun PrepareAttributesForInstances(attribs: Array<String>, defines: Any): Unit = definedExternally
        fun BindLightShadow(light: Light, mesh: AbstractMesh, lightIndex: String, effect: Effect): Unit = definedExternally
        fun BindLightProperties(light: Light, effect: Effect, lightIndex: Number): Unit = definedExternally
        fun BindLights(scene: Scene, mesh: AbstractMesh, effect: Effect, defines: Any, maxSimultaneousLights: Number? = definedExternally /* null */, usePhysicalLightFalloff: Boolean? = definedExternally /* null */): Unit = definedExternally
        var _tempFogColor: Any = definedExternally
        fun BindFogParameters(scene: Scene, mesh: AbstractMesh, effect: Effect, linearSpace: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun BindBonesParameters(mesh: AbstractMesh? = definedExternally /* null */, effect: Effect? = definedExternally /* null */): Unit = definedExternally
        fun BindMorphTargetParameters(abstractMesh: AbstractMesh, effect: Effect): Unit = definedExternally
        fun BindLogDepth(defines: Any, effect: Effect, scene: Scene): Unit = definedExternally
        fun BindClipPlane(effect: Effect, scene: Scene): Unit = definedExternally
    }
}
external object kernelBlurVaryingDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object kernelBlurFragment {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object kernelBlurFragment2 {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object kernelBlurPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object kernelBlurVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object kernelBlurVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class BlurPostProcess : PostProcess {
    constructor(name: String, direction: Vector2, kernel: Number, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, defines: String? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, direction: Vector2, kernel: Number, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, defines: String? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var direction: Vector2 = definedExternally
    open var blockCompilation: Any = definedExternally
    open var _kernel: Number = definedExternally
    open var _idealKernel: Number = definedExternally
    open var _packedFloat: Boolean = definedExternally
    open var _staticDefines: Any = definedExternally
    open var kernel: Number = definedExternally
    open var packedFloat: Boolean = definedExternally
    override fun updateEffect(defines: String?  /* null */, uniforms: Array<String>?  /* null */, samplers: Array<String>?  /* null */, indexParameters: Any?  /* null */, onCompiled: ((effect: Effect) -> Unit)?  /* null */, onError: ((effect: Effect, errors: String) -> Unit)?  /* null */): Unit = definedExternally
    open fun _updateParameters(onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun _nearestBestKernel(idealKernel: Number): Number = definedExternally
    open fun _gaussianWeight(x: Number): Number = definedExternally
    open fun _glslFloat(x: Number, decimalFigures: Number? = definedExternally /* null */): String = definedExternally
}
external object shadowMapPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object bonesDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object morphTargetsVertexGlobalDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object morphTargetsVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object instancesDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object helperFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object morphTargetsVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object instancesVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object bonesVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object shadowMapVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object depthBoxBlurPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface ICustomShaderOptions {
    var shaderName: String
    var attributes: Array<String>? get() = definedExternally; set(value) = definedExternally
    var uniforms: Array<String>? get() = definedExternally; set(value) = definedExternally
    var samplers: Array<String>? get() = definedExternally; set(value) = definedExternally
    var defines: Array<String>? get() = definedExternally; set(value) = definedExternally
}
external interface IShadowGenerator {
    fun getShadowMap(): RenderTargetTexture
    fun getShadowMapForRendering(): RenderTargetTexture
    fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean
    fun prepareDefines(defines: MaterialDefines, lightIndex: Number)
    fun bindShadowLight(lightIndex: String, effect: Effect)
    fun getTransformMatrix(): Matrix
    fun recreateShadowMap()
    fun forceCompilation(onCompiled: ((generator: ShadowGenerator) -> Unit)? = definedExternally /* null */, options: Any? = definedExternally /* null */)
    fun forceCompilationAsync(options: Any? = definedExternally /* null */): Promise<Unit>
    fun serialize(): Any
    fun dispose()
}
external open class ShadowGenerator(mapSize: Number, light: IShadowLight, usefulFloatFirst: Boolean? = definedExternally /* null */) : IShadowGenerator {
    open var customShaderOptions: ICustomShaderOptions = definedExternally
    open var onBeforeShadowMapRenderObservable: Observable<Effect> = definedExternally
    open var onBeforeShadowMapRenderMeshObservable: Observable<Mesh> = definedExternally
    open var _bias: Any = definedExternally
    open var bias: Number = definedExternally
    open var _normalBias: Any = definedExternally
    open var normalBias: Number = definedExternally
    open var _blurBoxOffset: Any = definedExternally
    open var blurBoxOffset: Number = definedExternally
    open var _blurScale: Any = definedExternally
    open var blurScale: Number = definedExternally
    open var _blurKernel: Any = definedExternally
    open var blurKernel: Number = definedExternally
    open var _useKernelBlur: Any = definedExternally
    open var useKernelBlur: Boolean = definedExternally
    open var _depthScale: Any = definedExternally
    open var depthScale: Number = definedExternally
    open var _filter: Any = definedExternally
    open var filter: Number = definedExternally
    open var usePoissonSampling: Boolean = definedExternally
    open var useExponentialShadowMap: Boolean = definedExternally
    open var useBlurExponentialShadowMap: Boolean = definedExternally
    open var useCloseExponentialShadowMap: Boolean = definedExternally
    open var useBlurCloseExponentialShadowMap: Boolean = definedExternally
    open var usePercentageCloserFiltering: Boolean = definedExternally
    open var _filteringQuality: Any = definedExternally
    open var filteringQuality: Number = definedExternally
    open var useContactHardeningShadow: Boolean = definedExternally
    open var _contactHardeningLightSizeUVRatio: Any = definedExternally
    open var contactHardeningLightSizeUVRatio: Number = definedExternally
    open var _darkness: Any = definedExternally
    open fun getDarkness(): Number = definedExternally
    open fun setDarkness(darkness: Number): ShadowGenerator = definedExternally
    open var _transparencyShadow: Any = definedExternally
    open fun setTransparencyShadow(transparent: Boolean): ShadowGenerator = definedExternally
    open var _shadowMap: Any = definedExternally
    open var _shadowMap2: Any = definedExternally
    override fun getShadowMap(): RenderTargetTexture = definedExternally
    override fun getShadowMapForRendering(): RenderTargetTexture = definedExternally
    open fun addShadowCaster(mesh: AbstractMesh, includeDescendants: Boolean? = definedExternally /* null */): ShadowGenerator = definedExternally
    open fun removeShadowCaster(mesh: AbstractMesh, includeDescendants: Boolean? = definedExternally /* null */): ShadowGenerator = definedExternally
    open var frustumEdgeFalloff: Number = definedExternally
    open var _light: Any = definedExternally
    open fun getLight(): IShadowLight = definedExternally
    open var forceBackFacesOnly: Boolean = definedExternally
    open var _scene: Any = definedExternally
    open var _lightDirection: Any = definedExternally
    open var _effect: Any = definedExternally
    open var _viewMatrix: Any = definedExternally
    open var _projectionMatrix: Any = definedExternally
    open var _transformMatrix: Any = definedExternally
    open var _cachedPosition: Any = definedExternally
    open var _cachedDirection: Any = definedExternally
    open var _cachedDefines: Any = definedExternally
    open var _currentRenderID: Any = definedExternally
    open var _boxBlurPostprocess: Any = definedExternally
    open var _kernelBlurXPostprocess: Any = definedExternally
    open var _kernelBlurYPostprocess: Any = definedExternally
    open var _blurPostProcesses: Any = definedExternally
    open var _mapSize: Any = definedExternally
    open var _currentFaceIndex: Any = definedExternally
    open var _currentFaceIndexCache: Any = definedExternally
    open var _textureType: Any = definedExternally
    open var _defaultTextureMatrix: Any = definedExternally
    open var _initializeGenerator: Any = definedExternally
    open var _initializeShadowMap: Any = definedExternally
    open var _initializeBlurRTTAndPostProcesses: Any = definedExternally
    open var _renderForShadowMap: Any = definedExternally
    open var _renderSubMeshForShadowMap: Any = definedExternally
    open var _applyFilterValues: Any = definedExternally
	override fun forceCompilation(onCompiled: ((generator: ShadowGenerator) -> Unit)?  /* null */, options: Any?  /* null */): Unit = definedExternally
	override fun forceCompilationAsync(options: Any?  /* null */): Promise<Unit> = definedExternally
    override fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean = definedExternally
	override fun prepareDefines(defines: MaterialDefines, lightIndex: Number)
    open fun prepareDefines(defines: Any, lightIndex: Number): Unit = definedExternally
    override fun bindShadowLight(lightIndex: String, effect: Effect): Unit = definedExternally
    override fun getTransformMatrix(): Matrix = definedExternally
    override fun recreateShadowMap(): Unit = definedExternally
    open var _disposeBlurPostProcesses: Any = definedExternally
    open var _disposeRTTandPostProcesses: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var FILTER_NONE: Number = definedExternally
        var FILTER_EXPONENTIALSHADOWMAP: Number = definedExternally
        var FILTER_POISSONSAMPLING: Number = definedExternally
        var FILTER_BLUREXPONENTIALSHADOWMAP: Number = definedExternally
        var FILTER_CLOSEEXPONENTIALSHADOWMAP: Number = definedExternally
        var FILTER_BLURCLOSEEXPONENTIALSHADOWMAP: Number = definedExternally
        var FILTER_PCF: Number = definedExternally
        var FILTER_PCSS: Number = definedExternally
        var QUALITY_HIGH: Number = definedExternally
        var QUALITY_MEDIUM: Number = definedExternally
        var QUALITY_LOW: Number = definedExternally
        var _SceneComponentInitialization: (scene: Scene) -> Unit = definedExternally
        fun Parse(parsedShadowGenerator: Any, scene: Scene): ShadowGenerator = definedExternally
    }
}
external open class Light(name: String, scene: Scene) : Node {
    open var diffuse: Color3 = definedExternally
    open var specular: Color3 = definedExternally
    open var falloffType: Number = definedExternally
    open var intensity: Number = definedExternally
    open var _range: Any = definedExternally
    open var _inverseSquaredRange: Number = definedExternally
    open var range: Number = definedExternally
    open var _photometricScale: Any = definedExternally
    open var _intensityMode: Any = definedExternally
    open var intensityMode: Number = definedExternally
    open var _radius: Any = definedExternally
    open var radius: Number = definedExternally
    open var _renderPriority: Any = definedExternally
    open var renderPriority: Number = definedExternally
    open var _shadowEnabled: Any = definedExternally
    open var shadowEnabled: Boolean = definedExternally
    open var _includedOnlyMeshes: Any = definedExternally
    open var includedOnlyMeshes: Array<AbstractMesh> = definedExternally
    open var _excludedMeshes: Any = definedExternally
    open var excludedMeshes: Array<AbstractMesh> = definedExternally
    open var _excludeWithLayerMask: Any = definedExternally
    open var excludeWithLayerMask: Number = definedExternally
    open var _includeOnlyWithLayerMask: Any = definedExternally
    open var includeOnlyWithLayerMask: Number = definedExternally
    open var _lightmapMode: Any = definedExternally
    open var lightmapMode: Number = definedExternally
    open var _shadowGenerator: IShadowGenerator = definedExternally
    open var _excludedMeshesIds: Array<String> = definedExternally
    open var _includedOnlyMeshesIds: Array<String> = definedExternally
    open var _uniformBuffer: UniformBuffer = definedExternally
    open fun _buildUniformLayout(): Unit = definedExternally
    open fun transferToEffect(effect: Effect, lightIndex: String): Light = definedExternally
    override fun getClassName(): String = definedExternally
    open var _isLight: Boolean = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    override fun _syncParentEnabledState(): Unit = definedExternally
    override fun setEnabled(value: Boolean): Unit = definedExternally
    open fun getShadowGenerator(): IShadowGenerator = definedExternally
    open fun getAbsolutePosition(): Vector3 = definedExternally
    open fun canAffectMesh(mesh: AbstractMesh): Boolean = definedExternally
    override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
    open fun getTypeID(): Number = definedExternally
    open fun getScaledIntensity(): Number = definedExternally
    open fun clone(name: String): Light = definedExternally
    open fun serialize(): Any = definedExternally
    open var _hookArrayForExcluded: Any = definedExternally
    open var _hookArrayForIncludedOnly: Any = definedExternally
    open var _resyncMeshes: Any = definedExternally
    open fun _markMeshesAsLightDirty(): Unit = definedExternally
    open var _computePhotometricScale: Any = definedExternally
    open var _getPhotometricScale: Any = definedExternally
    open fun _reorderLightsInScene(): Unit = definedExternally
    open fun prepareLightSpecificDefines(defines: Any, lightIndex: Number): Unit = definedExternally
    companion object {
        var FALLOFF_DEFAULT: Number = definedExternally
        var FALLOFF_PHYSICAL: Number = definedExternally
        var FALLOFF_GLTF: Number = definedExternally
        var FALLOFF_STANDARD: Number = definedExternally
        var LIGHTMAP_DEFAULT: Number = definedExternally
        var LIGHTMAP_SPECULAR: Number = definedExternally
        var LIGHTMAP_SHADOWSONLY: Number = definedExternally
        var INTENSITYMODE_AUTOMATIC: Number = definedExternally
        var INTENSITYMODE_LUMINOUSPOWER: Number = definedExternally
        var INTENSITYMODE_LUMINOUSINTENSITY: Number = definedExternally
        var INTENSITYMODE_ILLUMINANCE: Number = definedExternally
        var INTENSITYMODE_LUMINANCE: Number = definedExternally
        var LIGHTTYPEID_POINTLIGHT: Number = definedExternally
        var LIGHTTYPEID_DIRECTIONALLIGHT: Number = definedExternally
        var LIGHTTYPEID_SPOTLIGHT: Number = definedExternally
        var LIGHTTYPEID_HEMISPHERICLIGHT: Number = definedExternally
        fun CompareLightsPriority(a: Light, b: Light): Number = definedExternally
        fun GetConstructorFromName(type: Number, name: String, scene: Scene): () -> Light = definedExternally
        fun Parse(parsedLight: Any, scene: Scene): Light = definedExternally
    }
}
external interface IAction {
    var trigger: Number
    var triggerOptions: Any
    fun getTriggerParameter(): Any
    fun _executeCurrent(evt: ActionEvent? = definedExternally /* null */)
    fun serialize(parent: Any): Any
    fun _prepare()
    var _actionManager: AbstractActionManager
}
external interface `T$3` {
    var name: String
    var targetType: String
    var value: String
}
external open class Action(triggerOptions: Any, condition: Condition? = definedExternally /* null */) : IAction {
	override var _actionManager: AbstractActionManager = definedExternally
    override var triggerOptions: Any = definedExternally
    override var trigger: Number = definedExternally
    open var _nextActiveAction: Any = definedExternally
    open var _child: Any = definedExternally
    open var _condition: Any = definedExternally
    open var _triggerParameter: Any = definedExternally
    open var onBeforeExecuteObservable: Observable<Action> = definedExternally
    override fun _prepare(): Unit = definedExternally
    override fun getTriggerParameter(): Any = definedExternally
    override fun _executeCurrent(evt: ActionEvent?): Unit = definedExternally
    open fun execute(evt: ActionEvent? = definedExternally /* null */): Unit = definedExternally
    open fun skipToNextActiveAction(): Unit = definedExternally
    open fun then(action: Action): Action = definedExternally
    open fun _getProperty(propertyPath: String): String = definedExternally
    open fun _getEffectiveTarget(target: Any, propertyPath: String): Any = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
    open fun _serialize(serializedAction: Any, parent: Any? = definedExternally /* null */): Any = definedExternally
    companion object {
        var _SerializeValueAsString: (value: Any) -> String = definedExternally
        var _GetTargetProperty: (target: dynamic /* Scene | Node */) -> `T$3` = definedExternally
    }
}
external open class Condition(actionManager: ActionManager) {
    open var _actionManager: ActionManager = definedExternally
    open var _evaluationId: Number = definedExternally
    open var _currentResult: Boolean = definedExternally
    open fun isValid(): Boolean = definedExternally
    open fun _getProperty(propertyPath: String): String = definedExternally
    open fun _getEffectiveTarget(target: Any, propertyPath: String): Any = definedExternally
    open fun serialize(): Any = definedExternally
    open fun _serialize(serializedCondition: Any): Any = definedExternally
}
external open class ValueCondition(actionManager: ActionManager, target: Any, propertyPath: String, value: Any, operator: Number? = definedExternally /* null */) : Condition {
    open var propertyPath: String = definedExternally
    open var value: Any = definedExternally
    open var operator: Number = definedExternally
    override var _actionManager: ActionManager = definedExternally
    open var _target: Any = definedExternally
    open var _effectiveTarget: Any = definedExternally
    open var _property: Any = definedExternally
    override fun isValid(): Boolean = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var _IsEqual: Any = definedExternally
        var _IsDifferent: Any = definedExternally
        var _IsGreater: Any = definedExternally
        var _IsLesser: Any = definedExternally
        var IsEqual: Number = definedExternally
        var IsDifferent: Number = definedExternally
        var IsGreater: Number = definedExternally
        var IsLesser: Number = definedExternally
        fun GetOperatorName(operator: Number): String = definedExternally
    }
}
external open class PredicateCondition(actionManager: ActionManager, predicate: () -> Boolean) : Condition {
    open var predicate: () -> Boolean = definedExternally
    override var _actionManager: ActionManager = definedExternally
    override fun isValid(): Boolean = definedExternally
}
external open class StateCondition(actionManager: ActionManager, target: Any, value: String) : Condition {
    open var value: String = definedExternally
    override var _actionManager: ActionManager = definedExternally
    open var _target: Any = definedExternally
    override fun isValid(): Boolean = definedExternally
    override fun serialize(): Any = definedExternally
}
external open class SwitchBooleanAction(triggerOptions: Any, target: Any, propertyPath: String, condition: Condition? = definedExternally /* null */) : Action {
    open var propertyPath: String = definedExternally
    open var _target: Any = definedExternally
    open var _effectiveTarget: Any = definedExternally
    open var _property: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class SetStateAction(triggerOptions: Any, target: Any, value: String, condition: Condition? = definedExternally /* null */) : Action {
    open var value: String = definedExternally
    open var _target: Any = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class SetValueAction(triggerOptions: Any, target: Any, propertyPath: String, value: Any, condition: Condition? = definedExternally /* null */) : Action {
    open var propertyPath: String = definedExternally
    open var value: Any = definedExternally
    open var _target: Any = definedExternally
    open var _effectiveTarget: Any = definedExternally
    open var _property: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class IncrementValueAction(triggerOptions: Any, target: Any, propertyPath: String, value: Any, condition: Condition? = definedExternally /* null */) : Action {
    open var propertyPath: String = definedExternally
    open var value: Any = definedExternally
    open var _target: Any = definedExternally
    open var _effectiveTarget: Any = definedExternally
    open var _property: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class PlayAnimationAction(triggerOptions: Any, target: Any, from: Number, to: Number, loop: Boolean? = definedExternally /* null */, condition: Condition? = definedExternally /* null */) : Action {
    open var from: Number = definedExternally
    open var to: Number = definedExternally
    open var loop: Boolean = definedExternally
    open var _target: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class StopAnimationAction(triggerOptions: Any, target: Any, condition: Condition? = definedExternally /* null */) : Action {
    open var _target: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class DoNothingAction(triggerOptions: Any? = definedExternally /* null */, condition: Condition? = definedExternally /* null */) : Action {
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class CombineAction(triggerOptions: Any, children: Array<Action>, condition: Condition? = definedExternally /* null */) : Action {
    open var children: Array<Action> = definedExternally
    override fun _prepare(): Unit = definedExternally
    fun execute(evt: ActionEvent): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class ExecuteCodeAction(triggerOptions: Any, func: (evt: ActionEvent) -> Unit, condition: Condition? = definedExternally /* null */) : Action {
    open var func: (evt: ActionEvent) -> Unit = definedExternally
    fun execute(evt: ActionEvent): Unit = definedExternally
}
external open class SetParentAction(triggerOptions: Any, target: Any, parent: Any, condition: Condition? = definedExternally /* null */) : Action {
    open var _parent: Any = definedExternally
    open var _target: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class ActionManager(scene: Scene) : AbstractActionManager {
    open var _scene: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun getScene(): Scene = definedExternally
    override fun hasSpecificTriggers(triggers: Array<Number>): Boolean = definedExternally
    override fun hasSpecificTriggers2(triggerA: Number, triggerB: Number): Boolean = definedExternally
	override fun hasSpecificTrigger(trigger: Number, parameterPredicate: ((parameter: Any) -> Boolean)?  /* null */): Boolean = definedExternally
    override var hasPointerTriggers: Boolean = definedExternally
    override var hasPickTriggers: Boolean = definedExternally
    override fun registerAction(action: IAction): IAction = definedExternally
    override fun unregisterAction(action: IAction): Boolean = definedExternally
    override fun processTrigger(trigger: Number, evt: IActionEvent?): Unit = definedExternally
    open fun _getEffectiveTarget(target: Any, propertyPath: String): Any = definedExternally
    open fun _getProperty(propertyPath: String): String = definedExternally
    override fun serialize(name: String): Any = definedExternally
    companion object {
        var NothingTrigger: Number = definedExternally
        var OnPickTrigger: Number = definedExternally
        var OnLeftPickTrigger: Number = definedExternally
        var OnRightPickTrigger: Number = definedExternally
        var OnCenterPickTrigger: Number = definedExternally
        var OnPickDownTrigger: Number = definedExternally
        var OnDoublePickTrigger: Number = definedExternally
        var OnPickUpTrigger: Number = definedExternally
        var OnPickOutTrigger: Number = definedExternally
        var OnLongPressTrigger: Number = definedExternally
        var OnPointerOverTrigger: Number = definedExternally
        var OnPointerOutTrigger: Number = definedExternally
        var OnEveryFrameTrigger: Number = definedExternally
        var OnIntersectionEnterTrigger: Number = definedExternally
        var OnIntersectionExitTrigger: Number = definedExternally
        var OnKeyDownTrigger: Number = definedExternally
        var OnKeyUpTrigger: Number = definedExternally
        fun Parse(parsedActions: Any, `object`: AbstractMesh, scene: Scene): Unit = definedExternally
        fun GetTriggerName(trigger: Number): String = definedExternally
    }
}
external open class Ray(origin: Vector3, direction: Vector3, length: Number? = definedExternally /* null */) {
    open var origin: Vector3 = definedExternally
    open var direction: Vector3 = definedExternally
    open var length: Number = definedExternally
    open var _tmpRay: Any = definedExternally
    open fun intersectsBoxMinMax(minimum: Vector3, maximum: Vector3, intersectionTreshold: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun intersectsBox(box: BoundingBox, intersectionTreshold: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun intersectsSphere(sphere: BoundingSphere, intersectionTreshold: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun intersectsTriangle(vertex0: Vector3, vertex1: Vector3, vertex2: Vector3): IntersectionInfo = definedExternally
    open fun intersectsPlane(plane: Plane): Number = definedExternally
    open fun intersectsMesh(mesh: AbstractMesh, fastCheck: Boolean? = definedExternally /* null */): PickingInfo = definedExternally
    open fun intersectsMeshes(meshes: Array<AbstractMesh>, fastCheck: Boolean? = definedExternally /* null */, results: Array<PickingInfo>? = definedExternally /* null */): Array<PickingInfo> = definedExternally
    open var _comparePickingInfo: Any = definedExternally
    open fun intersectionSegment(sega: Vector3, segb: Vector3, threshold: Number): Number = definedExternally
    open fun update(x: Number, y: Number, viewportWidth: Number, viewportHeight: Number, world: Matrix, view: Matrix, projection: Matrix): Ray = definedExternally
    open fun unprojectRayToRef(sourceX: Number, sourceY: Number, viewportWidth: Number, viewportHeight: Number, world: Matrix, view: Matrix, projection: Matrix): Unit = definedExternally
    companion object {
        var TmpVector3: Any = definedExternally
        var smallnum: Any = definedExternally
        var rayl: Any = definedExternally
        fun Zero(): Ray = definedExternally
        fun CreateNew(x: Number, y: Number, viewportWidth: Number, viewportHeight: Number, world: Matrix, view: Matrix, projection: Matrix): Ray = definedExternally
        fun CreateNewFromTo(origin: Vector3, end: Vector3, world: Matrix? = definedExternally /* null */): Ray = definedExternally
        fun Transform(ray: Ray, matrix: Matrix): Ray = definedExternally
        fun TransformToRef(ray: Ray, matrix: Matrix, result: Ray): Unit = definedExternally
    }
}
external open class Scene(engine: Engine, options: SceneOptions? = definedExternally /* null */) : AbstractScene, IAnimatable {
    open var _inputManager: InputManager = definedExternally
    open var cameraToUseForPointers: Camera = definedExternally
    open var _isScene: Boolean = definedExternally
    open var autoClear: Boolean = definedExternally
    open var autoClearDepthAndStencil: Boolean = definedExternally
    open var clearColor: Color4 = definedExternally
    open var ambientColor: Color3 = definedExternally
    open var environmentBRDFTexture: BaseTexture = definedExternally
    open var _environmentTexture: BaseTexture = definedExternally
    override var environmentTexture: BaseTexture = definedExternally
    open var _imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var _forceWireframe: Any = definedExternally
    open var forceWireframe: Boolean = definedExternally
    open var _forcePointsCloud: Any = definedExternally
    open var forcePointsCloud: Boolean = definedExternally
    open var clipPlane: Plane = definedExternally
    open var clipPlane2: Plane = definedExternally
    open var clipPlane3: Plane = definedExternally
    open var clipPlane4: Plane = definedExternally
    open var animationsEnabled: Boolean = definedExternally
    open var _animationPropertiesOverride: Any = definedExternally
    open var animationPropertiesOverride: AnimationPropertiesOverride = definedExternally
    open var useConstantAnimationDeltaTime: Boolean = definedExternally
    open var constantlyUpdateMeshUnderPointer: Boolean = definedExternally
    open var hoverCursor: String = definedExternally
    open var defaultCursor: String = definedExternally
    open var preventDefaultOnPointerDown: Boolean = definedExternally
    open var preventDefaultOnPointerUp: Boolean = definedExternally
    open var metadata: Any = definedExternally
    open var reservedDataStore: Any = definedExternally
    open var loadingPluginName: String = definedExternally
    open var disableOfflineSupportExceptionRules: Array<RegExp> = definedExternally
    open var onDisposeObservable: Observable<Scene> = definedExternally
    open var _onDisposeObserver: Any = definedExternally
    open var onDispose: () -> Unit = definedExternally
    open var onBeforeRenderObservable: Observable<Scene> = definedExternally
    open var _onBeforeRenderObserver: Any = definedExternally
    open var beforeRender: () -> Unit = definedExternally
    open var onAfterRenderObservable: Observable<Scene> = definedExternally
    open var _onAfterRenderObserver: Any = definedExternally
    open var afterRender: () -> Unit = definedExternally
    open var onBeforeAnimationsObservable: Observable<Scene> = definedExternally
    open var onAfterAnimationsObservable: Observable<Scene> = definedExternally
    open var onBeforeDrawPhaseObservable: Observable<Scene> = definedExternally
    open var onAfterDrawPhaseObservable: Observable<Scene> = definedExternally
    open var onReadyObservable: Observable<Scene> = definedExternally
    open var onBeforeCameraRenderObservable: Observable<Camera> = definedExternally
    open var _onBeforeCameraRenderObserver: Any = definedExternally
    open var beforeCameraRender: () -> Unit = definedExternally
    open var onAfterCameraRenderObservable: Observable<Camera> = definedExternally
    open var _onAfterCameraRenderObserver: Any = definedExternally
    open var afterCameraRender: () -> Unit = definedExternally
    open var onBeforeActiveMeshesEvaluationObservable: Observable<Scene> = definedExternally
    open var onAfterActiveMeshesEvaluationObservable: Observable<Scene> = definedExternally
    open var onBeforeParticlesRenderingObservable: Observable<Scene> = definedExternally
    open var onAfterParticlesRenderingObservable: Observable<Scene> = definedExternally
    open var onDataLoadedObservable: Observable<Scene> = definedExternally
    open var onNewCameraAddedObservable: Observable<Camera> = definedExternally
    open var onCameraRemovedObservable: Observable<Camera> = definedExternally
    open var onNewLightAddedObservable: Observable<Light> = definedExternally
    open var onLightRemovedObservable: Observable<Light> = definedExternally
    open var onNewGeometryAddedObservable: Observable<Geometry> = definedExternally
    open var onGeometryRemovedObservable: Observable<Geometry> = definedExternally
    open var onNewTransformNodeAddedObservable: Observable<TransformNode> = definedExternally
    open var onTransformNodeRemovedObservable: Observable<TransformNode> = definedExternally
    open var onNewMeshAddedObservable: Observable<AbstractMesh> = definedExternally
    open var onMeshRemovedObservable: Observable<AbstractMesh> = definedExternally
    open var onNewSkeletonAddedObservable: Observable<Skeleton> = definedExternally
    open var onSkeletonRemovedObservable: Observable<Skeleton> = definedExternally
    open var onNewMaterialAddedObservable: Observable<Material> = definedExternally
    open var onMaterialRemovedObservable: Observable<Material> = definedExternally
    open var onNewTextureAddedObservable: Observable<BaseTexture> = definedExternally
    open var onTextureRemovedObservable: Observable<BaseTexture> = definedExternally
    open var onBeforeRenderTargetsRenderObservable: Observable<Scene> = definedExternally
    open var onAfterRenderTargetsRenderObservable: Observable<Scene> = definedExternally
    open var onBeforeStepObservable: Observable<Scene> = definedExternally
    open var onAfterStepObservable: Observable<Scene> = definedExternally
    open var onActiveCameraChanged: Observable<Scene> = definedExternally
    open var onBeforeRenderingGroupObservable: Observable<RenderingGroupInfo> = definedExternally
    open var onAfterRenderingGroupObservable: Observable<RenderingGroupInfo> = definedExternally
    open var onMeshImportedObservable: Observable<AbstractMesh> = definedExternally
    open var customLODSelector: (mesh: AbstractMesh, camera: Camera) -> AbstractMesh = definedExternally
    open var _registeredForLateAnimationBindings: SmartArrayNoDuplicate<Any> = definedExternally
    open var pointerDownPredicate: (Mesh: AbstractMesh) -> Boolean = definedExternally
    open var pointerUpPredicate: (Mesh: AbstractMesh) -> Boolean = definedExternally
    open var pointerMovePredicate: (Mesh: AbstractMesh) -> Boolean = definedExternally
    open var onPointerMove: (evt: PointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) -> Unit = definedExternally
    open var onPointerDown: (evt: PointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) -> Unit = definedExternally
    open var onPointerUp: (evt: PointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) -> Unit = definedExternally
    open var onPointerPick: (evt: PointerEvent, pickInfo: PickingInfo) -> Unit = definedExternally
    open var onPrePointerObservable: Observable<PointerInfoPre> = definedExternally
    open var onPointerObservable: Observable<PointerInfo> = definedExternally
    open var unTranslatedPointer: Vector2 = definedExternally
    open var _mirroredCameraPosition: Vector3 = definedExternally
    open var onPreKeyboardObservable: Observable<KeyboardInfoPre> = definedExternally
    open var onKeyboardObservable: Observable<KeyboardInfo> = definedExternally
    open var _useRightHandedSystem: Any = definedExternally
    open var useRightHandedSystem: Boolean = definedExternally
    open var _timeAccumulator: Any = definedExternally
    open var _currentStepId: Any = definedExternally
    open var _currentInternalStep: Any = definedExternally
    open fun setStepId(newStepId: Number): Unit = definedExternally
    open fun getStepId(): Number = definedExternally
    open fun getInternalStep(): Number = definedExternally
    open var _fogEnabled: Any = definedExternally
    open var fogEnabled: Boolean = definedExternally
    open var _fogMode: Any = definedExternally
    open var fogMode: Number = definedExternally
    open var fogColor: Color3 = definedExternally
    open var fogDensity: Number = definedExternally
    open var fogStart: Number = definedExternally
    open var fogEnd: Number = definedExternally
    open var _shadowsEnabled: Any = definedExternally
    open var shadowsEnabled: Boolean = definedExternally
    open var _lightsEnabled: Any = definedExternally
    open var lightsEnabled: Boolean = definedExternally
    open var activeCameras: Array<Camera> = definedExternally
    open var _activeCamera: Camera = definedExternally
    open var activeCamera: Camera = definedExternally
    open var _defaultMaterial: Any = definedExternally
    open var defaultMaterial: Material = definedExternally
    open var _texturesEnabled: Any = definedExternally
    open var texturesEnabled: Boolean = definedExternally
    open var particlesEnabled: Boolean = definedExternally
    open var spritesEnabled: Boolean = definedExternally
    open var _skeletonsEnabled: Any = definedExternally
    open var skeletonsEnabled: Boolean = definedExternally
    open var lensFlaresEnabled: Boolean = definedExternally
    open var collisionsEnabled: Boolean = definedExternally
    open var _collisionCoordinator: Any = definedExternally
    open var collisionCoordinator: ICollisionCoordinator = definedExternally
    open var gravity: Vector3 = definedExternally
    open var postProcessesEnabled: Boolean = definedExternally
    open var postProcesses: Array<PostProcess> = definedExternally
    open var postProcessManager: PostProcessManager = definedExternally
    open var renderTargetsEnabled: Boolean = definedExternally
    open var dumpNextRenderTargets: Boolean = definedExternally
    open var customRenderTargets: Array<RenderTargetTexture> = definedExternally
    open var useDelayedTextureLoading: Boolean = definedExternally
    open var importedMeshesFiles: Array<String> = definedExternally
    open var probesEnabled: Boolean = definedExternally
    open var offlineProvider: IOfflineProvider = definedExternally
    open var actionManager: AbstractActionManager = definedExternally
    open var _meshesForIntersections: Any = definedExternally
    open var proceduralTexturesEnabled: Boolean = definedExternally
    open var _engine: Any = definedExternally
    open var _totalVertices: Any = definedExternally
    open var _activeIndices: PerfCounter = definedExternally
    open var _activeParticles: PerfCounter = definedExternally
    open var _activeBones: PerfCounter = definedExternally
    open var _animationRatio: Any = definedExternally
    open var _animationTimeLast: Number = definedExternally
    open var _animationTime: Number = definedExternally
    open var animationTimeScale: Number = definedExternally
    open var _cachedMaterial: Material = definedExternally
    open var _cachedEffect: Effect = definedExternally
    open var _cachedVisibility: Number = definedExternally
    open var _renderId: Any = definedExternally
    open var _frameId: Any = definedExternally
    open var _executeWhenReadyTimeoutId: Any = definedExternally
    open var _intermediateRendering: Any = definedExternally
    open var _viewUpdateFlag: Any = definedExternally
    open var _projectionUpdateFlag: Any = definedExternally
    open var _toBeDisposed: Array<IDisposable> = definedExternally
    open var _activeRequests: Any = definedExternally
    open var _pendingData: Array<Any> = definedExternally
    open var _isDisposed: Any = definedExternally
    open var dispatchAllSubMeshesOfActiveMeshes: Boolean = definedExternally
    open var _activeMeshes: Any = definedExternally
    open var _processedMaterials: Any = definedExternally
    open var _renderTargets: Any = definedExternally
    open var _activeParticleSystems: SmartArray<IParticleSystem> = definedExternally
    open var _activeSkeletons: Any = definedExternally
    open var _softwareSkinnedMeshes: Any = definedExternally
    open var _renderingManager: Any = definedExternally
    open var _activeAnimatables: Array<Animatable> = definedExternally
    open var _transformMatrix: Any = definedExternally
    open var _sceneUbo: Any = definedExternally
    open var _viewMatrix: Matrix = definedExternally
    open var _projectionMatrix: Any = definedExternally
    open var _forcedViewPosition: Vector3 = definedExternally
    open var _frustumPlanes: Array<Plane> = definedExternally
    open var frustumPlanes: Array<Plane> = definedExternally
    open var requireLightSorting: Boolean = definedExternally
    open var useMaterialMeshMap: Boolean = definedExternally
    open var useClonedMeshhMap: Boolean = definedExternally
    open var _externalData: Any = definedExternally
    open var _uid: Any = definedExternally
    open var _components: Array<ISceneComponent> = definedExternally
    open var _serializableComponents: Array<ISceneSerializableComponent> = definedExternally
    open var _transientComponents: Any = definedExternally
    open var _registerTransientComponents: Any = definedExternally
    open fun _addComponent(component: ISceneComponent): Unit = definedExternally
    open fun _getComponent(name: String): ISceneComponent = definedExternally
    open var _beforeCameraUpdateStage: Stage<() -> Unit> = definedExternally
    open var _beforeClearStage: Stage<() -> Unit> = definedExternally
    open var _gatherRenderTargetsStage: Stage<(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>) -> Unit> = definedExternally
    open var _gatherActiveCameraRenderTargetsStage: Stage<(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>) -> Unit> = definedExternally
    open var _isReadyForMeshStage: Stage<(mesh: AbstractMesh, hardwareInstancedRendering: Boolean) -> Boolean> = definedExternally
    open var _beforeEvaluateActiveMeshStage: Stage<() -> Unit> = definedExternally
    open var _evaluateSubMeshStage: Stage<(mesh: AbstractMesh, subMesh: SubMesh) -> Unit> = definedExternally
    open var _activeMeshStage: Stage<(sourceMesh: AbstractMesh, mesh: AbstractMesh) -> Unit> = definedExternally
    open var _cameraDrawRenderTargetStage: Stage<(camera: Camera) -> Boolean> = definedExternally
    open var _beforeCameraDrawStage: Stage<(camera: Camera) -> Unit> = definedExternally
    open var _beforeRenderTargetDrawStage: Stage<(renderTarget: RenderTargetTexture) -> Unit> = definedExternally
    open var _beforeRenderingGroupDrawStage: Stage<(renderingGroupId: Number) -> Unit> = definedExternally
    open var _beforeRenderingMeshStage: Stage<(mesh: AbstractMesh, subMesh: SubMesh, batch: _InstancesBatch) -> Unit> = definedExternally
    open var _afterRenderingMeshStage: Stage<(mesh: AbstractMesh, subMesh: SubMesh, batch: _InstancesBatch) -> Unit> = definedExternally
    open var _afterRenderingGroupDrawStage: Stage<(renderingGroupId: Number) -> Unit> = definedExternally
    open var _afterCameraDrawStage: Stage<(camera: Camera) -> Unit> = definedExternally
    open var _afterRenderTargetDrawStage: Stage<(renderTarget: RenderTargetTexture) -> Unit> = definedExternally
    open var _afterRenderStage: Stage<() -> Unit> = definedExternally
    open var _pointerMoveStage: Stage<(unTranslatedPointerX: Number, unTranslatedPointerY: Number, pickResult: PickingInfo, isMeshPicked: Boolean, canvas: HTMLCanvasElement) -> PickingInfo> = definedExternally
    open var _pointerDownStage: Stage<(unTranslatedPointerX: Number, unTranslatedPointerY: Number, pickResult: PickingInfo, evt: PointerEvent) -> PickingInfo> = definedExternally
    open var _pointerUpStage: Stage<(unTranslatedPointerX: Number, unTranslatedPointerY: Number, pickResult: PickingInfo, evt: PointerEvent) -> PickingInfo> = definedExternally
    open var geometriesByUniqueId: Any = definedExternally
    open fun getClassName(): String = definedExternally
    open var _defaultMeshCandidates: Any = definedExternally
    open fun _getDefaultMeshCandidates(): ISmartArrayLike<AbstractMesh> = definedExternally
    open var _defaultSubMeshCandidates: Any = definedExternally
    open fun _getDefaultSubMeshCandidates(mesh: AbstractMesh): ISmartArrayLike<SubMesh> = definedExternally
    open fun setDefaultCandidateProviders(): Unit = definedExternally
    open var meshUnderPointer: AbstractMesh = definedExternally
    open var pointerX: Number = definedExternally
    open var pointerY: Number = definedExternally
    open fun getCachedMaterial(): Material = definedExternally
    open fun getCachedEffect(): Effect = definedExternally
    open fun getCachedVisibility(): Number = definedExternally
    open fun isCachedMaterialInvalid(material: Material, effect: Effect, visibility: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun getEngine(): Engine = definedExternally
    open fun getTotalVertices(): Number = definedExternally
    open var totalVerticesPerfCounter: PerfCounter = definedExternally
    open fun getActiveIndices(): Number = definedExternally
    open var totalActiveIndicesPerfCounter: PerfCounter = definedExternally
    open fun getActiveParticles(): Number = definedExternally
    open var activeParticlesPerfCounter: PerfCounter = definedExternally
    open fun getActiveBones(): Number = definedExternally
    open var activeBonesPerfCounter: PerfCounter = definedExternally
    open fun getActiveMeshes(): SmartArray<AbstractMesh> = definedExternally
    open fun getAnimationRatio(): Number = definedExternally
    open fun getRenderId(): Number = definedExternally
    open fun getFrameId(): Number = definedExternally
    open fun incrementRenderId(): Unit = definedExternally
    open var _createUbo: Any = definedExternally
    open fun simulatePointerMove(pickResult: PickingInfo, pointerEventInit: PointerEventInit? = definedExternally /* null */): Scene = definedExternally
    open fun simulatePointerDown(pickResult: PickingInfo, pointerEventInit: PointerEventInit? = definedExternally /* null */): Scene = definedExternally
    open fun simulatePointerUp(pickResult: PickingInfo, pointerEventInit: PointerEventInit? = definedExternally /* null */, doubleTap: Boolean? = definedExternally /* null */): Scene = definedExternally
    open fun isPointerCaptured(pointerId: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun attachControl(attachUp: Boolean? = definedExternally /* null */, attachDown: Boolean? = definedExternally /* null */, attachMove: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun detachControl(): Unit = definedExternally
    open fun isReady(): Boolean = definedExternally
    open fun resetCachedMaterial(): Unit = definedExternally
    open fun registerBeforeRender(func: () -> Unit): Unit = definedExternally
    open fun unregisterBeforeRender(func: () -> Unit): Unit = definedExternally
    open fun registerAfterRender(func: () -> Unit): Unit = definedExternally
    open fun unregisterAfterRender(func: () -> Unit): Unit = definedExternally
    open var _executeOnceBeforeRender: Any = definedExternally
    open fun executeOnceBeforeRender(func: () -> Unit, timeout: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _addPendingData(data: Any): Unit = definedExternally
    open fun _removePendingData(data: Any): Unit = definedExternally
    open fun getWaitingItemsCount(): Number = definedExternally
    open var isLoading: Boolean = definedExternally
    open fun executeWhenReady(func: () -> Unit): Unit = definedExternally
    open fun whenReadyAsync(): Promise<Unit> = definedExternally
    open fun _checkIsReady(): Unit = definedExternally
    open var animatables: Array<Animatable> = definedExternally
    open fun resetLastAnimationTimeFrame(): Unit = definedExternally
    open fun getViewMatrix(): Matrix = definedExternally
    open fun getProjectionMatrix(): Matrix = definedExternally
    open fun getTransformMatrix(): Matrix = definedExternally
    open fun setTransformMatrix(viewL: Matrix, projectionL: Matrix, viewR: Matrix? = definedExternally /* null */, projectionR: Matrix? = definedExternally /* null */): Unit = definedExternally
    open fun getSceneUniformBuffer(): UniformBuffer = definedExternally
    open fun getUniqueId(): Number = definedExternally
    open fun addMesh(newMesh: AbstractMesh, recursive: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun removeMesh(toRemove: AbstractMesh, recursive: Boolean? = definedExternally /* null */): Number = definedExternally
    open fun addTransformNode(newTransformNode: TransformNode): Unit = definedExternally
    open fun removeTransformNode(toRemove: TransformNode): Number = definedExternally
    open fun removeSkeleton(toRemove: Skeleton): Number = definedExternally
    open fun removeMorphTargetManager(toRemove: MorphTargetManager): Number = definedExternally
    open fun removeLight(toRemove: Light): Number = definedExternally
    open fun removeCamera(toRemove: Camera): Number = definedExternally
    open fun removeParticleSystem(toRemove: IParticleSystem): Number = definedExternally
    open fun removeAnimation(toRemove: Animation): Number = definedExternally
    open fun stopAnimation(target: Any, animationName: String? = definedExternally /* null */, targetMask: ((target: Any) -> Boolean)? = definedExternally /* null */): Unit = definedExternally
    open fun removeAnimationGroup(toRemove: AnimationGroup): Number = definedExternally
    open fun removeMultiMaterial(toRemove: MultiMaterial): Number = definedExternally
    open fun removeMaterial(toRemove: Material): Number = definedExternally
    open fun removeActionManager(toRemove: AbstractActionManager): Number = definedExternally
    open fun removeTexture(toRemove: BaseTexture): Number = definedExternally
    open fun addLight(newLight: Light): Unit = definedExternally
    open fun sortLightsByPriority(): Unit = definedExternally
    open fun addCamera(newCamera: Camera): Unit = definedExternally
    open fun addSkeleton(newSkeleton: Skeleton): Unit = definedExternally
    open fun addParticleSystem(newParticleSystem: IParticleSystem): Unit = definedExternally
    open fun addAnimation(newAnimation: Animation): Unit = definedExternally
    open fun addAnimationGroup(newAnimationGroup: AnimationGroup): Unit = definedExternally
    open fun addMultiMaterial(newMultiMaterial: MultiMaterial): Unit = definedExternally
    open fun addMaterial(newMaterial: Material): Unit = definedExternally
    open fun addMorphTargetManager(newMorphTargetManager: MorphTargetManager): Unit = definedExternally
    open fun addGeometry(newGeometry: Geometry): Unit = definedExternally
    open fun addActionManager(newActionManager: AbstractActionManager): Unit = definedExternally
    open fun addTexture(newTexture: BaseTexture): Unit = definedExternally
    open fun switchActiveCamera(newCamera: Camera, attachControl: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setActiveCameraByID(id: String): Camera = definedExternally
    open fun setActiveCameraByName(name: String): Camera = definedExternally
    open fun getAnimationGroupByName(name: String): AnimationGroup = definedExternally
    open fun getMaterialByUniqueID(uniqueId: Number): Material = definedExternally
    open fun getMaterialByID(id: String): Material = definedExternally
    open fun getMaterialByName(name: String): Material = definedExternally
    open fun getCameraByID(id: String): Camera = definedExternally
    open fun getCameraByUniqueID(uniqueId: Number): Camera = definedExternally
    open fun getCameraByName(name: String): Camera = definedExternally
    open fun getBoneByID(id: String): Bone = definedExternally
    open fun getBoneByName(name: String): Bone = definedExternally
    open fun getLightByName(name: String): Light = definedExternally
    open fun getLightByID(id: String): Light = definedExternally
    open fun getLightByUniqueID(uniqueId: Number): Light = definedExternally
    open fun getParticleSystemByID(id: String): IParticleSystem = definedExternally
    open fun getGeometryByID(id: String): Geometry = definedExternally
    open var _getGeometryByUniqueID: Any = definedExternally
    open fun pushGeometry(geometry: Geometry, force: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun removeGeometry(geometry: Geometry): Boolean = definedExternally
    open fun getGeometries(): Array<Geometry> = definedExternally
    open fun getMeshByID(id: String): AbstractMesh = definedExternally
    open fun getMeshesByID(id: String): Array<AbstractMesh> = definedExternally
    open fun getTransformNodeByID(id: String): TransformNode = definedExternally
    open fun getTransformNodeByUniqueID(uniqueId: Number): TransformNode = definedExternally
    open fun getTransformNodesByID(id: String): Array<TransformNode> = definedExternally
    open fun getMeshByUniqueID(uniqueId: Number): AbstractMesh = definedExternally
    open fun getLastMeshByID(id: String): AbstractMesh = definedExternally
    open fun getLastEntryByID(id: String): Node = definedExternally
    open fun getNodeByID(id: String): Node = definedExternally
    open fun getNodeByName(name: String): Node = definedExternally
    open fun getMeshByName(name: String): AbstractMesh = definedExternally
    open fun getTransformNodeByName(name: String): TransformNode = definedExternally
    open fun getLastSkeletonByID(id: String): Skeleton = definedExternally
    open fun getSkeletonByUniqueId(uniqueId: Number): Skeleton = definedExternally
    open fun getSkeletonById(id: String): Skeleton = definedExternally
    open fun getSkeletonByName(name: String): Skeleton = definedExternally
    open fun getMorphTargetManagerById(id: Number): MorphTargetManager = definedExternally
    open fun getMorphTargetById(id: String): MorphTarget = definedExternally
    open fun isActiveMesh(mesh: AbstractMesh): Boolean = definedExternally
    open var uid: String = definedExternally
    open fun <T> addExternalData(key: String, data: T): Boolean = definedExternally
    open fun <T> getExternalData(key: String): T = definedExternally
    open fun <T> getOrAddExternalDataWithFactory(key: String, factory: (k: String) -> T): T = definedExternally
    open fun removeExternalData(key: String): Boolean = definedExternally
    open var _evaluateSubMesh: Any = definedExternally
    open fun freeProcessedMaterials(): Unit = definedExternally
    open var _preventFreeActiveMeshesAndRenderingGroups: Any = definedExternally
    open var blockfreeActiveMeshesAndRenderingGroups: Boolean = definedExternally
    open fun freeActiveMeshes(): Unit = definedExternally
    open fun freeRenderingGroups(): Unit = definedExternally
    open fun _isInIntermediateRendering(): Boolean = definedExternally
    open var getActiveMeshCandidates: () -> ISmartArrayLike<AbstractMesh> = definedExternally
    open var getActiveSubMeshCandidates: (mesh: AbstractMesh) -> ISmartArrayLike<SubMesh> = definedExternally
    open var getIntersectingSubMeshCandidates: (mesh: AbstractMesh, localRay: Ray) -> ISmartArrayLike<SubMesh> = definedExternally
    open var getCollidingSubMeshCandidates: (mesh: AbstractMesh, collider: Collider) -> ISmartArrayLike<SubMesh> = definedExternally
    open var _activeMeshesFrozen: Any = definedExternally
    open fun freezeActiveMeshes(): Scene = definedExternally
    open fun unfreezeActiveMeshes(): Scene = definedExternally
    open var _evaluateActiveMeshes: Any = definedExternally
    open var _activeMesh: Any = definedExternally
    open fun updateTransformMatrix(force: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _bindFrameBuffer: Any = definedExternally
    open var _allowPostProcessClearColor: Boolean = definedExternally
    open fun _renderForCamera(camera: Camera, rigParent: Camera? = definedExternally /* null */): Unit = definedExternally
    open var _processSubCameras: Any = definedExternally
    open var _checkIntersections: Any = definedExternally
    open fun _advancePhysicsEngineStep(step: Number): Unit = definedExternally
    open var getDeterministicFrameTime: () -> Number = definedExternally
    open fun _animate(): Unit = definedExternally
    open fun animate(): Unit = definedExternally
    open fun render(updateCameras: Boolean? = definedExternally /* null */, ignoreAnimations: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun freezeMaterials(): Unit = definedExternally
    open fun unfreezeMaterials(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open var isDisposed: Boolean = definedExternally
    open fun clearCachedVertexData(): Unit = definedExternally
    open fun cleanCachedTextureBuffer(): Unit = definedExternally
    open fun getWorldExtends(filterPredicate: ((mesh: AbstractMesh) -> Boolean)? = definedExternally /* null */): `T$71` = definedExternally
    open fun createPickingRay(x: Number, y: Number, world: Matrix, camera: Camera, cameraViewSpace: Boolean? = definedExternally /* null */): Ray = definedExternally
    open fun createPickingRayToRef(x: Number, y: Number, world: Matrix, result: Ray, camera: Camera, cameraViewSpace: Boolean? = definedExternally /* null */): Scene = definedExternally
    open fun createPickingRayInCameraSpace(x: Number, y: Number, camera: Camera? = definedExternally /* null */): Ray = definedExternally
    open fun createPickingRayInCameraSpaceToRef(x: Number, y: Number, result: Ray, camera: Camera? = definedExternally /* null */): Scene = definedExternally
    open fun pick(x: Number, y: Number, predicate: ((mesh: AbstractMesh) -> Boolean)? = definedExternally /* null */, fastCheck: Boolean? = definedExternally /* null */, camera: Camera? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3) -> Boolean)? = definedExternally /* null */): PickingInfo = definedExternally
    open fun pickWithRay(ray: Ray, predicate: ((mesh: AbstractMesh) -> Boolean)? = definedExternally /* null */, fastCheck: Boolean? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): PickingInfo = definedExternally
    open fun multiPick(x: Number, y: Number, predicate: ((mesh: AbstractMesh) -> Boolean)? = definedExternally /* null */, camera: Camera? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): Array<PickingInfo> = definedExternally
    open fun multiPickWithRay(ray: Ray, predicate: (mesh: AbstractMesh) -> Boolean, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): Array<PickingInfo> = definedExternally
    open fun setPointerOverMesh(mesh: AbstractMesh): Unit = definedExternally
    open fun getPointerOverMesh(): AbstractMesh = definedExternally
    open fun _rebuildGeometries(): Unit = definedExternally
    open fun _rebuildTextures(): Unit = definedExternally
    open var _getByTags: Any = definedExternally
    open fun getMeshesByTags(tagsQuery: String, forEach: ((mesh: AbstractMesh) -> Unit)? = definedExternally /* null */): Array<Mesh> = definedExternally
    open fun getCamerasByTags(tagsQuery: String, forEach: ((camera: Camera) -> Unit)? = definedExternally /* null */): Array<Camera> = definedExternally
    open fun getLightsByTags(tagsQuery: String, forEach: ((light: Light) -> Unit)? = definedExternally /* null */): Array<Light> = definedExternally
    open fun getMaterialByTags(tagsQuery: String, forEach: ((material: Material) -> Unit)? = definedExternally /* null */): Array<Material> = definedExternally
    open fun setRenderingOrder(renderingGroupId: Number, opaqueSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, alphaTestSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, transparentSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */): Unit = definedExternally
    open fun setRenderingAutoClearDepthStencil(renderingGroupId: Number, autoClearDepthStencil: Boolean, depth: Boolean? = definedExternally /* null */, stencil: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getAutoClearDepthStencilSetup(index: Number): IRenderingManagerAutoClearSetup = definedExternally
    open var _blockMaterialDirtyMechanism: Any = definedExternally
    open var blockMaterialDirtyMechanism: Boolean = definedExternally
    open fun markAllMaterialsAsDirty(flag: Number, predicate: ((mat: Material) -> Boolean)? = definedExternally /* null */): Unit = definedExternally
    open fun _loadFile(url: String, onSuccess: (data: dynamic /* String | ArrayBuffer */, responseURL: String? /*= null*/) -> Unit, onProgress: ((data: Any) -> Unit)? = definedExternally /* null */, useOfflineSupport: Boolean? = definedExternally /* null */, useArrayBuffer: Boolean? = definedExternally /* null */, onError: ((request: WebRequest? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */): IFileRequest = definedExternally
    open fun _loadFileAsync(url: String, useOfflineSupport: Boolean? = definedExternally /* null */, useArrayBuffer: Boolean? = definedExternally /* null */): Promise<dynamic /* String | ArrayBuffer */> = definedExternally
    companion object {
        var _uniqueIdCounter: Any = definedExternally
        var FOGMODE_NONE: Number = definedExternally
        var FOGMODE_EXP: Number = definedExternally
        var FOGMODE_EXP2: Number = definedExternally
        var FOGMODE_LINEAR: Number = definedExternally
        var MinDeltaTime: Number = definedExternally
        var MaxDeltaTime: Number = definedExternally
        fun DefaultMaterialFactory(scene: Scene): Material = definedExternally
        fun CollisionCoordinatorFactory(): ICollisionCoordinator = definedExternally
        var DragMovementThreshold: Number = definedExternally
        var LongPressDelay: Number = definedExternally
        var DoubleClickDelay: Number = definedExternally
        var ExclusiveDoubleClickMode: Boolean = definedExternally
    }
    var _tempPickingRay: Ray
    var _cachedRayForTransform: Ray
    var _pickWithRayInverseMatrix: Matrix
    fun _internalPick(rayFunction: (world: Matrix) -> Ray, predicate: ((mesh: AbstractMesh) -> Boolean)? = definedExternally /* null */, fastCheck: Boolean? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): PickingInfo
    fun _internalMultiPick(rayFunction: (world: Matrix) -> Ray, predicate: ((mesh: AbstractMesh) -> Boolean)? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): Array<PickingInfo>
    var _pointerOverSprite: Sprite
    var _pickedDownSprite: Sprite
    var _tempSpritePickingRay: Ray
    var spriteManagers: Array<ISpriteManager>
    var onBeforeSpritesRenderingObservable: Observable<Scene>
    var onAfterSpritesRenderingObservable: Observable<Scene>
    fun _internalPickSprites(ray: Ray, predicate: ((sprite: Sprite) -> Boolean)? = definedExternally /* null */, fastCheck: Boolean? = definedExternally /* null */, camera: Camera? = definedExternally /* null */): PickingInfo
    fun pickSprite(x: Number, y: Number, predicate: ((sprite: Sprite) -> Boolean)? = definedExternally /* null */, fastCheck: Boolean? = definedExternally /* null */, camera: Camera? = definedExternally /* null */): PickingInfo
    fun pickSpriteWithRay(ray: Ray, predicate: ((sprite: Sprite) -> Boolean)? = definedExternally /* null */, fastCheck: Boolean? = definedExternally /* null */, camera: Camera? = definedExternally /* null */): PickingInfo
    fun setPointerOverSprite(sprite: Sprite)
    fun getPointerOverSprite(): Sprite
    var _transformMatrixR: Matrix
    var _multiviewSceneUbo: UniformBuffer
    fun _createMultiviewUbo()
    fun _updateMultiviewUbo(viewR: Matrix? = definedExternally /* null */, projectionR: Matrix? = definedExternally /* null */)
    fun _renderMultiviewToSingleView(camera: Camera)
    fun _registerTargetForLateAnimationBinding(runtimeAnimation: RuntimeAnimation, originalValue: Any)
    fun _processLateAnimationBindingsForMatrices(holder: `T$14`): Any
    fun _processLateAnimationBindingsForQuaternions(holder: `T$15`, refQuaternion: Quaternion): Quaternion
    fun _processLateAnimationBindings()
    fun beginWeightedAnimation(target: Any, from: Number, to: Number, weight: Number, loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */, animatable: Animatable? = definedExternally /* null */, targetMask: ((target: Any) -> Boolean)? = definedExternally /* null */, onAnimationLoop: (() -> Unit)? = definedExternally /* null */): Animatable
    fun beginAnimation(target: Any, from: Number, to: Number, loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */, animatable: Animatable? = definedExternally /* null */, stopCurrent: Boolean? = definedExternally /* null */, targetMask: ((target: Any) -> Boolean)? = definedExternally /* null */, onAnimationLoop: (() -> Unit)? = definedExternally /* null */): Animatable
    fun beginHierarchyAnimation(target: Any, directDescendantsOnly: Boolean, from: Number, to: Number, loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */, animatable: Animatable? = definedExternally /* null */, stopCurrent: Boolean? = definedExternally /* null */, targetMask: ((target: Any) -> Boolean)? = definedExternally /* null */, onAnimationLoop: (() -> Unit)? = definedExternally /* null */): Array<Animatable>
    fun beginDirectAnimation(target: Any, animations: Array<Animation>, from: Number, to: Number, loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */, onAnimationLoop: (() -> Unit)? = definedExternally /* null */): Animatable
    fun beginDirectHierarchyAnimation(target: Node, directDescendantsOnly: Boolean, animations: Array<Animation>, from: Number, to: Number, loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */, onAnimationLoop: (() -> Unit)? = definedExternally /* null */): Array<Animatable>
    fun getAnimatableByTarget(target: Any): Animatable
    fun getAllAnimatablesByTarget(target: Any): Array<Animatable>
    fun stopAllAnimations()
    var _mainSoundTrack: SoundTrack
    var mainSoundTrack: SoundTrack
    var soundTracks: Array<SoundTrack>
    fun getSoundByName(name: String): Sound
    var audioEnabled: Boolean
    var headphone: Boolean
    var _gamepadManager: GamepadManager
    var gamepadManager: GamepadManager
    var _selectionOctree: Octree<AbstractMesh>
    var selectionOctree: Octree<AbstractMesh>
    fun createOrUpdateSelectionOctree(maxCapacity: Number? = definedExternally /* null */, maxDepth: Number? = definedExternally /* null */): Octree<AbstractMesh>
    var _debugLayer: DebugLayer
    var debugLayer: DebugLayer
    fun createDefaultLight(replace: Boolean? = definedExternally /* null */)
    fun createDefaultCamera(createArcRotateCamera: Boolean? = definedExternally /* null */, replace: Boolean? = definedExternally /* null */, attachCameraControls: Boolean? = definedExternally /* null */)
    fun createDefaultCameraOrLight(createArcRotateCamera: Boolean? = definedExternally /* null */, replace: Boolean? = definedExternally /* null */, attachCameraControls: Boolean? = definedExternally /* null */)
    fun createDefaultSkybox(environmentTexture: BaseTexture? = definedExternally /* null */, pbr: Boolean? = definedExternally /* null */, scale: Number? = definedExternally /* null */, blur: Number? = definedExternally /* null */, setGlobalEnvTexture: Boolean? = definedExternally /* null */): Mesh
    fun createDefaultEnvironment(options: Any? = definedExternally /* null */): EnvironmentHelper
    fun createDefaultVRExperience(webVROptions: VRExperienceHelperOptions? = definedExternally /* null */): VRExperienceHelper
    fun createDefaultXRExperienceAsync(): Promise<WebXRExperienceHelper>
    var _simplificationQueue: SimplificationQueue
    var simplificationQueue: SimplificationQueue
    var _physicsEngine: IPhysicsEngine
    fun getPhysicsEngine(): IPhysicsEngine
    fun enablePhysics(gravity: Vector3, plugin: IPhysicsEnginePlugin? = definedExternally /* null */): Boolean
    fun disablePhysicsEngine()
    fun isPhysicsEnabled(): Boolean
    fun deleteCompoundImpostor(compound: Any)
    var onBeforePhysicsObservable: Observable<Scene>
    var onAfterPhysicsObservable: Observable<Scene>
    var _geometryBufferRenderer: GeometryBufferRenderer
    var geometryBufferRenderer: GeometryBufferRenderer
    fun enableGeometryBufferRenderer(ratio: Number? = definedExternally /* null */): GeometryBufferRenderer
    fun disableGeometryBufferRenderer()
    var _postProcessRenderPipelineManager: PostProcessRenderPipelineManager
    var postProcessRenderPipelineManager: PostProcessRenderPipelineManager
    var _boundingBoxRenderer: BoundingBoxRenderer
    var _forceShowBoundingBoxes: Boolean
    var forceShowBoundingBoxes: Boolean
    fun getBoundingBoxRenderer(): BoundingBoxRenderer
    var _depthRenderer: `T$147`
    fun enableDepthRenderer(camera: Camera? = definedExternally /* null */): DepthRenderer
    fun disableDepthRenderer(camera: Camera? = definedExternally /* null */)
    var _outlineRenderer: OutlineRenderer
    fun getOutlineRenderer(): OutlineRenderer
}
external open class SceneComponentConstants {
    companion object {
        var NAME_EFFECTLAYER: String = definedExternally
        var NAME_LAYER: String = definedExternally
        var NAME_LENSFLARESYSTEM: String = definedExternally
        var NAME_BOUNDINGBOXRENDERER: String = definedExternally
        var NAME_PARTICLESYSTEM: String = definedExternally
        var NAME_GAMEPAD: String = definedExternally
        var NAME_SIMPLIFICATIONQUEUE: String = definedExternally
        var NAME_GEOMETRYBUFFERRENDERER: String = definedExternally
        var NAME_DEPTHRENDERER: String = definedExternally
        var NAME_POSTPROCESSRENDERPIPELINEMANAGER: String = definedExternally
        var NAME_SPRITE: String = definedExternally
        var NAME_OUTLINERENDERER: String = definedExternally
        var NAME_PROCEDURALTEXTURE: String = definedExternally
        var NAME_SHADOWGENERATOR: String = definedExternally
        var NAME_OCTREE: String = definedExternally
        var NAME_PHYSICSENGINE: String = definedExternally
        var NAME_AUDIO: String = definedExternally
        var STEP_ISREADYFORMESH_EFFECTLAYER: Number = definedExternally
        var STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER: Number = definedExternally
        var STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER: Number = definedExternally
        var STEP_ACTIVEMESH_BOUNDINGBOXRENDERER: Number = definedExternally
        var STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER: Number = definedExternally
        var STEP_BEFORECAMERADRAW_EFFECTLAYER: Number = definedExternally
        var STEP_BEFORECAMERADRAW_LAYER: Number = definedExternally
        var STEP_BEFORERENDERTARGETDRAW_LAYER: Number = definedExternally
        var STEP_BEFORERENDERINGMESH_OUTLINE: Number = definedExternally
        var STEP_AFTERRENDERINGMESH_OUTLINE: Number = definedExternally
        var STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW: Number = definedExternally
        var STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER: Number = definedExternally
        var STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE: Number = definedExternally
        var STEP_BEFORECAMERAUPDATE_GAMEPAD: Number = definedExternally
        var STEP_BEFORECLEAR_PROCEDURALTEXTURE: Number = definedExternally
        var STEP_AFTERRENDERTARGETDRAW_LAYER: Number = definedExternally
        var STEP_AFTERCAMERADRAW_EFFECTLAYER: Number = definedExternally
        var STEP_AFTERCAMERADRAW_LENSFLARESYSTEM: Number = definedExternally
        var STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW: Number = definedExternally
        var STEP_AFTERCAMERADRAW_LAYER: Number = definedExternally
        var STEP_AFTERRENDER_AUDIO: Number = definedExternally
        var STEP_GATHERRENDERTARGETS_SHADOWGENERATOR: Number = definedExternally
        var STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER: Number = definedExternally
        var STEP_GATHERRENDERTARGETS_DEPTHRENDERER: Number = definedExternally
        var STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER: Number = definedExternally
        var STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER: Number = definedExternally
        var STEP_POINTERMOVE_SPRITE: Number = definedExternally
        var STEP_POINTERDOWN_SPRITE: Number = definedExternally
        var STEP_POINTERUP_SPRITE: Number = definedExternally
    }
}
external interface ISceneComponent {
    var name: String
    var scene: Scene
    fun register()
    fun rebuild()
    fun dispose()
}
external interface ISceneSerializableComponent : ISceneComponent {
    fun addFromContainer(container: AbstractScene)
    fun removeFromContainer(container: AbstractScene, dispose: Boolean? = definedExternally /* null */)
    fun serialize(serializationObject: Any)
}
external interface `T$4` {
    var index: Number
    var component: ISceneComponent
    var action: Any?
}
external open class Stage<T : Function<*>> : WriteableArray<`T$4`> {
    open fun registerStep(index: Number, component: ISceneComponent, action: T): Unit = definedExternally
    open fun clear(): Unit = definedExternally
    companion object {
        fun <T : Function<*>> Create(): Stage<T> = definedExternally
    }
}
external open class SpriteSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    open var _spritePredicate: Any = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _pickSpriteButKeepRay: Any = definedExternally
    open var _pointerMove: Any = definedExternally
    open var _pointerDown: Any = definedExternally
    open var _pointerUp: Any = definedExternally
}
external object fogFragmentDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object fogFragment {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object spritesPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object fogVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object spritesVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface ISpriteManager : IDisposable {
    var layerMask: Number
    var isPickable: Boolean
    var renderingGroupId: Number
    var sprites: Array<Sprite>
    fun intersects(ray: Ray, camera: Camera, predicate: ((sprite: Sprite) -> Boolean)? = definedExternally /* null */, fastCheck: Boolean? = definedExternally /* null */): PickingInfo
    fun render()
}
external open class SpriteManager(name: String, imgUrl: String, capacity: Number, cellSize: Any, scene: Scene, epsilon: Number? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */) : ISpriteManager {
    open var name: String = definedExternally
    override var sprites: Array<Sprite> = definedExternally
    override var renderingGroupId: Number = definedExternally
    override var layerMask: Number = definedExternally
    open var fogEnabled: Boolean = definedExternally
    override var isPickable: Boolean = definedExternally
    open var cellWidth: Number = definedExternally
    open var cellHeight: Number = definedExternally
    open var onDisposeObservable: Observable<SpriteManager> = definedExternally
    open var _onDisposeObserver: Any = definedExternally
    open var onDispose: () -> Unit = definedExternally
    open var _capacity: Any = definedExternally
    open var _spriteTexture: Any = definedExternally
    open var _epsilon: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _vertexData: Any = definedExternally
    open var _buffer: Any = definedExternally
    open var _vertexBuffers: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _effectBase: Any = definedExternally
    open var _effectFog: Any = definedExternally
    open var texture: Texture = definedExternally
    open var _appendSpriteVertex: Any = definedExternally
	override fun intersects(ray: Ray, camera: Camera, predicate: ((sprite: Sprite) -> Boolean)?  /* null */, fastCheck: Boolean?  /* null */): PickingInfo = definedExternally
    override fun render(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class Sprite(name: String, manager: ISpriteManager) {
    open var name: String = definedExternally
    open var position: Vector3 = definedExternally
    open var color: Color4 = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var angle: Number = definedExternally
    open var cellIndex: Number = definedExternally
    open var invertU: Number = definedExternally
    open var invertV: Number = definedExternally
    open var disposeWhenFinishedAnimating: Boolean = definedExternally
    open var animations: Array<Animation> = definedExternally
    open var isPickable: Boolean = definedExternally
    open var actionManager: ActionManager = definedExternally
    open var _animationStarted: Any = definedExternally
    open var _loopAnimation: Any = definedExternally
    open var _fromIndex: Any = definedExternally
    open var _toIndex: Any = definedExternally
    open var _delay: Any = definedExternally
    open var _direction: Any = definedExternally
    open var _manager: Any = definedExternally
    open var _time: Any = definedExternally
    open var _onAnimationEnd: Any = definedExternally
    open var isVisible: Boolean = definedExternally
    open var size: Number = definedExternally
    open fun playAnimation(from: Number, to: Number, loop: Boolean, delay: Number, onAnimationEnd: () -> Unit): Unit = definedExternally
    open fun stopAnimation(): Unit = definedExternally
    open fun _animate(deltaTime: Number): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
}
external open class PickingInfo {
    open var _pickingUnavailable: Boolean = definedExternally
    open var hit: Boolean = definedExternally
    open var distance: Number = definedExternally
    open var pickedPoint: Vector3 = definedExternally
    open var pickedMesh: AbstractMesh = definedExternally
    open var bu: Number = definedExternally
    open var bv: Number = definedExternally
    open var faceId: Number = definedExternally
    open var subMeshId: Number = definedExternally
    open var pickedSprite: Sprite = definedExternally
    open var originMesh: AbstractMesh = definedExternally
    open var ray: Ray = definedExternally
    open fun getNormal(useWorldCoordinates: Boolean? = definedExternally /* null */, useVerticesNormals: Boolean? = definedExternally /* null */): Vector3 = definedExternally
    open fun getTextureCoordinates(): Vector2 = definedExternally
}
external open class PointerEventTypes {
    companion object {
        var POINTERDOWN: Number = definedExternally
        var POINTERUP: Number = definedExternally
        var POINTERMOVE: Number = definedExternally
        var POINTERWHEEL: Number = definedExternally
        var POINTERPICK: Number = definedExternally
        var POINTERTAP: Number = definedExternally
        var POINTERDOUBLETAP: Number = definedExternally
    }
}
external open class PointerInfoBase {
    constructor(type: Number, event: PointerEvent)
    constructor(type: Number, event: WheelEvent)
    open var type: Number = definedExternally
    open var event: dynamic /* PointerEvent | WheelEvent */ = definedExternally
}
external open class PointerInfoPre : PointerInfoBase {
    constructor(type: Number, event: PointerEvent, localX: Number, localY: Number)
    constructor(type: Number, event: WheelEvent, localX: Number, localY: Number)
    open var ray: Ray = definedExternally
    open var localPosition: Vector2 = definedExternally
    open var skipOnPointerObservable: Boolean = definedExternally
}
external open class PointerInfo : PointerInfoBase {
    constructor(type: Number, event: PointerEvent, pickInfo: PickingInfo)
    constructor(type: Number, event: WheelEvent, pickInfo: PickingInfo)
    open var pickInfo: PickingInfo = definedExternally
}
external interface PointerTouch {
    var x: Number
    var y: Number
    var pointerId: Number
    var type: Any
}
external interface `T$5` {
    var offsetX: Number
    var offsetY: Number
}
external open class FreeCameraMouseInput(touchEnabled: Boolean? = definedExternally /* null */) : ICameraInput<FreeCamera> {
    open var touchEnabled: Boolean = definedExternally
    override var camera: FreeCamera = definedExternally
    open var buttons: Array<Number> = definedExternally
    open var angularSensibility: Number = definedExternally
    open var _pointerInput: Any = definedExternally
    open var _onMouseMove: Any = definedExternally
    open var _observer: Any = definedExternally
    open var previousPosition: Any = definedExternally
    open var onPointerMovedObservable: Observable<`T$5`> = definedExternally
    open var _allowCameraRotation: Boolean = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    open fun onContextMenu(evt: PointerEvent): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class FreeCameraTouchInput : ICameraInput<FreeCamera> {
    override var camera: FreeCamera = definedExternally
    open var touchAngularSensibility: Number = definedExternally
    open var touchMoveSensibility: Number = definedExternally
    open var _offsetX: Any = definedExternally
    open var _offsetY: Any = definedExternally
    open var _pointerPressed: Any = definedExternally
    open var _pointerInput: Any = definedExternally
    open var _observer: Any = definedExternally
    open var _onLostFocus: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class FreeCameraInputsManager(camera: FreeCamera) : CameraInputsManager<FreeCamera> {
    open var _mouseInput: FreeCameraMouseInput = definedExternally
    open fun addKeyboard(): FreeCameraInputsManager = definedExternally
    open fun addMouse(touchEnabled: Boolean? = definedExternally /* null */): FreeCameraInputsManager = definedExternally
    open fun removeMouse(): FreeCameraInputsManager = definedExternally
    open fun addTouch(): FreeCameraInputsManager = definedExternally
    override fun clear(): Unit = definedExternally
    var _deviceOrientationInput: FreeCameraDeviceOrientationInput
    fun addDeviceOrientation(): FreeCameraInputsManager
    fun addVirtualJoystick(): FreeCameraInputsManager
    fun addGamepad(): FreeCameraInputsManager
}
external open class FreeCamera(name: String, position: Vector3, scene: Scene, setActiveOnSceneIfNoneActive: Boolean? = definedExternally /* null */) : TargetCamera {
    open var ellipsoid: Vector3 = definedExternally
    open var ellipsoidOffset: Vector3 = definedExternally
    open var checkCollisions: Boolean = definedExternally
    open var applyGravity: Boolean = definedExternally
    open var angularSensibility: Number = definedExternally
    open var keysUp: Array<Number> = definedExternally
    open var keysDown: Array<Number> = definedExternally
    open var keysLeft: Array<Number> = definedExternally
    open var keysRight: Array<Number> = definedExternally
    open var onCollide: (collidedMesh: AbstractMesh) -> Unit = definedExternally
    open var _collider: Any = definedExternally
    open var _needMoveForGravity: Any = definedExternally
    open var _oldPosition: Any = definedExternally
    open var _diffPosition: Any = definedExternally
    open var _newPosition: Any = definedExternally
    open var _localDirection: Vector3 = definedExternally
    open var _transformedDirection: Vector3 = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open var _collisionMask: Any = definedExternally
    open var collisionMask: Number = definedExternally
    open fun _collideWithWorld(displacement: Vector3): Unit = definedExternally
    open var _onCollisionPositionChange: Any = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    override fun _decideIfNeedsToMove(): Boolean = definedExternally
    override fun _updatePosition(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
}
external open class StickValues(x: Number, y: Number) {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
}
external interface GamepadButtonChanges {
    var changed: Boolean
    var pressChanged: Boolean
    var touchChanged: Boolean
    var valueChanged: Boolean
}
external open class Gamepad(id: String, index: Number, browserGamepad: Any, leftStickX: Number? = definedExternally /* null */, leftStickY: Number? = definedExternally /* null */, rightStickX: Number? = definedExternally /* null */, rightStickY: Number? = definedExternally /* null */) {
    open var id: String = definedExternally
    open var index: Number = definedExternally
    open var browserGamepad: Any = definedExternally
    open var type: Number = definedExternally
    open var _leftStick: Any = definedExternally
    open var _rightStick: Any = definedExternally
    open var _isConnected: Boolean = definedExternally
    open var _leftStickAxisX: Any = definedExternally
    open var _leftStickAxisY: Any = definedExternally
    open var _rightStickAxisX: Any = definedExternally
    open var _rightStickAxisY: Any = definedExternally
    open var _onleftstickchanged: Any = definedExternally
    open var _onrightstickchanged: Any = definedExternally
    open var _invertLeftStickY: Boolean = definedExternally
    open var isConnected: Boolean = definedExternally
    open fun onleftstickchanged(callback: (values: StickValues) -> Unit): Unit = definedExternally
    open fun onrightstickchanged(callback: (values: StickValues) -> Unit): Unit = definedExternally
    open var leftStick: StickValues = definedExternally
    open var rightStick: StickValues = definedExternally
    open fun update(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        var GAMEPAD: Number = definedExternally
        var GENERIC: Number = definedExternally
        var XBOX: Number = definedExternally
        var POSE_ENABLED: Number = definedExternally
    }
}
external open class GenericPad(id: String, index: Number, browserGamepad: Any) : Gamepad {
    open var _buttons: Any = definedExternally
    open var _onbuttondown: Any = definedExternally
    open var _onbuttonup: Any = definedExternally
    open var onButtonDownObservable: Observable<Number> = definedExternally
    open var onButtonUpObservable: Observable<Number> = definedExternally
    open fun onbuttondown(callback: (buttonPressed: Number) -> Unit): Unit = definedExternally
    open fun onbuttonup(callback: (buttonReleased: Number) -> Unit): Unit = definedExternally
    open var _setButtonValue: Any = definedExternally
    override fun update(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
}
external enum class PoseEnabledControllerType {
    VIVE /* = 0 */,
    OCULUS /* = 1 */,
    WINDOWS /* = 2 */,
    GEAR_VR /* = 3 */,
    DAYDREAM /* = 4 */,
    GENERIC /* = 5 */
}
external interface MutableGamepadButton {
    var value: Number
    var touched: Boolean
    var pressed: Boolean
}
external interface ExtendedGamepadButton : GamepadButton {
    var pressed: Boolean
    var touched: Boolean
    var value: Number
}
external interface _GamePadFactory {
    fun canCreate(gamepadInfo: Any): Boolean
    fun create(gamepadInfo: Any): Gamepad
}
external open class PoseEnabledControllerHelper {
    companion object {
        var _ControllerFactories: Array<_GamePadFactory> = definedExternally
        var _DefaultControllerFactory: (gamepadInfo: Any) -> Gamepad = definedExternally
        fun InitiateController(vrGamepad: Any): Gamepad = definedExternally
    }
}
external open class PoseEnabledController(browserGamepad: Any) : Gamepad, PoseControlled {
    open var _deviceRoomPosition: Any = definedExternally
    open var _deviceRoomRotationQuaternion: Any = definedExternally
    override var deviceRotationQuaternion: Quaternion = definedExternally
    override var deviceScaleFactor: Number = definedExternally
    override var position: Vector3 = definedExternally
    override var rotationQuaternion: Quaternion = definedExternally
    open var controllerType: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
    open var _calculatedPosition: Vector3 = definedExternally
    open var _calculatedRotation: Any = definedExternally
    override var rawPose: DevicePose = definedExternally
    open var _trackPosition: Any = definedExternally
    open var _maxRotationDistFromHeadset: Any = definedExternally
    open var _draggedRoomRotation: Any = definedExternally
    open fun _disableTrackPosition(fixedPosition: Vector3): Unit = definedExternally
    open var _mesh: AbstractMesh = definedExternally
    open var _poseControlledCamera: Any = definedExternally
    open var _leftHandSystemQuaternion: Any = definedExternally
    open var _deviceToWorld: Matrix = definedExternally
    open var _pointingPoseNode: TransformNode = definedExternally
    open var _workingMatrix: Any = definedExternally
    override fun update(): Unit = definedExternally
    open fun _updatePoseAndMesh(): Unit = definedExternally
    override fun updateFromDevice(poseData: DevicePose): Unit = definedExternally
    open var _meshAttachedObservable: Observable<AbstractMesh> = definedExternally
    open fun attachToMesh(mesh: AbstractMesh): Unit = definedExternally
    open fun attachToPoseControlledCamera(camera: TargetCamera): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var mesh: AbstractMesh = definedExternally
    open fun getForwardRay(length: Number? = definedExternally /* null */): Ray = definedExternally
    companion object {
        var POINTING_POSE: String = definedExternally
    }
}
external open class WebVRController(vrGamepad: Any) : PoseEnabledController {
    open var _defaultModel: AbstractMesh = definedExternally
    open var onTriggerStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onMainButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onSecondaryButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onPadStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onPadValuesChangedObservable: Observable<StickValues> = definedExternally
    open var _buttons: Array<MutableGamepadButton> = definedExternally
    open var _onButtonStateChange: Any = definedExternally
    open fun onButtonStateChange(callback: (controlledIndex: Number, buttonIndex: Number, state: ExtendedGamepadButton) -> Unit): Unit = definedExternally
    open var pad: StickValues = definedExternally
    open var hand: String = definedExternally
    open var defaultModel: AbstractMesh = definedExternally
    override fun update(): Unit = definedExternally
    open fun _handleButtonChange(buttonIdx: Number, value: ExtendedGamepadButton, changes: GamepadButtonChanges): Unit = definedExternally
    open fun initControllerMesh(scene: Scene, meshLoaded: ((mesh: AbstractMesh) -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open var _setButtonValue: Any = definedExternally
    open var _changes: Any = definedExternally
    open var _checkChanges: Any = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class HemisphericLight(name: String, direction: Vector3, scene: Scene) : Light {
    open var groundColor: Color3 = definedExternally
    open var direction: Vector3 = definedExternally
    override fun _buildUniformLayout(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    open fun setDirectionToTarget(target: Vector3): Vector3 = definedExternally
    override fun getShadowGenerator(): IShadowGenerator = definedExternally
    override fun transferToEffect(effect: Effect, lightIndex: String): HemisphericLight = definedExternally
    open fun computeWorldMatrix(): Matrix = definedExternally
    override fun getTypeID(): Number = definedExternally
    override fun prepareLightSpecificDefines(defines: Any, lightIndex: Number): Unit = definedExternally
}
external object vrMultiviewToSingleviewPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface `T$6` {
    var width: Number
    var height: Number
}
external interface `T$7` {
    var ratio: Number
}
external open class MultiviewRenderTarget : RenderTargetTexture {
    constructor(scene: Scene, size: Number? = definedExternally /* null */)
    constructor(scene: Scene, size: `T$6`? = definedExternally /* null */)
    constructor(scene: Scene, size: `T$7`? = definedExternally /* null */)
    override fun _bindFrameBuffer(faceIndex: Number?): Unit = definedExternally
    override fun getViewCount(): Number = definedExternally
}
external open class Camera(name: String, position: Vector3, scene: Scene, setActiveOnSceneIfNoneActive: Boolean? = definedExternally /* null */) : Node {
    open var inputs: CameraInputsManager<Camera> = definedExternally
    open var _position: Vector3 = definedExternally
    open var position: Vector3 = definedExternally
    open var upVector: Vector3 = definedExternally
    open var orthoLeft: Number = definedExternally
    open var orthoRight: Number = definedExternally
    open var orthoBottom: Number = definedExternally
    open var orthoTop: Number = definedExternally
    open var fov: Number = definedExternally
    open var minZ: Number = definedExternally
    open var maxZ: Number = definedExternally
    open var inertia: Number = definedExternally
    open var mode: Number = definedExternally
    open var isIntermediate: Boolean = definedExternally
    open var viewport: Viewport = definedExternally
    open var layerMask: Number = definedExternally
    open var fovMode: Number = definedExternally
    open var cameraRigMode: Number = definedExternally
    open var interaxialDistance: Number = definedExternally
    open var isStereoscopicSideBySide: Boolean = definedExternally
    open var customRenderTargets: Array<RenderTargetTexture> = definedExternally
    open var outputRenderTarget: RenderTargetTexture = definedExternally
    open var onViewMatrixChangedObservable: Observable<Camera> = definedExternally
    open var onProjectionMatrixChangedObservable: Observable<Camera> = definedExternally
    open var onAfterCheckInputsObservable: Observable<Camera> = definedExternally
    open var onRestoreStateObservable: Observable<Camera> = definedExternally
    open var _cameraRigParams: Any = definedExternally
    open var _rigCameras: Array<Camera> = definedExternally
    open var _rigPostProcess: PostProcess = definedExternally
    open var _webvrViewMatrix: Matrix = definedExternally
    open var _skipRendering: Boolean = definedExternally
    open var _projectionMatrix: Matrix = definedExternally
    open var _postProcesses: Array<PostProcess> = definedExternally
    open var _activeMeshes: SmartArray<AbstractMesh> = definedExternally
    open var _globalPosition: Vector3 = definedExternally
    open var _computedViewMatrix: Matrix = definedExternally
    open var _doNotComputeProjectionMatrix: Any = definedExternally
    open var _transformMatrix: Any = definedExternally
    open var _frustumPlanes: Any = definedExternally
    open var _refreshFrustumPlanes: Any = definedExternally
    open var _storedFov: Any = definedExternally
    open var _stateStored: Any = definedExternally
    open fun storeState(): Camera = definedExternally
    open fun _restoreStateValues(): Boolean = definedExternally
    open fun restoreState(): Boolean = definedExternally
    override fun getClassName(): String = definedExternally
    open var _isCamera: Boolean = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    open var globalPosition: Vector3 = definedExternally
    open fun getActiveMeshes(): SmartArray<AbstractMesh> = definedExternally
    open fun isActiveMesh(mesh: Mesh): Boolean = definedExternally
    override fun isReady(completeCheck: Boolean?): Boolean = definedExternally
    override fun _initCache(): Unit = definedExternally
    override fun _updateCache(ignoreParentClass: Boolean?): Unit = definedExternally
    override fun _isSynchronized(): Boolean = definedExternally
    open fun _isSynchronizedViewMatrix(): Boolean = definedExternally
    open fun _isSynchronizedProjectionMatrix(): Boolean = definedExternally
    open fun attachControl(element: HTMLElement, noPreventDefault: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun update(): Unit = definedExternally
    open fun _checkInputs(): Unit = definedExternally
    open var rigCameras: Array<Camera> = definedExternally
    open var rigPostProcess: PostProcess = definedExternally
    open fun _getFirstPostProcess(): PostProcess = definedExternally
    open var _cascadePostProcessesToRigCams: Any = definedExternally
    open fun attachPostProcess(postProcess: PostProcess, insertAt: Number? = definedExternally /* null */): Number = definedExternally
    open fun detachPostProcess(postProcess: PostProcess): Unit = definedExternally
    override fun getWorldMatrix(): Matrix = definedExternally
    open fun _getViewMatrix(): Matrix = definedExternally
    open fun getViewMatrix(force: Boolean? = definedExternally /* null */): Matrix = definedExternally
    open fun freezeProjectionMatrix(projection: Matrix? = definedExternally /* null */): Unit = definedExternally
    open fun unfreezeProjectionMatrix(): Unit = definedExternally
    open fun getProjectionMatrix(force: Boolean? = definedExternally /* null */): Matrix = definedExternally
    open fun getTransformationMatrix(): Matrix = definedExternally
    open var _updateFrustumPlanes: Any = definedExternally
    open fun isInFrustum(target: ICullable, checkRigCameras: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun isCompletelyInFrustum(target: ICullable): Boolean = definedExternally
    open fun getForwardRay(length: Number? = definedExternally /* null */, transform: Matrix? = definedExternally /* null */, origin: Vector3? = definedExternally /* null */): Ray = definedExternally
    override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
    open var _isLeftCamera: Boolean = definedExternally
    open var isLeftCamera: Boolean = definedExternally
    open var _isRightCamera: Boolean = definedExternally
    open var isRightCamera: Boolean = definedExternally
    open var leftCamera: FreeCamera = definedExternally
    open var rightCamera: FreeCamera = definedExternally
    open fun getLeftTarget(): Vector3 = definedExternally
    open fun getRightTarget(): Vector3 = definedExternally
    open fun setCameraRigMode(mode: Number, rigParams: Any): Unit = definedExternally
    open fun _getVRProjectionMatrix(): Matrix = definedExternally
    open fun _updateCameraRotationMatrix(): Unit = definedExternally
    open fun _updateWebVRCameraRotationMatrix(): Unit = definedExternally
    open fun _getWebVRProjectionMatrix(): Matrix = definedExternally
    open fun _getWebVRViewMatrix(): Matrix = definedExternally
    open fun setCameraRigParameter(name: String, value: Any): Unit = definedExternally
    open fun createRigCamera(name: String, cameraIndex: Number): Camera = definedExternally
    open fun _updateRigCameras(): Unit = definedExternally
    open fun _setupInputs(): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun clone(name: String): Camera = definedExternally
    open fun getDirection(localAxis: Vector3): Vector3 = definedExternally
    open fun getDirectionToRef(localAxis: Vector3, result: Vector3): Unit = definedExternally
    open fun computeWorldMatrix(): Matrix = definedExternally
    companion object {
        var _createDefaultParsedCamera: (name: String, scene: Scene) -> Camera = definedExternally
        var PERSPECTIVE_CAMERA: Number = definedExternally
        var ORTHOGRAPHIC_CAMERA: Number = definedExternally
        var FOVMODE_VERTICAL_FIXED: Number = definedExternally
        var FOVMODE_HORIZONTAL_FIXED: Number = definedExternally
        var RIG_MODE_NONE: Number = definedExternally
        var RIG_MODE_STEREOSCOPIC_ANAGLYPH: Number = definedExternally
        var RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL: Number = definedExternally
        var RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED: Number = definedExternally
        var RIG_MODE_STEREOSCOPIC_OVERUNDER: Number = definedExternally
        var RIG_MODE_VR: Number = definedExternally
        var RIG_MODE_WEBVR: Number = definedExternally
        var RIG_MODE_CUSTOM: Number = definedExternally
        var ForceAttachControlToAlwaysPreventDefault: Boolean = definedExternally
        fun _setStereoscopicRigMode(camera: Camera): Unit = definedExternally
        fun _setStereoscopicAnaglyphRigMode(camera: Camera): Unit = definedExternally
        fun _setVRRigMode(camera: Camera, rigParams: Any): Unit = definedExternally
        fun _setWebVRRigMode(camera: Camera, rigParams: Any): Unit = definedExternally
        fun GetConstructorFromName(type: String, name: String, scene: Scene, interaxial_distance: Number? = definedExternally /* null */, isStereoscopicSideBySide: Boolean? = definedExternally /* null */): () -> Camera = definedExternally
        fun Parse(parsedCamera: Any, scene: Scene): Camera = definedExternally
    }
    var _useMultiviewToSingleView: Boolean
    var _multiviewTexture: RenderTargetTexture
    fun _resizeOrCreateMultiviewTexture(width: Number, height: Number)
}
external open class VRMultiviewToSingleviewPostProcess(name: String, camera: Camera, scaleFactor: Number) : PostProcess
external interface IDisplayChangedEventArgs {
    var vrDisplay: Any?
    var vrSupported: Boolean
}
external interface DevicePose {
    var position: Float32Array
    var linearVelocity: Float32Array
    var linearAcceleration: Float32Array
    var orientation: Float32Array
    var angularVelocity: Float32Array
    var angularAcceleration: Float32Array
}
external interface PoseControlled {
    var position: Vector3
    var rotationQuaternion: Quaternion
    var devicePosition: Vector3? get() = definedExternally; set(value) = definedExternally
    var deviceRotationQuaternion: Quaternion
    var rawPose: DevicePose
    var deviceScaleFactor: Number
    fun updateFromDevice(poseData: DevicePose)
}
external interface WebVROptions {
    var trackPosition: Boolean? get() = definedExternally; set(value) = definedExternally
    var positionScale: Number? get() = definedExternally; set(value) = definedExternally
    var displayName: String? get() = definedExternally; set(value) = definedExternally
    var controllerMeshes: Boolean? get() = definedExternally; set(value) = definedExternally
    var defaultLightingOnControllers: Boolean? get() = definedExternally; set(value) = definedExternally
    var useCustomVRButton: Boolean? get() = definedExternally; set(value) = definedExternally
    var customVRButton: HTMLButtonElement? get() = definedExternally; set(value) = definedExternally
    var rayLength: Number? get() = definedExternally; set(value) = definedExternally
    var defaultHeight: Number? get() = definedExternally; set(value) = definedExternally
    var useMultiview: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class WebVRFreeCamera(name: String, position: Vector3, scene: Scene, webVROptions: WebVROptions? = definedExternally /* null */) : FreeCamera, PoseControlled {
    open var webVROptions: Any = definedExternally
    open var _vrDevice: Any = definedExternally
    override var rawPose: DevicePose = definedExternally
    open var _onVREnabled: Any = definedExternally
    open var _specsVersion: Any = definedExternally
    open var _attached: Any = definedExternally
    open var _frameData: Any = definedExternally
    open var _descendants: Array<Node> = definedExternally
    open var _deviceRoomPosition: Any = definedExternally
    open var _deviceRoomRotationQuaternion: Quaternion = definedExternally
    open var _standingMatrix: Any = definedExternally
    override var deviceRotationQuaternion: Quaternion = definedExternally
    override var deviceScaleFactor: Number = definedExternally
    open var _deviceToWorld: Any = definedExternally
    open var _worldToDevice: Any = definedExternally
    open var controllers: Array<WebVRController> = definedExternally
    open var onControllersAttachedObservable: Observable<Array<WebVRController>> = definedExternally
    open var onControllerMeshLoadedObservable: Observable<WebVRController> = definedExternally
    open var onPoseUpdatedFromDeviceObservable: Observable<Any> = definedExternally
    open var _poseSet: Any = definedExternally
    open var rigParenting: Boolean = definedExternally
    open var _lightOnControllers: Any = definedExternally
    open var _defaultHeight: Any = definedExternally
    open fun deviceDistanceToRoomGround(): Number = definedExternally
    open fun useStandingMatrix(callback: ((bool: Boolean) -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun useStandingMatrixAsync(): Promise<Boolean> = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun getControllerByName(name: String): WebVRController = definedExternally
    open var _leftController: Any = definedExternally
    open var leftController: WebVRController = definedExternally
    open var _rightController: Any = definedExternally
    open var rightController: WebVRController = definedExternally
    open fun getForwardRay(length: Number? = definedExternally /* null */): Ray = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    override fun updateFromDevice(poseData: DevicePose): Unit = definedExternally
    open var _htmlElementAttached: Any = definedExternally
    open var _detachIfAttached: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    open fun resetToCurrentRotation(): Unit = definedExternally
    override fun _updateRigCameras(): Unit = definedExternally
    open var _workingVector: Any = definedExternally
    open var _oneVector: Any = definedExternally
    open var _workingMatrix: Any = definedExternally
    open var updateCacheCalled: Any = definedExternally
    open var _correctPositionIfNotTrackPosition: Any = definedExternally
    override fun _updateCache(ignoreParentClass: Boolean?): Unit = definedExternally
    open fun _computeDevicePosition(): Unit = definedExternally
    override fun update(): Unit = definedExternally
    override fun _getViewMatrix(): Matrix = definedExternally
    open var _tmpMatrix: Any = definedExternally
    override fun _getWebVRViewMatrix(): Matrix = definedExternally
    override fun _getWebVRProjectionMatrix(): Matrix = definedExternally
    open var _onGamepadConnectedObserver: Any = definedExternally
    open var _onGamepadDisconnectedObserver: Any = definedExternally
    open var _updateCacheWhenTrackingDisabledObserver: Any = definedExternally
    open fun initControllers(): Unit = definedExternally
}
external interface PostProcessOptions {
    var width: Number
    var height: Number
}
external open class PostProcess {
    constructor(name: String, fragmentUrl: String, parameters: Array<String>, samplers: Array<String>, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, defines: String? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, vertexUrl: String? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, fragmentUrl: String, parameters: Array<String>, samplers: Array<String>, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, defines: String? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, vertexUrl: String? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var name: String = definedExternally
    open var uniqueId: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var _outputTexture: InternalTexture = definedExternally
    open var renderTargetSamplingMode: Number = definedExternally
    open var clearColor: Color4 = definedExternally
    open var autoClear: Boolean = definedExternally
    open var alphaMode: Number = definedExternally
    open var alphaConstants: Color4 = definedExternally
    open var animations: Array<Animation> = definedExternally
    open var enablePixelPerfectMode: Boolean = definedExternally
    open var forceFullscreenViewport: Boolean = definedExternally
    open var inspectableCustomProperties: Array<IInspectable> = definedExternally
    open var scaleMode: Number = definedExternally
    open var alwaysForcePOT: Boolean = definedExternally
    open var _samples: Any = definedExternally
    open var samples: Number = definedExternally
    open var adaptScaleToCurrentViewport: Boolean = definedExternally
    open var _camera: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _options: Any = definedExternally
    open var _reusable: Any = definedExternally
    open var _textureType: Any = definedExternally
    open var _textures: SmartArray<InternalTexture> = definedExternally
    open var _currentRenderTextureInd: Number = definedExternally
    open var _effect: Any = definedExternally
    open var _samplers: Any = definedExternally
    open var _fragmentUrl: Any = definedExternally
    open var _vertexUrl: Any = definedExternally
    open var _parameters: Any = definedExternally
    open var _scaleRatio: Any = definedExternally
    open var _indexParameters: Any = definedExternally
    open var _shareOutputWithPostProcess: Any = definedExternally
    open var _texelSize: Any = definedExternally
    open var _forcedOutputTexture: Any = definedExternally
    open fun getEffectName(): String = definedExternally
    open var onActivateObservable: Observable<Camera> = definedExternally
    open var _onActivateObserver: Any = definedExternally
    open var onActivate: (camera: Camera) -> Unit = definedExternally
    open var onSizeChangedObservable: Observable<PostProcess> = definedExternally
    open var _onSizeChangedObserver: Any = definedExternally
    open var onSizeChanged: (postProcess: PostProcess) -> Unit = definedExternally
    open var onApplyObservable: Observable<Effect> = definedExternally
    open var _onApplyObserver: Any = definedExternally
    open var onApply: (effect: Effect) -> Unit = definedExternally
    open var onBeforeRenderObservable: Observable<Effect> = definedExternally
    open var _onBeforeRenderObserver: Any = definedExternally
    open var onBeforeRender: (effect: Effect) -> Unit = definedExternally
    open var onAfterRenderObservable: Observable<Effect> = definedExternally
    open var _onAfterRenderObserver: Any = definedExternally
    open var onAfterRender: (efect: Effect) -> Unit = definedExternally
    open var inputTexture: InternalTexture = definedExternally
    open fun getCamera(): Camera = definedExternally
    open var texelSize: Vector2 = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getEngine(): Engine = definedExternally
    open fun getEffect(): Effect = definedExternally
    open fun shareOutputWith(postProcess: PostProcess): PostProcess = definedExternally
    open fun useOwnOutput(): Unit = definedExternally
    open fun updateEffect(defines: String? = definedExternally /* null */, uniforms: Array<String>? = definedExternally /* null */, samplers: Array<String>? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun isReusable(): Boolean = definedExternally
    open fun markTextureDirty(): Unit = definedExternally
    open fun activate(camera: Camera, sourceTexture: InternalTexture? = definedExternally /* null */, forceDepthStencil: Boolean? = definedExternally /* null */): InternalTexture = definedExternally
    open var isSupported: Boolean = definedExternally
    open var aspectRatio: Number = definedExternally
    open fun isReady(): Boolean = definedExternally
    open fun apply(): Effect = definedExternally
    open var _disposeTextures: Any = definedExternally
    open fun dispose(camera: Camera? = definedExternally /* null */): Unit = definedExternally
}
external open class PostProcessManager(scene: Scene) {
    open var _scene: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _vertexBuffers: Any = definedExternally
    open var _prepareBuffers: Any = definedExternally
    open var _buildIndexBuffer: Any = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun _prepareFrame(sourceTexture: InternalTexture? = definedExternally /* null */, postProcesses: Array<PostProcess>? = definedExternally /* null */): Boolean = definedExternally
    open fun directRender(postProcesses: Array<PostProcess>, targetTexture: InternalTexture? = definedExternally /* null */, forceFullscreenViewport: Boolean? = definedExternally /* null */, faceIndex: Number? = definedExternally /* null */, lodLevel: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _finalizeFrame(doNotPresent: Boolean? = definedExternally /* null */, targetTexture: InternalTexture? = definedExternally /* null */, faceIndex: Number? = definedExternally /* null */, postProcesses: Array<PostProcess>? = definedExternally /* null */, forceFullscreenViewport: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
}
external open class AbstractScene {
    open var rootNodes: Array<Node> = definedExternally
    open var cameras: Array<Camera> = definedExternally
    open var lights: Array<Light> = definedExternally
    open var meshes: Array<AbstractMesh> = definedExternally
    open var skeletons: Array<Skeleton> = definedExternally
    open var particleSystems: Array<IParticleSystem> = definedExternally
    open var animations: Array<Animation> = definedExternally
    open var animationGroups: Array<AnimationGroup> = definedExternally
    open var multiMaterials: Array<MultiMaterial> = definedExternally
    open var materials: Array<Material> = definedExternally
    open var morphTargetManagers: Array<MorphTargetManager> = definedExternally
    open var geometries: Array<Geometry> = definedExternally
    open var transformNodes: Array<TransformNode> = definedExternally
    open var actionManagers: Array<AbstractActionManager> = definedExternally
    open var textures: Array<BaseTexture> = definedExternally
    open var environmentTexture: BaseTexture = definedExternally
    companion object {
        var _BabylonFileParsers: Any = definedExternally
        var _IndividualBabylonFileParsers: Any = definedExternally
        fun AddParser(name: String, parser: (parsedData: Any, scene: Scene, container: AssetContainer, rootUrl: String) -> Unit): Unit = definedExternally
        fun GetParser(name: String): (parsedData: Any, scene: Scene, container: AssetContainer, rootUrl: String) -> Unit = definedExternally
        fun AddIndividualParser(name: String, parser: (parsedData: Any, scene: Scene, rootUrl: String) -> Any): Unit = definedExternally
        fun GetIndividualParser(name: String): (parsedData: Any, scene: Scene, rootUrl: String) -> Any = definedExternally
        fun Parse(jsonData: Any, scene: Scene, container: AssetContainer, rootUrl: String): Unit = definedExternally
    }
    var layers: Array<Layer>
    var proceduralTextures: Array<ProceduralTexture>
    var sounds: Array<Sound>
    var effectLayers: Array<EffectLayer>
    fun removeEffectLayer(toRemove: EffectLayer): Number
    fun addEffectLayer(newEffectLayer: EffectLayer)
    fun getGlowLayerByName(name: String): GlowLayer
    fun getHighlightLayerByName(name: String): HighlightLayer
    var lensFlareSystems: Array<LensFlareSystem>
    fun removeLensFlareSystem(toRemove: LensFlareSystem): Number
    fun addLensFlareSystem(newLensFlareSystem: LensFlareSystem)
    fun getLensFlareSystemByName(name: String): LensFlareSystem
    fun getLensFlareSystemByID(id: String): LensFlareSystem
    var reflectionProbes: Array<ReflectionProbe>
    fun removeReflectionProbe(toRemove: ReflectionProbe): Number
    fun addReflectionProbe(newReflectionProbe: ReflectionProbe)
}
external open class LayerSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    open var _engine: Any = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _draw: Any = definedExternally
    open var _drawCameraPredicate: Any = definedExternally
    open var _drawCameraBackground: Any = definedExternally
    open var _drawCameraForeground: Any = definedExternally
    open var _drawRenderTargetPredicate: Any = definedExternally
    open var _drawRenderTargetBackground: Any = definedExternally
    open var _drawRenderTargetForeground: Any = definedExternally
}
external object layerPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object layerVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class Layer(name: String, imgUrl: String, scene: Scene, isBackground: Boolean? = definedExternally /* null */, color: Color4? = definedExternally /* null */) {
    open var name: String = definedExternally
    open var texture: Texture = definedExternally
    open var isBackground: Boolean = definedExternally
    open var color: Color4 = definedExternally
    open var scale: Vector2 = definedExternally
    open var offset: Vector2 = definedExternally
    open var alphaBlendingMode: Number = definedExternally
    open var alphaTest: Boolean = definedExternally
    open var layerMask: Number = definedExternally
    open var renderTargetTextures: Array<RenderTargetTexture> = definedExternally
    open var renderOnlyInRenderTargetTextures: Boolean = definedExternally
    open var _scene: Any = definedExternally
    open var _vertexBuffers: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _effect: Any = definedExternally
    open var _alphaTestEffect: Any = definedExternally
    open var onDisposeObservable: Observable<Layer> = definedExternally
    open var _onDisposeObserver: Any = definedExternally
    open var onDispose: () -> Unit = definedExternally
    open var onBeforeRenderObservable: Observable<Layer> = definedExternally
    open var _onBeforeRenderObserver: Any = definedExternally
    open var onBeforeRender: () -> Unit = definedExternally
    open var onAfterRenderObservable: Observable<Layer> = definedExternally
    open var _onAfterRenderObserver: Any = definedExternally
    open var onAfterRender: () -> Unit = definedExternally
    open var _createIndexBuffer: Any = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun render(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
}
external open class ProceduralTextureSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _beforeClear: Any = definedExternally
}
external object proceduralVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface `T$8` {
    @nativeGetter
    operator fun get(key: String): Texture?
    @nativeSetter
    operator fun set(key: String, value: Texture)
}
external open class ProceduralTexture(name: String, size: Any, fragment: Any, scene: Scene, fallbackTexture: Texture? = definedExternally /* null */, generateMipMaps: Boolean? = definedExternally /* null */, isCube: Boolean? = definedExternally /* null */) : Texture {
    override var isCube: Boolean = definedExternally
    open var isEnabled: Boolean = definedExternally
    open var autoClear: Boolean = definedExternally
    open var onGenerated: () -> Unit = definedExternally
    open var onGeneratedObservable: Observable<ProceduralTexture> = definedExternally
    open var _generateMipMaps: Boolean = definedExternally
    open var _effect: Effect = definedExternally
    open var _textures: `T$8` = definedExternally
    open var _size: Any = definedExternally
    open var _currentRefreshId: Any = definedExternally
    open var _refreshRate: Any = definedExternally
    open var _vertexBuffers: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _uniforms: Any = definedExternally
    open var _samplers: Any = definedExternally
    open var _fragment: Any = definedExternally
    open var _floats: Any = definedExternally
    open var _ints: Any = definedExternally
    open var _floatsArrays: Any = definedExternally
    open var _colors3: Any = definedExternally
    open var _colors4: Any = definedExternally
    open var _vectors2: Any = definedExternally
    open var _vectors3: Any = definedExternally
    open var _matrices: Any = definedExternally
    open var _fallbackTexture: Any = definedExternally
    open var _fallbackTextureUsed: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _cachedDefines: Any = definedExternally
    open var _contentUpdateId: Any = definedExternally
    open var _contentData: Any = definedExternally
    open fun getEffect(): Effect = definedExternally
    open fun getContent(): ArrayBufferView = definedExternally
    open var _createIndexBuffer: Any = definedExternally
    override fun _rebuild(): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open fun _getDefines(): String = definedExternally
    override fun isReady(): Boolean = definedExternally
    open fun resetRefreshCounter(): Unit = definedExternally
    open fun setFragment(fragment: Any): Unit = definedExternally
    open var refreshRate: Number = definedExternally
    open fun _shouldRender(): Boolean = definedExternally
    open fun getRenderSize(): Number = definedExternally
    open fun resize(size: Number, generateMipMaps: Boolean): Unit = definedExternally
    open var _checkUniform: Any = definedExternally
    open fun setTexture(name: String, texture: Texture): ProceduralTexture = definedExternally
    open fun setFloat(name: String, value: Number): ProceduralTexture = definedExternally
    open fun setInt(name: String, value: Number): ProceduralTexture = definedExternally
    open fun setFloats(name: String, value: Array<Number>): ProceduralTexture = definedExternally
    open fun setColor3(name: String, value: Color3): ProceduralTexture = definedExternally
    open fun setColor4(name: String, value: Color4): ProceduralTexture = definedExternally
    open fun setVector2(name: String, value: Vector2): ProceduralTexture = definedExternally
    open fun setVector3(name: String, value: Vector3): ProceduralTexture = definedExternally
    open fun setMatrix(name: String, value: Matrix): ProceduralTexture = definedExternally
    open fun render(useCameraPostProcess: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun clone(): ProceduralTexture = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class BaseParticleSystem(name: String) {
    open var animations: Array<Animation> = definedExternally
    open var id: String = definedExternally
    open var name: String = definedExternally
    open var renderingGroupId: Number = definedExternally
    open var emitter: dynamic /* Vector3 | AbstractMesh */ = definedExternally
    open var emitRate: Number = definedExternally
    open var manualEmitCount: Number = definedExternally
    open var updateSpeed: Number = definedExternally
    open var targetStopDuration: Number = definedExternally
    open var disposeOnStop: Boolean = definedExternally
    open var minEmitPower: Number = definedExternally
    open var maxEmitPower: Number = definedExternally
    open var minLifeTime: Number = definedExternally
    open var maxLifeTime: Number = definedExternally
    open var minSize: Number = definedExternally
    open var maxSize: Number = definedExternally
    open var minScaleX: Number = definedExternally
    open var maxScaleX: Number = definedExternally
    open var minScaleY: Number = definedExternally
    open var maxScaleY: Number = definedExternally
    open var minInitialRotation: Number = definedExternally
    open var maxInitialRotation: Number = definedExternally
    open var minAngularSpeed: Number = definedExternally
    open var maxAngularSpeed: Number = definedExternally
    open var particleTexture: Texture = definedExternally
    open var layerMask: Number = definedExternally
    open var customShader: Any = definedExternally
    open var preventAutoStart: Boolean = definedExternally
    open var _noiseTexture: Any = definedExternally
    open var noiseTexture: BaseTexture = definedExternally
    open var noiseStrength: Vector3 = definedExternally
    open var onAnimationEnd: () -> Unit = definedExternally
    open var blendMode: Number = definedExternally
    open var forceDepthWrite: Boolean = definedExternally
    open var preWarmCycles: Number = definedExternally
    open var preWarmStepOffset: Number = definedExternally
    open var spriteCellChangeSpeed: Number = definedExternally
    open var startSpriteCellID: Number = definedExternally
    open var endSpriteCellID: Number = definedExternally
    open var spriteCellWidth: Number = definedExternally
    open var spriteCellHeight: Number = definedExternally
    open var spriteRandomStartCell: Boolean = definedExternally
    open var translationPivot: Vector2 = definedExternally
    open var _isAnimationSheetEnabled: Boolean = definedExternally
    open var beginAnimationOnStart: Boolean = definedExternally
    open var beginAnimationFrom: Number = definedExternally
    open var beginAnimationTo: Number = definedExternally
    open var beginAnimationLoop: Boolean = definedExternally
    open var worldOffset: Vector3 = definedExternally
    open var isAnimationSheetEnabled: Boolean = definedExternally
    open fun getScene(): Scene = definedExternally
    open var gravity: Vector3 = definedExternally
    open var _colorGradients: Array<ColorGradient> = definedExternally
    open var _sizeGradients: Array<FactorGradient> = definedExternally
    open var _lifeTimeGradients: Array<FactorGradient> = definedExternally
    open var _angularSpeedGradients: Array<FactorGradient> = definedExternally
    open var _velocityGradients: Array<FactorGradient> = definedExternally
    open var _limitVelocityGradients: Array<FactorGradient> = definedExternally
    open var _dragGradients: Array<FactorGradient> = definedExternally
    open var _emitRateGradients: Array<FactorGradient> = definedExternally
    open var _startSizeGradients: Array<FactorGradient> = definedExternally
    open var _rampGradients: Array<Color3Gradient> = definedExternally
    open var _colorRemapGradients: Array<FactorGradient> = definedExternally
    open var _alphaRemapGradients: Array<FactorGradient> = definedExternally
    open fun _hasTargetStopDurationDependantGradient(): Boolean = definedExternally
    open var startDelay: Number = definedExternally
    open fun getDragGradients(): Array<FactorGradient> = definedExternally
    open var limitVelocityDamping: Number = definedExternally
    open fun getLimitVelocityGradients(): Array<FactorGradient> = definedExternally
    open fun getColorGradients(): Array<ColorGradient> = definedExternally
    open fun getSizeGradients(): Array<FactorGradient> = definedExternally
    open fun getColorRemapGradients(): Array<FactorGradient> = definedExternally
    open fun getAlphaRemapGradients(): Array<FactorGradient> = definedExternally
    open fun getLifeTimeGradients(): Array<FactorGradient> = definedExternally
    open fun getAngularSpeedGradients(): Array<FactorGradient> = definedExternally
    open fun getVelocityGradients(): Array<FactorGradient> = definedExternally
    open fun getStartSizeGradients(): Array<FactorGradient> = definedExternally
    open fun getEmitRateGradients(): Array<FactorGradient> = definedExternally
    open var direction1: Vector3 = definedExternally
    open var direction2: Vector3 = definedExternally
    open var minEmitBox: Vector3 = definedExternally
    open var maxEmitBox: Vector3 = definedExternally
    open var color1: Color4 = definedExternally
    open var color2: Color4 = definedExternally
    open var colorDead: Color4 = definedExternally
    open var textureMask: Color4 = definedExternally
    open var particleEmitterType: IParticleEmitterType = definedExternally
    open var _isSubEmitter: Boolean = definedExternally
    open var billboardMode: Number = definedExternally
    open var _isBillboardBased: Boolean = definedExternally
    open var isBillboardBased: Boolean = definedExternally
    open var _scene: Scene = definedExternally
    open var _imageProcessingConfigurationDefines: ImageProcessingConfigurationDefines = definedExternally
    open var _imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open fun _attachImageProcessingConfiguration(configuration: ImageProcessingConfiguration): Unit = definedExternally
    open fun _reset(): Unit = definedExternally
    open fun _removeGradientAndTexture(gradient: Number, gradients: Array<IValueGradient>, texture: RawTexture): BaseParticleSystem = definedExternally
    open fun createPointEmitter(direction1: Vector3, direction2: Vector3): PointParticleEmitter = definedExternally
    open fun createHemisphericEmitter(radius: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */): HemisphericParticleEmitter = definedExternally
    open fun createSphereEmitter(radius: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */): SphereParticleEmitter = definedExternally
    open fun createDirectedSphereEmitter(radius: Number? = definedExternally /* null */, direction1: Vector3? = definedExternally /* null */, direction2: Vector3? = definedExternally /* null */): SphereDirectedParticleEmitter = definedExternally
    open fun createCylinderEmitter(radius: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */, directionRandomizer: Number? = definedExternally /* null */): CylinderParticleEmitter = definedExternally
    open fun createDirectedCylinderEmitter(radius: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */, direction1: Vector3? = definedExternally /* null */, direction2: Vector3? = definedExternally /* null */): CylinderDirectedParticleEmitter = definedExternally
    open fun createConeEmitter(radius: Number? = definedExternally /* null */, angle: Number? = definedExternally /* null */): ConeParticleEmitter = definedExternally
    open fun createBoxEmitter(direction1: Vector3, direction2: Vector3, minEmitBox: Vector3, maxEmitBox: Vector3): BoxParticleEmitter = definedExternally

    companion object {
        var BLENDMODE_ONEONE: Number = definedExternally
        var BLENDMODE_STANDARD: Number = definedExternally
        var BLENDMODE_ADD: Number = definedExternally
        var BLENDMODE_MULTIPLY: Number = definedExternally
        var BLENDMODE_MULTIPLYADD: Number = definedExternally
    }
}
external enum class SubEmitterType {
    ATTACHED /* = 0 */,
    END /* = 1 */
}
external open class SubEmitter(particleSystem: ParticleSystem) {
    open var particleSystem: ParticleSystem = definedExternally
    open var type: dynamic /* Number /* 0 */ | Number /* 1 */ */ = definedExternally
    open var inheritDirection: Boolean = definedExternally
    open var inheritedVelocityAmount: Number = definedExternally
    open fun clone(): SubEmitter = definedExternally
    open fun serialize(): Any = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        fun _ParseParticleSystem(system: Any, scene: Scene, rootUrl: String): ParticleSystem = definedExternally
        fun Parse(serializationObject: Any, scene: Scene, rootUrl: String): SubEmitter = definedExternally
    }
}
external object clipPlaneFragmentDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object imageProcessingDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object imageProcessingFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object clipPlaneFragment {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object particlesPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object clipPlaneVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object clipPlaneVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object particlesVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class ParticleSystem(name: String, capacity: Number, scene: Scene, customEffect: Effect? = definedExternally /* null */, isAnimationSheetEnabled: Boolean? = definedExternally /* null */, epsilon: Number? = definedExternally /* null */) : BaseParticleSystem, IDisposable, IAnimatable, IParticleSystem {
	override fun stop()
	override fun animate(preWarm:Boolean?)
	open var updateFunction: (particles: Array<Particle>) -> Unit = definedExternally
    open var _emitterWorldMatrix: Any = definedExternally
    open var startDirectionFunction: (worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle) -> Unit = definedExternally
    open var startPositionFunction: (worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle) -> Unit = definedExternally
    open var _inheritedVelocityOffset: Vector3 = definedExternally
    open var onDisposeObservable: Observable<ParticleSystem> = definedExternally
    open var _onDisposeObserver: Any = definedExternally
    open var onDispose: () -> Unit = definedExternally
    open var _particles: Any = definedExternally
    open var _epsilon: Any = definedExternally
    open var _capacity: Any = definedExternally
    open var _stockParticles: Any = definedExternally
    open var _newPartsExcess: Any = definedExternally
    open var _vertexData: Any = definedExternally
    open var _vertexBuffer: Any = definedExternally
    open var _vertexBuffers: Any = definedExternally
    open var _spriteBuffer: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _effect: Any = definedExternally
    open var _customEffect: Any = definedExternally
    open var _cachedDefines: Any = definedExternally
    open var _scaledColorStep: Any = definedExternally
    open var _colorDiff: Any = definedExternally
    open var _scaledDirection: Any = definedExternally
    open var _scaledGravity: Any = definedExternally
    open var _currentRenderId: Any = definedExternally
    open var _alive: Any = definedExternally
    open var _useInstancing: Any = definedExternally
    open var _started: Any = definedExternally
    open var _stopped: Any = definedExternally
    open var _actualFrame: Any = definedExternally
    open var _scaledUpdateSpeed: Any = definedExternally
    open var _vertexBufferSize: Any = definedExternally
    open var _currentEmitRateGradient: FactorGradient = definedExternally
    open var _currentEmitRate1: Number = definedExternally
    open var _currentEmitRate2: Number = definedExternally
    open var _currentStartSizeGradient: FactorGradient = definedExternally
    open var _currentStartSize1: Number = definedExternally
    open var _currentStartSize2: Number = definedExternally
    open var _rawTextureWidth: Any = definedExternally
    open var _rampGradientsTexture: Any = definedExternally
    open var _useRampGradients: Any = definedExternally
    override var useRampGradients: Boolean = definedExternally
    open var subEmitters: Array<dynamic /* ParticleSystem | SubEmitter | Array<SubEmitter> */> = definedExternally
    open var _subEmitters: Any = definedExternally
    open var _disposeEmitterOnDispose: Boolean = definedExternally
    open var activeSubSystems: Array<ParticleSystem> = definedExternally
    open var _rootParticleSystem: Any = definedExternally
    open var particles: Array<Particle> = definedExternally
    open fun getClassName(): String = definedExternally
    open var _addFactorGradient: Any = definedExternally
    open var _removeFactorGradient: Any = definedExternally
    override fun addLifeTimeGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeLifeTimeGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addSizeGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeSizeGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addColorRemapGradient(gradient: Number, min: Number, max: Number): IParticleSystem = definedExternally
    open fun removeColorRemapGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addAlphaRemapGradient(gradient: Number, min: Number, max: Number): IParticleSystem = definedExternally
    open fun removeAlphaRemapGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addAngularSpeedGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeAngularSpeedGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addVelocityGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeVelocityGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addLimitVelocityGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeLimitVelocityGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addDragGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeDragGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addEmitRateGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeEmitRateGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addStartSizeGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeStartSizeGradient(gradient: Number): IParticleSystem = definedExternally
    open var _createRampGradientTexture: Any = definedExternally
    override fun getRampGradients(): Array<Color3Gradient> = definedExternally
    override fun addRampGradient(gradient: Number, color: Color3): ParticleSystem = definedExternally
    open fun removeRampGradient(gradient: Number): ParticleSystem = definedExternally
    override fun addColorGradient(gradient: Number, color1: Color4, color2: Color4?): IParticleSystem = definedExternally
    override fun removeColorGradient(gradient: Number): IParticleSystem = definedExternally
    open var _fetchR: Any = definedExternally
    override fun _reset(): Unit = definedExternally
    open var _resetEffect: Any = definedExternally
    open var _createVertexBuffers: Any = definedExternally
    open var _createIndexBuffer: Any = definedExternally
    override fun getCapacity(): Number = definedExternally
    open fun isAlive(): Boolean = definedExternally
    override fun isStarted(): Boolean = definedExternally
    open var _prepareSubEmitterInternalArray: Any = definedExternally
    override fun start(delay: Number?): Unit = definedExternally
    open fun stop(stopSubEmitters: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun reset(): Unit = definedExternally
    open fun _appendParticleVertex(index: Number, particle: Particle, offsetX: Number, offsetY: Number): Unit = definedExternally
    open var recycleParticle: (particle: Particle) -> Unit = definedExternally
    open var _stopSubEmitters: Any = definedExternally
    open var _createParticle: Any = definedExternally
    open var _removeFromRoot: Any = definedExternally
    open var _emitFromParticle: Any = definedExternally
    open var _update: Any = definedExternally
    open var _getEffect: Any = definedExternally
	override fun animate(preWarmOnly: Boolean?  /* null */): Unit = definedExternally
    open var _appendParticleVertices: Any = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun isReady(): Boolean = definedExternally
    open var _render: Any = definedExternally
    override fun render(preWarm:Boolean?): Number = definedExternally
	override fun dispose(): Unit = definedExternally
	override fun dispose(disposeTexture: Boolean?): Unit = definedExternally
    override fun clone(name: String, newEmitter: Any): ParticleSystem = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var BILLBOARDMODE_Y: Number = definedExternally
        var BILLBOARDMODE_ALL: Number = definedExternally
        var BILLBOARDMODE_STRETCHED: Number = definedExternally
        fun _GetAttributeNamesOrOptions(isAnimationSheetEnabled: Boolean? = definedExternally /* null */, isBillboardBased: Boolean? = definedExternally /* null */, useRampGradients: Boolean? = definedExternally /* null */): Array<String> = definedExternally
        fun _GetEffectCreationOptions(isAnimationSheetEnabled: Boolean? = definedExternally /* null */): Array<String> = definedExternally
        fun _Serialize(serializationObject: Any, particleSystem: IParticleSystem): Unit = definedExternally
        fun _Parse(parsedParticleSystem: Any, particleSystem: IParticleSystem, scene: Scene, rootUrl: String): Unit = definedExternally
        fun Parse(parsedParticleSystem: Any, scene: Scene, rootUrl: String, doNotStart: Boolean? = definedExternally /* null */): ParticleSystem = definedExternally
    }
}
external open class Particle(particleSystem: ParticleSystem) {
    open var particleSystem: ParticleSystem = definedExternally
    open var id: Number = definedExternally
    open var position: Vector3 = definedExternally
    open var direction: Vector3 = definedExternally
    open var color: Color4 = definedExternally
    open var colorStep: Color4 = definedExternally
    open var lifeTime: Number = definedExternally
    open var age: Number = definedExternally
    open var size: Number = definedExternally
    open var scale: Vector2 = definedExternally
    open var angle: Number = definedExternally
    open var angularSpeed: Number = definedExternally
    open var cellIndex: Number = definedExternally
    open var remapData: Vector4 = definedExternally
    open var _randomCellOffset: Number = definedExternally
    open var _initialDirection: Vector3 = definedExternally
    open var _attachedSubEmitters: Array<SubEmitter> = definedExternally
    open var _initialStartSpriteCellID: Number = definedExternally
    open var _initialEndSpriteCellID: Number = definedExternally
    open var _currentColorGradient: ColorGradient = definedExternally
    open var _currentColor1: Color4 = definedExternally
    open var _currentColor2: Color4 = definedExternally
    open var _currentSizeGradient: FactorGradient = definedExternally
    open var _currentSize1: Number = definedExternally
    open var _currentSize2: Number = definedExternally
    open var _currentAngularSpeedGradient: FactorGradient = definedExternally
    open var _currentAngularSpeed1: Number = definedExternally
    open var _currentAngularSpeed2: Number = definedExternally
    open var _currentVelocityGradient: FactorGradient = definedExternally
    open var _currentVelocity1: Number = definedExternally
    open var _currentVelocity2: Number = definedExternally
    open var _currentLimitVelocityGradient: FactorGradient = definedExternally
    open var _currentLimitVelocity1: Number = definedExternally
    open var _currentLimitVelocity2: Number = definedExternally
    open var _currentDragGradient: FactorGradient = definedExternally
    open var _currentDrag1: Number = definedExternally
    open var _currentDrag2: Number = definedExternally
    open var _randomNoiseCoordinates1: Vector3 = definedExternally
    open var _randomNoiseCoordinates2: Vector3 = definedExternally
    open var updateCellInfoFromSystem: Any = definedExternally
    open fun updateCellIndex(): Unit = definedExternally
    open fun _inheritParticleInfoToSubEmitter(subEmitter: SubEmitter): Unit = definedExternally
    open fun _inheritParticleInfoToSubEmitters(): Unit = definedExternally
    open fun _reset(): Unit = definedExternally
    open fun copyTo(other: Particle): Unit = definedExternally
    companion object {
        var _Count: Any = definedExternally
    }
}
external interface IParticleEmitterType {
    fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle)
    fun startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle)
    fun clone(): IParticleEmitterType
    fun applyToShader(effect: Effect)
    fun getEffectDefines(): String
    fun getClassName(): String
    fun serialize(): Any
    fun parse(serializationObject: Any)
}
external open class BoxParticleEmitter : IParticleEmitterType {
    open var direction1: Vector3 = definedExternally
    open var direction2: Vector3 = definedExternally
    open var minEmitBox: Vector3 = definedExternally
    open var maxEmitBox: Vector3 = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): BoxParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external open class ConeParticleEmitter(radius: Number? = definedExternally /* null */, angle: Number? = definedExternally /* null */, directionRandomizer: Number? = definedExternally /* null */) : IParticleEmitterType {
    open var directionRandomizer: Number = definedExternally
    open var _radius: Any = definedExternally
    open var _angle: Any = definedExternally
    open var _height: Any = definedExternally
    open var radiusRange: Number = definedExternally
    open var heightRange: Number = definedExternally
    open var emitFromSpawnPointOnly: Boolean = definedExternally
    open var radius: Number = definedExternally
    open var angle: Number = definedExternally
    open var _buildHeight: Any = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): ConeParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external open class CylinderParticleEmitter(radius: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */, directionRandomizer: Number? = definedExternally /* null */) : IParticleEmitterType {
    open var radius: Number = definedExternally
    open var height: Number = definedExternally
    open var radiusRange: Number = definedExternally
    open var directionRandomizer: Number = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): CylinderParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external open class CylinderDirectedParticleEmitter(radius: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */, direction1: Vector3? = definedExternally /* null */, direction2: Vector3? = definedExternally /* null */) : CylinderParticleEmitter {
    open var direction1: Vector3 = definedExternally
    open var direction2: Vector3 = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): CylinderDirectedParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external open class HemisphericParticleEmitter(radius: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */, directionRandomizer: Number? = definedExternally /* null */) : IParticleEmitterType {
    open var radius: Number = definedExternally
    open var radiusRange: Number = definedExternally
    open var directionRandomizer: Number = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): HemisphericParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external open class PointParticleEmitter : IParticleEmitterType {
    open var direction1: Vector3 = definedExternally
    open var direction2: Vector3 = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): PointParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external open class SphereParticleEmitter(radius: Number? = definedExternally /* null */, radiusRange: Number? = definedExternally /* null */, directionRandomizer: Number? = definedExternally /* null */) : IParticleEmitterType {
    open var radius: Number = definedExternally
    open var radiusRange: Number = definedExternally
    open var directionRandomizer: Number = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): SphereParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external open class SphereDirectedParticleEmitter(radius: Number? = definedExternally /* null */, direction1: Vector3? = definedExternally /* null */, direction2: Vector3? = definedExternally /* null */) : SphereParticleEmitter {
    open var direction1: Vector3 = definedExternally
    open var direction2: Vector3 = definedExternally
    override fun startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): Unit = definedExternally
    override fun clone(): SphereDirectedParticleEmitter = definedExternally
    override fun applyToShader(effect: Effect): Unit = definedExternally
    override fun getEffectDefines(): String = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    override fun parse(serializationObject: Any): Unit = definedExternally
}
external interface IParticleSystem {
    var animations: Array<Animation>
    var id: String
    var name: String
    var emitter: dynamic /* Vector3 | AbstractMesh */
    var isBillboardBased: Boolean
    var renderingGroupId: Number
    var layerMask: Number
    var updateSpeed: Number
    var targetStopDuration: Number
    var particleTexture: Texture
    var blendMode: Number
    var minLifeTime: Number
    var maxLifeTime: Number
    var minSize: Number
    var maxSize: Number
    var minScaleX: Number
    var maxScaleX: Number
    var minScaleY: Number
    var maxScaleY: Number
    var color1: Color4
    var color2: Color4
    var colorDead: Color4
    var emitRate: Number
    var gravity: Vector3
    var minEmitPower: Number
    var maxEmitPower: Number
    var minAngularSpeed: Number
    var maxAngularSpeed: Number
    var minInitialRotation: Number
    var maxInitialRotation: Number
    var particleEmitterType: IParticleEmitterType
    var startDelay: Number
    var preWarmCycles: Number
    var preWarmStepOffset: Number
    var spriteCellChangeSpeed: Number
    var startSpriteCellID: Number
    var endSpriteCellID: Number
    var spriteCellWidth: Number
    var spriteCellHeight: Number
    var spriteRandomStartCell: Boolean
    var isAnimationSheetEnabled: Boolean
    var translationPivot: Vector2
    var noiseTexture: BaseTexture
    var noiseStrength: Vector3
    var billboardMode: Number
    var limitVelocityDamping: Number
    var beginAnimationOnStart: Boolean
    var beginAnimationFrom: Number
    var beginAnimationTo: Number
    var beginAnimationLoop: Boolean
    var disposeOnStop: Boolean
    fun getCapacity(): Number
    fun isStarted(): Boolean
    fun animate(preWarm: Boolean? = definedExternally /* null */)
    fun render(preWarm: Boolean?= definedExternally): Number
    fun dispose(disposeTexture: Boolean? = definedExternally /* null */)
    fun clone(name: String, newEmitter: Any): IParticleSystem
    fun serialize(): Any
    fun rebuild()
    fun start(delay: Number? = definedExternally /* null */)
    fun stop()
    fun reset()
    fun isReady(): Boolean
    fun addColorGradient(gradient: Number, color1: Color4, color2: Color4? = definedExternally /* null */): IParticleSystem
    fun removeColorGradient(gradient: Number): IParticleSystem
    fun addSizeGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeSizeGradient(gradient: Number): IParticleSystem
    fun getColorGradients(): Array<ColorGradient>
    fun getSizeGradients(): Array<FactorGradient>
    fun getAngularSpeedGradients(): Array<FactorGradient>
    fun addAngularSpeedGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeAngularSpeedGradient(gradient: Number): IParticleSystem
    fun getVelocityGradients(): Array<FactorGradient>
    fun addVelocityGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeVelocityGradient(gradient: Number): IParticleSystem
    fun getLimitVelocityGradients(): Array<FactorGradient>
    fun addLimitVelocityGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeLimitVelocityGradient(gradient: Number): IParticleSystem
    fun addDragGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeDragGradient(gradient: Number): IParticleSystem
    fun getDragGradients(): Array<FactorGradient>
    fun addEmitRateGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeEmitRateGradient(gradient: Number): IParticleSystem
    fun getEmitRateGradients(): Array<FactorGradient>
    fun addStartSizeGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeStartSizeGradient(gradient: Number): IParticleSystem
    fun getStartSizeGradients(): Array<FactorGradient>
    fun addLifeTimeGradient(gradient: Number, factor: Number, factor2: Number? = definedExternally /* null */): IParticleSystem
    fun removeLifeTimeGradient(gradient: Number): IParticleSystem
    fun getLifeTimeGradients(): Array<FactorGradient>
    fun getColorGradients(): Array<ColorGradient>
    fun addRampGradient(gradient: Number, color: Color3): IParticleSystem
    fun getRampGradients(): Array<Color3Gradient>
    var useRampGradients: Boolean
    fun addColorRemapGradient(gradient: Number, min: Number, max: Number): IParticleSystem
    fun getColorRemapGradients(): Array<FactorGradient>
    fun addAlphaRemapGradient(gradient: Number, min: Number, max: Number): IParticleSystem
    fun getAlphaRemapGradients(): Array<FactorGradient>
    fun createPointEmitter(direction1: Vector3, direction2: Vector3): PointParticleEmitter
    fun createHemisphericEmitter(radius: Number?, radiusRange: Number?): HemisphericParticleEmitter
    fun createSphereEmitter(radius: Number?, radiusRange: Number?): SphereParticleEmitter
    fun createDirectedSphereEmitter(radius: Number?, direction1: Vector3?, direction2: Vector3?): SphereDirectedParticleEmitter
    fun createCylinderEmitter(radius: Number?, height: Number?, radiusRange: Number?, directionRandomizer: Number?): CylinderParticleEmitter
    fun createDirectedCylinderEmitter(radius: Number?, height: Number?, radiusRange: Number?, direction1: Vector3?, direction2: Vector3?): CylinderDirectedParticleEmitter
    fun createConeEmitter(radius: Number?, angle: Number?): ConeParticleEmitter
    fun createBoxEmitter(direction1: Vector3, direction2: Vector3, minEmitBox: Vector3, maxEmitBox: Vector3): BoxParticleEmitter
    fun getScene(): Scene
}
external open class InstancedMesh(name: String, source: Mesh) : AbstractMesh {
    open var _sourceMesh: Any = definedExternally
    open var _currentLOD: Any = definedExternally
    open var _indexInSourceMeshInstanceArray: Number = definedExternally
    override fun getClassName(): String = definedExternally
    override var lightSources: Array<Light> = definedExternally
    override fun _resyncLightSources(): Unit = definedExternally
    override fun _resyncLighSource(light: Light): Unit = definedExternally
    override fun _removeLightSource(light: Light): Unit = definedExternally
    override var receiveShadows: Boolean = definedExternally
    override var material: Material = definedExternally
    override var visibility: Number = definedExternally
    override var skeleton: Skeleton = definedExternally
    override var renderingGroupId: Number = definedExternally
    override fun getTotalVertices(): Number = definedExternally
    override fun getTotalIndices(): Number = definedExternally
    open var sourceMesh: Mesh = definedExternally
    override fun isReady(completeCheck: Boolean?): Boolean = definedExternally
	override fun getVerticesData(kind: String, copyWhenShared: Boolean?  /* null */, forceCopy: Boolean?  /* null */): Any/* Array<Number> | Float32Array */
    override fun setVerticesData(kind: String, data: Array<Number>, updatable: Boolean?, stride: Int?): Mesh = definedExternally
    override fun setVerticesData(kind: String, data: Float32Array, updatable: Boolean?, stride: Int?): Mesh = definedExternally
    override fun updateVerticesData(kind: String, data: Array<Number>, updateExtends: Boolean?, makeItUnique: Boolean?): Mesh = definedExternally
    override fun updateVerticesData(kind: String, data: Float32Array, updateExtends: Boolean?, makeItUnique: Boolean?): Mesh = definedExternally
    override fun setIndices(indices: Array<Number>, totalVertices:Int?, updatable: Boolean?): Mesh = definedExternally
    override fun setIndices(indices: Int32Array, totalVertices:Int?, updatable: Boolean?): Mesh = definedExternally
    override fun setIndices(indices: Uint32Array, totalVertices:Int?, updatable: Boolean?): Mesh = definedExternally
    override fun setIndices(indices: Uint16Array, totalVertices:Int?, updatable: Boolean?): Mesh = definedExternally
    override fun isVerticesDataPresent(kind: String): Boolean = definedExternally
	override fun getIndices(copyWhenShared: Boolean?, forceCopy: Boolean?): Any/* Array<Number> | Int32Array | Uint32Array | Uint16Array */
    override var _positions: Array<Vector3> = definedExternally
    override fun refreshBoundingInfo(applySkeleton: Boolean?): InstancedMesh = definedExternally
    override fun _preActivate(): InstancedMesh = definedExternally
    override fun _activate(renderId: Number, intermediateRendering: Boolean): Boolean = definedExternally
    override fun _postActivate(): Unit = definedExternally
    override fun getWorldMatrix(): Matrix = definedExternally
    override var isAnInstance: Boolean = definedExternally
    override fun getLOD(camera: Camera): AbstractMesh = definedExternally
    open fun _syncSubMeshes(): InstancedMesh = definedExternally
    override fun _generatePointsArray(): Boolean = definedExternally
    override fun clone(name: String, newParent: Node, doNotCloneChildren: Boolean?): InstancedMesh = definedExternally
	override fun dispose():Unit;
    override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
}
external interface IShaderMaterialOptions {
    var needAlphaBlending: Boolean
    var needAlphaTesting: Boolean
    var attributes: Array<String>
    var uniforms: Array<String>
    var uniformBuffers: Array<String>
    var samplers: Array<String>
    var defines: Array<String>
}
external open class ShaderMaterial(name: String, scene: Scene, shaderPath: Any, options: Any? = definedExternally /* null */) : Material {
    open var _shaderPath: Any = definedExternally
    open var _options: Any = definedExternally
    open var _textures: Any = definedExternally
    open var _textureArrays: Any = definedExternally
    open var _floats: Any = definedExternally
    open var _ints: Any = definedExternally
    open var _floatsArrays: Any = definedExternally
    open var _colors3: Any = definedExternally
    open var _colors3Arrays: Any = definedExternally
    open var _colors4: Any = definedExternally
    open var _vectors2: Any = definedExternally
    open var _vectors3: Any = definedExternally
    open var _vectors4: Any = definedExternally
    open var _matrices: Any = definedExternally
    open var _matrices3x3: Any = definedExternally
    open var _matrices2x2: Any = definedExternally
    open var _vectors2Arrays: Any = definedExternally
    open var _vectors3Arrays: Any = definedExternally
    open var _cachedWorldViewMatrix: Any = definedExternally
    open var _renderId: Any = definedExternally
    open var options: IShaderMaterialOptions = definedExternally
    override fun getClassName(): String = definedExternally
    override fun needAlphaBlending(): Boolean = definedExternally
    override fun needAlphaTesting(): Boolean = definedExternally
    open var _checkUniform: Any = definedExternally
    open fun setTexture(name: String, texture: Texture): ShaderMaterial = definedExternally
    open fun setTextureArray(name: String, textures: Array<Texture>): ShaderMaterial = definedExternally
    open fun setFloat(name: String, value: Number): ShaderMaterial = definedExternally
    open fun setInt(name: String, value: Number): ShaderMaterial = definedExternally
    open fun setFloats(name: String, value: Array<Number>): ShaderMaterial = definedExternally
    open fun setColor3(name: String, value: Color3): ShaderMaterial = definedExternally
    open fun setColor3Array(name: String, value: Array<Color3>): ShaderMaterial = definedExternally
    open fun setColor4(name: String, value: Color4): ShaderMaterial = definedExternally
    open fun setVector2(name: String, value: Vector2): ShaderMaterial = definedExternally
    open fun setVector3(name: String, value: Vector3): ShaderMaterial = definedExternally
    open fun setVector4(name: String, value: Vector4): ShaderMaterial = definedExternally
    open fun setMatrix(name: String, value: Matrix): ShaderMaterial = definedExternally
    open fun setMatrix3x3(name: String, value: Float32Array): ShaderMaterial = definedExternally
    open fun setMatrix2x2(name: String, value: Float32Array): ShaderMaterial = definedExternally
    open fun setArray2(name: String, value: Array<Number>): ShaderMaterial = definedExternally
    open fun setArray3(name: String, value: Array<Number>): ShaderMaterial = definedExternally
    open var _checkCache: Any = definedExternally
    override fun isReadyForSubMesh(mesh: AbstractMesh, subMesh: BaseSubMesh, useInstances: Boolean?): Boolean = definedExternally
    override fun isReady(mesh: AbstractMesh?, useInstances: Boolean?): Boolean = definedExternally
    override fun bindOnlyWorldMatrix(world: Matrix): Unit = definedExternally
    override fun bind(world: Matrix, mesh: Mesh?): Unit = definedExternally
    override fun getActiveTextures(): Array<BaseTexture> = definedExternally
    override fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    override fun clone(name: String): ShaderMaterial = definedExternally
    override fun dispose(forceDisposeEffect: Boolean?, forceDisposeTextures: Boolean?, notBoundToMesh: Boolean?): Unit = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        fun Parse(source: Any, scene: Scene, rootUrl: String): ShaderMaterial = definedExternally
    }
}
external object colorPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object colorVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class LinesMesh(name: String, scene: Scene? = definedExternally /* null */, parent: Node? = definedExternally /* null */, source: LinesMesh? = definedExternally /* null */, doNotCloneChildren: Boolean? = definedExternally /* null */, useVertexColor: Boolean? = definedExternally /* null */, useVertexAlpha: Boolean? = definedExternally /* null */) : Mesh {
    open var useVertexColor: Boolean = definedExternally
    open var useVertexAlpha: Boolean = definedExternally
    open var color: Color3 = definedExternally
    open var alpha: Number = definedExternally
    open var intersectionThreshold: Number = definedExternally
    open var _colorShader: Any = definedExternally
    open var _addClipPlaneDefine: Any = definedExternally
    open var _removeClipPlaneDefine: Any = definedExternally
    open fun isReady(): Boolean = definedExternally
    override fun getClassName(): String = definedExternally
    override var material: Material = definedExternally
    override var checkCollisions: Boolean = definedExternally
    override fun _bind(subMesh: SubMesh, effect: Effect, fillMode: Number): LinesMesh = definedExternally
    override fun _draw(subMesh: SubMesh, fillMode: Number, instancesCount: Number?): LinesMesh = definedExternally
	override fun dispose(): Unit = definedExternally
	open fun dispose(doNotRecurse: Boolean? = definedExternally /* null */): Unit = definedExternally
	open fun clone(name: String, newParent: Node?, doNotCloneChildren: Boolean?): LinesMesh = definedExternally
    override fun createInstance(name: String): InstancedLinesMesh = definedExternally
	override fun enableEdgesRendering(epsilon: Number?  /* null */, checkVerticesInsteadOfIndices: Boolean?  /* null */): AbstractMesh
}
external open class InstancedLinesMesh(name: String, source: LinesMesh) : InstancedMesh {
    open var intersectionThreshold: Number = definedExternally
    override fun getClassName(): String = definedExternally
	override fun enableEdgesRendering(epsilon: Number?  /* null */, checkVerticesInsteadOfIndices: Boolean?  /* null */): InstancedLinesMesh
}
external object linePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object lineVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class AbstractMesh(name: String, scene: Scene? = definedExternally /* null */) : TransformNode, IDisposable, ICullable, IGetSetVerticesData {
    open var _internalAbstractMeshDataInfo: _InternalAbstractMeshDataInfo = definedExternally
    open var cullingStrategy: Number = definedExternally
    open var facetNb: Number = definedExternally
    open var partitioningSubdivisions: Number = definedExternally
    open var partitioningBBoxRatio: Number = definedExternally
    open var mustDepthSortFacets: Boolean = definedExternally
    open var facetDepthSortFrom: Vector3 = definedExternally
    open var isFacetDataEnabled: Boolean = definedExternally
    override fun _updateNonUniformScalingState(value: Boolean): Boolean = definedExternally
    open var onCollideObservable: Observable<AbstractMesh> = definedExternally
    open var onCollide: () -> Unit = definedExternally
    open var onCollisionPositionChangeObservable: Observable<Vector3> = definedExternally
    open var onCollisionPositionChange: () -> Unit = definedExternally
    open var onMaterialChangedObservable: Observable<AbstractMesh> = definedExternally
    open var definedFacingForward: Boolean = definedExternally
    open var _occlusionQuery: WebGLQuery = definedExternally
    open var _renderingGroup: RenderingGroup = definedExternally
    open var visibility: Number = definedExternally
    open var alphaIndex: Number = definedExternally
    open var isVisible: Boolean = definedExternally
    open var isPickable: Boolean = definedExternally
    open var showSubMeshesBoundingBox: Boolean = definedExternally
    open var isBlocker: Boolean = definedExternally
    open var enablePointerMoveEvents: Boolean = definedExternally
    open var renderingGroupId: Number = definedExternally
    open var _material: Any = definedExternally
    open var material: Material = definedExternally
    open var receiveShadows: Boolean = definedExternally
    open var outlineColor: Color3 = definedExternally
    open var outlineWidth: Number = definedExternally
    open var overlayColor: Color3 = definedExternally
    open var overlayAlpha: Number = definedExternally
    open var hasVertexAlpha: Boolean = definedExternally
    open var useVertexColors: Boolean = definedExternally
    open var computeBonesUsingShaders: Boolean = definedExternally
    open var numBoneInfluencers: Number = definedExternally
    open var applyFog: Boolean = definedExternally
    open var useOctreeForRenderingSelection: Boolean = definedExternally
    open var useOctreeForPicking: Boolean = definedExternally
    open var useOctreeForCollisions: Boolean = definedExternally
    open var layerMask: Number = definedExternally
    open var alwaysSelectAsActiveMesh: Boolean = definedExternally
    open var doNotSyncBoundingInfo: Boolean = definedExternally
    open var actionManager: AbstractActionManager = definedExternally
    open var _meshCollisionData: Any = definedExternally
    open var ellipsoid: Vector3 = definedExternally
    open var ellipsoidOffset: Vector3 = definedExternally
    open var collisionMask: Number = definedExternally
    open var collisionGroup: Number = definedExternally
    open var edgesWidth: Number = definedExternally
    open var edgesColor: Color4 = definedExternally
    open var _edgesRenderer: IEdgesRenderer = definedExternally
    open var _masterMesh: AbstractMesh = definedExternally
    open var _boundingInfo: BoundingInfo = definedExternally
    open var _renderId: Number = definedExternally
    open var subMeshes: Array<SubMesh> = definedExternally
    open var _intersectionsInProgress: Array<AbstractMesh> = definedExternally
    open var _unIndexed: Boolean = definedExternally
    open var _lightSources: Array<Light> = definedExternally
    open var lightSources: Array<Light> = definedExternally
    open var _positions: Array<Vector3> = definedExternally
    open var _waitingData: `T$51` = definedExternally
    open var _bonesTransformMatrices: Float32Array = definedExternally
    open var skeleton: Skeleton = definedExternally
    open var onRebuildObservable: Observable<AbstractMesh> = definedExternally
    override fun getClassName(): String = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    override fun _getEffectiveParent(): Node = definedExternally
    override fun _getActionManagerForTrigger(trigger: Number?, initialCall: Boolean?): AbstractActionManager = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun _resyncLightSources(): Unit = definedExternally
    open fun _resyncLighSource(light: Light): Unit = definedExternally
    open fun _unBindEffect(): Unit = definedExternally
    open fun _removeLightSource(light: Light): Unit = definedExternally
    open var _markSubMeshesAsDirty: Any = definedExternally
    open fun _markSubMeshesAsLightDirty(): Unit = definedExternally
    open fun _markSubMeshesAsAttributesDirty(): Unit = definedExternally
    open fun _markSubMeshesAsMiscDirty(): Unit = definedExternally
    override var scaling: Vector3 = definedExternally
    open var isBlocked: Boolean = definedExternally
    open fun getLOD(camera: Camera): AbstractMesh = definedExternally
    open fun getTotalVertices(): Number = definedExternally
    open fun getTotalIndices(): Number = definedExternally
	override fun getIndices(copyWhenShared: Boolean?, forceCopy: Boolean?): Any/* Array<Number> | Int32Array | Uint32Array | Uint16Array */
	override fun getVerticesData(kind: String, copyWhenShared: Boolean?  /* null */, forceCopy: Boolean?  /* null */): Any/* Array<Number> | Float32Array */
	override fun setVerticesData(kind: String, data: Array<Number>, updatable: Boolean?  /* null */, stride: Int?  /* null */): AbstractMesh = definedExternally
	override fun setVerticesData(kind: String, data: Float32Array, updatable: Boolean?  /* null */, stride: Int?  /* null */): AbstractMesh = definedExternally
    override fun updateVerticesData(kind: String, data: Array<Number>, updateExtends: Boolean?, makeItUnique: Boolean?): AbstractMesh = definedExternally
    override fun updateVerticesData(kind: String, data: Float32Array, updateExtends: Boolean?, makeItUnique: Boolean?): AbstractMesh = definedExternally
    override  fun setIndices(indices: Array<Number>, totalVertices: Int?, updatable: Boolean?): AbstractMesh = definedExternally
    override  fun setIndices(indices: Int32Array, totalVertices: Int?, updatable: Boolean?): AbstractMesh = definedExternally
    override  fun setIndices(indices: Uint32Array, totalVertices: Int?, updatable: Boolean?): AbstractMesh = definedExternally
    override  fun setIndices(indices: Uint16Array, totalVertices: Int?, updatable: Boolean?): AbstractMesh = definedExternally
    override fun isVerticesDataPresent(kind: String): Boolean = definedExternally
    open fun getBoundingInfo(): BoundingInfo = definedExternally
    open fun normalizeToUnitCube(includeDescendants: Boolean? = definedExternally /* null */, ignoreRotation: Boolean? = definedExternally /* null */): AbstractMesh = definedExternally
    open fun setBoundingInfo(boundingInfo: BoundingInfo): AbstractMesh = definedExternally
    open var useBones: Boolean = definedExternally
    open fun _preActivate(): Unit = definedExternally
    open fun _preActivateForIntermediateRendering(renderId: Number): Unit = definedExternally
    open fun _activate(renderId: Number, intermediateRendering: Boolean): Boolean = definedExternally
    open fun _postActivate(): Unit = definedExternally
    open fun _freeze(): Unit = definedExternally
    open fun _unFreeze(): Unit = definedExternally
    override fun getWorldMatrix(): Matrix = definedExternally
    override fun _getWorldMatrixDeterminant(): Number = definedExternally
    open var isAnInstance: Boolean = definedExternally
    open fun movePOV(amountRight: Number, amountUp: Number, amountForward: Number): AbstractMesh = definedExternally
    open fun calcMovePOV(amountRight: Number, amountUp: Number, amountForward: Number): Vector3 = definedExternally
    open fun rotatePOV(flipBack: Number, twirlClockwise: Number, tiltRight: Number): AbstractMesh = definedExternally
    open fun calcRotatePOV(flipBack: Number, twirlClockwise: Number, tiltRight: Number): Vector3 = definedExternally
    open fun refreshBoundingInfo(applySkeleton: Boolean? = definedExternally /* null */): AbstractMesh = definedExternally
    open fun _refreshBoundingInfo(data: Array<Number>, bias: Vector2): Unit = definedExternally
    open fun _refreshBoundingInfo(data: Float32Array, bias: Vector2): Unit = definedExternally
    open fun _getPositionData(applySkeleton: Boolean): dynamic /* Array<Number> | Float32Array */ = definedExternally
    open fun _updateBoundingInfo(): AbstractMesh = definedExternally
    open fun _updateSubMeshesBoundingInfo(matrix: Matrix): AbstractMesh = definedExternally
    override fun _afterComputeWorldMatrix(): Unit = definedExternally
    open var _effectiveMesh: AbstractMesh = definedExternally
    override fun isInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    override fun isCompletelyInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun intersectsMesh(mesh: AbstractMesh, precise: Boolean? = definedExternally /* null */, includeDescendants: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun intersectsMesh(mesh: SolidParticle, precise: Boolean? = definedExternally /* null */, includeDescendants: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun intersectsPoint(point: Vector3): Boolean = definedExternally
    open var checkCollisions: Boolean = definedExternally
    open var collider: Collider = definedExternally
    open fun moveWithCollisions(displacement: Vector3): AbstractMesh = definedExternally
    open var _onCollisionPositionChange: Any = definedExternally
    open fun _collideForSubMesh(subMesh: SubMesh, transformMatrix: Matrix, collider: Collider): AbstractMesh = definedExternally
    open fun _processCollisionsForSubMeshes(collider: Collider, transformMatrix: Matrix): AbstractMesh = definedExternally
    open fun _checkCollision(collider: Collider): AbstractMesh = definedExternally
    open fun _generatePointsArray(): Boolean = definedExternally
    open fun intersects(ray: Ray, fastCheck: Boolean? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): PickingInfo = definedExternally
    override fun clone(name: String, newParent: Node, doNotCloneChildren: Boolean?): AbstractMesh = definedExternally
    open fun releaseSubMeshes(): AbstractMesh = definedExternally
	override fun dispose(): Unit = definedExternally
	override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
    open fun addChild(mesh: AbstractMesh): AbstractMesh = definedExternally
    open fun removeChild(mesh: AbstractMesh): AbstractMesh = definedExternally
    open var _initFacetData: Any = definedExternally
    open fun updateFacetData(): AbstractMesh = definedExternally
    open fun getFacetLocalNormals(): Array<Vector3> = definedExternally
    open fun getFacetLocalPositions(): Array<Vector3> = definedExternally
    open fun getFacetLocalPartitioning(): Array<Array<Number>> = definedExternally
    open fun getFacetPosition(i: Number): Vector3 = definedExternally
    open fun getFacetPositionToRef(i: Number, ref: Vector3): AbstractMesh = definedExternally
    open fun getFacetNormal(i: Number): Vector3 = definedExternally
    open fun getFacetNormalToRef(i: Number, ref: Vector3): AbstractMesh /* this */ = definedExternally
    open fun getFacetsAtLocalCoordinates(x: Number, y: Number, z: Number): Array<Number> = definedExternally
    open fun getClosestFacetAtCoordinates(x: Number, y: Number, z: Number, projected: Vector3? = definedExternally /* null */, checkFace: Boolean? = definedExternally /* null */, facing: Boolean? = definedExternally /* null */): Number = definedExternally
    open fun getClosestFacetAtLocalCoordinates(x: Number, y: Number, z: Number, projected: Vector3? = definedExternally /* null */, checkFace: Boolean? = definedExternally /* null */, facing: Boolean? = definedExternally /* null */): Number = definedExternally
    open fun getFacetDataParameters(): Any = definedExternally
    open fun disableFacetData(): AbstractMesh = definedExternally
    open fun updateIndices(indices: Array<Number>, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): AbstractMesh = definedExternally
    open fun updateIndices(indices: Int32Array, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): AbstractMesh = definedExternally
    open fun updateIndices(indices: Uint32Array, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): AbstractMesh = definedExternally
    open fun updateIndices(indices: Uint16Array, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): AbstractMesh = definedExternally
    open fun createNormals(updatable: Boolean): AbstractMesh = definedExternally
    open fun alignWithNormal(normal: Vector3, upDirection: Vector3? = definedExternally /* null */): AbstractMesh = definedExternally
    open fun _checkOcclusionQuery(): Boolean = definedExternally
    open fun disableEdgesRendering(): AbstractMesh = definedExternally
    open fun enableEdgesRendering(epsilon: Number? = definedExternally /* null */, checkVerticesInsteadOfIndices: Boolean? = definedExternally /* null */): AbstractMesh = definedExternally
    companion object {
        var OCCLUSION_TYPE_NONE: Number = definedExternally
        var OCCLUSION_TYPE_OPTIMISTIC: Number = definedExternally
        var OCCLUSION_TYPE_STRICT: Number = definedExternally
        var OCCLUSION_ALGORITHM_TYPE_ACCURATE: Number = definedExternally
        var OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE: Number = definedExternally
        var CULLINGSTRATEGY_STANDARD: Number = definedExternally
        var CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY: Number = definedExternally
        var CULLINGSTRATEGY_OPTIMISTIC_INCLUSION: Number = definedExternally
        var CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY: Number = definedExternally
        var BILLBOARDMODE_NONE: Number = definedExternally
        var BILLBOARDMODE_X: Number = definedExternally
        var BILLBOARDMODE_Y: Number = definedExternally
        var BILLBOARDMODE_Z: Number = definedExternally
        var BILLBOARDMODE_ALL: Number = definedExternally
    }
    var edgesRenderer: EdgesRenderer
    var _submeshesOctree: Octree<SubMesh>
    fun createOrUpdateSubmeshesOctree(maxCapacity: Number? = definedExternally /* null */, maxDepth: Number? = definedExternally /* null */): Octree<SubMesh>
    var __occlusionDataStorage: _OcclusionDataStorage
    var _occlusionDataStorage: _OcclusionDataStorage
    var occlusionRetryCount: Number
    var occlusionType: Number
    var occlusionQueryAlgorithmType: Number
    var isOccluded: Boolean
    var isOcclusionQueryInProgress: Boolean
    var _physicsImpostor: PhysicsImpostor
    var physicsImpostor: PhysicsImpostor
    fun getPhysicsImpostor(): PhysicsImpostor
    fun applyImpulse(force: Vector3, contactPoint: Vector3): AbstractMesh
    fun setPhysicsLinkWith(otherMesh: Mesh, pivot1: Vector3, pivot2: Vector3, options: Any? = definedExternally /* null */): AbstractMesh
    var _disposePhysicsObserver: Observer<Node>
    var _showBoundingBox: Boolean
    var showBoundingBox: Boolean
    var _renderOutline: Boolean
    var renderOutline: Boolean
    var _renderOverlay: Boolean
    var renderOverlay: Boolean
}
external interface IEdgesRenderer : IDisposable {
    var isEnabled: Boolean
    fun render()
    fun isReady(): Boolean
}
external interface `T$9` {
    @nativeGetter
    operator fun get(key: String): VertexBuffer?
    @nativeSetter
    operator fun set(key: String, value: VertexBuffer)
}
external open class EdgesRenderer(source: AbstractMesh, epsilon: Number? = definedExternally /* null */, checkVerticesInsteadOfIndices: Boolean? = definedExternally /* null */, generateEdgesLines: Boolean? = definedExternally /* null */) : IEdgesRenderer {
    open var edgesWidthScalerForOrthographic: Number = definedExternally
    open var edgesWidthScalerForPerspective: Number = definedExternally
    open var _source: AbstractMesh = definedExternally
    open var _linesPositions: Array<Number> = definedExternally
    open var _linesNormals: Array<Number> = definedExternally
    open var _linesIndices: Array<Number> = definedExternally
    open var _epsilon: Number = definedExternally
    open var _indicesCount: Number = definedExternally
    open var _lineShader: ShaderMaterial = definedExternally
    open var _ib: DataBuffer = definedExternally
    open var _buffers: `T$9` = definedExternally
    open var _checkVerticesInsteadOfIndices: Boolean = definedExternally
    open var _meshRebuildObserver: Any = definedExternally
    open var _meshDisposeObserver: Any = definedExternally
    override var isEnabled: Boolean = definedExternally
    open fun _prepareRessources(): Unit = definedExternally
    open fun _rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun _processEdgeForAdjacencies(pa: Number, pb: Number, p0: Number, p1: Number, p2: Number): Number = definedExternally
    open fun _processEdgeForAdjacenciesWithVertices(pa: Vector3, pb: Vector3, p0: Vector3, p1: Vector3, p2: Vector3): Number = definedExternally
    open fun _checkEdge(faceIndex: Number, edge: Number, faceNormals: Array<Vector3>, p0: Vector3, p1: Vector3): Unit = definedExternally
    open fun createLine(p0: Vector3, p1: Vector3, offset: Number): Unit = definedExternally
    open fun _generateEdgesLines(): Unit = definedExternally
    override fun isReady(): Boolean = definedExternally
    override fun render(): Unit = definedExternally
}
external open class LineEdgesRenderer(source: AbstractMesh, epsilon: Number? = definedExternally /* null */, checkVerticesInsteadOfIndices: Boolean? = definedExternally /* null */) : EdgesRenderer {
    override fun _generateEdgesLines(): Unit = definedExternally
}
external open class RenderingGroup(index: Number, scene: Scene, opaqueSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, alphaTestSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, transparentSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */) {
    open var index: Number = definedExternally
    open var _scene: Any = definedExternally
    open var _opaqueSubMeshes: Any = definedExternally
    open var _transparentSubMeshes: Any = definedExternally
    open var _alphaTestSubMeshes: Any = definedExternally
    open var _depthOnlySubMeshes: Any = definedExternally
    open var _particleSystems: Any = definedExternally
    open var _spriteManagers: Any = definedExternally
    open var _opaqueSortCompareFn: Any = definedExternally
    open var _alphaTestSortCompareFn: Any = definedExternally
    open var _transparentSortCompareFn: Any = definedExternally
    open var _renderOpaque: Any = definedExternally
    open var _renderAlphaTest: Any = definedExternally
    open var _renderTransparent: Any = definedExternally
    open var _edgesRenderers: SmartArray<IEdgesRenderer> = definedExternally
    open var onBeforeTransparentRendering: () -> Unit = definedExternally
    open var opaqueSortCompareFn: (a: SubMesh, b: SubMesh) -> Number = definedExternally
    open var alphaTestSortCompareFn: (a: SubMesh, b: SubMesh) -> Number = definedExternally
    open var transparentSortCompareFn: (a: SubMesh, b: SubMesh) -> Number = definedExternally
    open fun render(customRenderFunction: (opaqueSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<SubMesh>, alphaTestSubMeshes: SmartArray<SubMesh>, depthOnlySubMeshes: SmartArray<SubMesh>) -> Unit, renderSprites: Boolean, renderParticles: Boolean, activeMeshes: Array<AbstractMesh>): Unit = definedExternally
    open var renderOpaqueSorted: Any = definedExternally
    open var renderAlphaTestSorted: Any = definedExternally
    open var renderTransparentSorted: Any = definedExternally
    open fun prepare(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun dispatch(subMesh: SubMesh, mesh: AbstractMesh? = definedExternally /* null */, material: Material? = definedExternally /* null */): Unit = definedExternally
    open fun dispatchSprites(spriteManager: ISpriteManager): Unit = definedExternally
    open fun dispatchParticles(particleSystem: IParticleSystem): Unit = definedExternally
    open var _renderParticles: Any = definedExternally
    open var _renderSprites: Any = definedExternally
    companion object {
        var renderSorted: Any = definedExternally
        var renderUnsorted: Any = definedExternally
        fun defaultTransparentSortCompare(a: SubMesh, b: SubMesh): Number = definedExternally
        fun backToFrontSortCompare(a: SubMesh, b: SubMesh): Number = definedExternally
        fun frontToBackSortCompare(a: SubMesh, b: SubMesh): Number = definedExternally
    }
}
external interface IRenderingManagerAutoClearSetup {
    var autoClear: Boolean
    var depth: Boolean
    var stencil: Boolean
}
external open class RenderingGroupInfo {
    open var scene: Scene = definedExternally
    open var camera: Camera = definedExternally
    open var renderingGroupId: Number = definedExternally
}
external open class RenderingManager(scene: Scene) {
    open var _useSceneAutoClearSetup: Boolean = definedExternally
    open var _scene: Any = definedExternally
    open var _renderingGroups: Any = definedExternally
    open var _depthStencilBufferAlreadyCleaned: Any = definedExternally
    open var _autoClearDepthStencil: Any = definedExternally
    open var _customOpaqueSortCompareFn: Any = definedExternally
    open var _customAlphaTestSortCompareFn: Any = definedExternally
    open var _customTransparentSortCompareFn: Any = definedExternally
    open var _renderingGroupInfo: Any = definedExternally
    open var _clearDepthStencilBuffer: Any = definedExternally
    open fun render(customRenderFunction: (opaqueSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<SubMesh>, alphaTestSubMeshes: SmartArray<SubMesh>, depthOnlySubMeshes: SmartArray<SubMesh>) -> Unit, activeMeshes: Array<AbstractMesh>, renderParticles: Boolean, renderSprites: Boolean): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun freeRenderingGroups(): Unit = definedExternally
    open var _prepareRenderingGroup: Any = definedExternally
    open fun dispatchSprites(spriteManager: ISpriteManager): Unit = definedExternally
    open fun dispatchParticles(particleSystem: IParticleSystem): Unit = definedExternally
    open fun dispatch(subMesh: SubMesh, mesh: AbstractMesh? = definedExternally /* null */, material: Material? = definedExternally /* null */): Unit = definedExternally
    open fun setRenderingOrder(renderingGroupId: Number, opaqueSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, alphaTestSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, transparentSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */): Unit = definedExternally
    open fun setRenderingAutoClearDepthStencil(renderingGroupId: Number, autoClearDepthStencil: Boolean, depth: Boolean? = definedExternally /* null */, stencil: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getAutoClearDepthStencilSetup(index: Number): IRenderingManagerAutoClearSetup = definedExternally
    companion object {
        var MAX_RENDERINGGROUPS: Number = definedExternally
        var MIN_RENDERINGGROUPS: Number = definedExternally
        var AUTOCLEAR: Boolean = definedExternally
    }
}
external interface `T$10` {
    var width: Number
    var height: Number
}
external interface `T$11` {
    var ratio: Number
}
external open class RenderTargetTexture : Texture {
    constructor(name: String, size: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, doNotChangeAspectRatio: Boolean? = definedExternally /* null */, type: Number? = definedExternally /* null */, isCube: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, generateDepthBuffer: Boolean? = definedExternally /* null */, generateStencilBuffer: Boolean? = definedExternally /* null */, isMulti: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */, delayAllocation: Boolean? = definedExternally /* null */)
    constructor(name: String, size: `T$10`, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, doNotChangeAspectRatio: Boolean? = definedExternally /* null */, type: Number? = definedExternally /* null */, isCube: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, generateDepthBuffer: Boolean? = definedExternally /* null */, generateStencilBuffer: Boolean? = definedExternally /* null */, isMulti: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */, delayAllocation: Boolean? = definedExternally /* null */)
    constructor(name: String, size: `T$11`, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, doNotChangeAspectRatio: Boolean? = definedExternally /* null */, type: Number? = definedExternally /* null */, isCube: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, generateDepthBuffer: Boolean? = definedExternally /* null */, generateStencilBuffer: Boolean? = definedExternally /* null */, isMulti: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */, delayAllocation: Boolean? = definedExternally /* null */)
    override var isCube: Boolean = definedExternally
    open var renderListPredicate: (AbstractMesh: AbstractMesh) -> Boolean = definedExternally
    open var _renderList: Any = definedExternally
    open var renderList: Array<AbstractMesh> = definedExternally
    open var _hookArray: Any = definedExternally
    open var renderParticles: Boolean = definedExternally
    open var renderSprites: Boolean = definedExternally
    override var coordinatesMode: Number = definedExternally
    open var activeCamera: Camera = definedExternally
    open var customRenderFunction: (opaqueSubMeshes: SmartArray<SubMesh>, alphaTestSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<SubMesh>, depthOnlySubMeshes: SmartArray<SubMesh>, beforeTransparents: (() -> Unit)? /*= null*/) -> Unit = definedExternally
    open var useCameraPostProcesses: Boolean = definedExternally
    open var ignoreCameraViewport: Boolean = definedExternally
    open var _postProcessManager: Any = definedExternally
    open var _postProcesses: Any = definedExternally
    open var _resizeObserver: Any = definedExternally
    open var onBeforeBindObservable: Observable<RenderTargetTexture> = definedExternally
    open var onAfterUnbindObservable: Observable<RenderTargetTexture> = definedExternally
    open var _onAfterUnbindObserver: Any = definedExternally
    open var onAfterUnbind: () -> Unit = definedExternally
    open var onBeforeRenderObservable: Observable<Number> = definedExternally
    open var _onBeforeRenderObserver: Any = definedExternally
    open var onBeforeRender: (faceIndex: Number) -> Unit = definedExternally
    open var onAfterRenderObservable: Observable<Number> = definedExternally
    open var _onAfterRenderObserver: Any = definedExternally
    open var onAfterRender: (faceIndex: Number) -> Unit = definedExternally
    open var onClearObservable: Observable<Engine> = definedExternally
    open var _onClearObserver: Any = definedExternally
    open var onClear: (Engine: Engine) -> Unit = definedExternally
    open var clearColor: Color4 = definedExternally
    open var _size: dynamic /* Number | `T$10` */ = definedExternally
    open var _initialSizeParameter: dynamic /* Number | `T$10` | `T$11` */ = definedExternally
    open var _sizeRatio: Number = definedExternally
    open var _generateMipMaps: Boolean = definedExternally
    open var _renderingManager: RenderingManager = definedExternally
    open var _waitingRenderList: Array<String> = definedExternally
    open var _doNotChangeAspectRatio: Boolean = definedExternally
    open var _currentRefreshId: Number = definedExternally
    open var _refreshRate: Number = definedExternally
    open var _textureMatrix: Matrix = definedExternally
    open var _samples: Number = definedExternally
    open var _renderTargetOptions: RenderTargetCreationOptions = definedExternally
    open var renderTargetOptions: RenderTargetCreationOptions = definedExternally
    open var _engine: Engine = definedExternally
    open fun _onRatioRescale(): Unit = definedExternally
    open var boundingBoxPosition: Vector3 = definedExternally
    open var _boundingBoxSize: Any = definedExternally
    open var boundingBoxSize: Vector3 = definedExternally
    open var depthStencilTexture: InternalTexture = definedExternally
    open fun createDepthStencilTexture(comparisonFunction: Number? = definedExternally /* null */, bilinearFiltering: Boolean? = definedExternally /* null */, generateStencil: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _processSizeParameter: Any = definedExternally
    open var samples: Number = definedExternally
    open fun resetRefreshCounter(): Unit = definedExternally
    open var refreshRate: Number = definedExternally
    open fun addPostProcess(postProcess: PostProcess): Unit = definedExternally
    open fun clearPostProcesses(dispose: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun removePostProcess(postProcess: PostProcess): Unit = definedExternally
    open fun _shouldRender(): Boolean = definedExternally
    open fun getRenderSize(): Number = definedExternally
    open fun getRenderWidth(): Number = definedExternally
    open fun getRenderHeight(): Number = definedExternally
    override var canRescale: Boolean = definedExternally
    override fun scale(ratio: Number): Unit = definedExternally
    override fun getReflectionTextureMatrix(): Matrix = definedExternally
    open fun resize(size: Number): Unit = definedExternally
    open fun resize(size: `T$10`): Unit = definedExternally
    open fun resize(size: `T$11`): Unit = definedExternally
    open fun render(useCameraPostProcess: Boolean? = definedExternally /* null */, dumpForDebug: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _bestReflectionRenderTargetDimension: Any = definedExternally
    open fun _bindFrameBuffer(faceIndex: Number? = definedExternally /* null */): Unit = definedExternally
    open fun unbindFrameBuffer(engine: Engine, faceIndex: Number): Unit = definedExternally
    open var renderToTarget: Any = definedExternally
    open fun setRenderingOrder(renderingGroupId: Number, opaqueSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, alphaTestSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */, transparentSortCompareFn: ((a: SubMesh, b: SubMesh) -> Number)? = definedExternally /* null */): Unit = definedExternally
    open fun setRenderingAutoClearDepthStencil(renderingGroupId: Number, autoClearDepthStencil: Boolean): Unit = definedExternally
    override fun clone(): RenderTargetTexture = definedExternally
    override fun serialize(): Any = definedExternally
    open fun disposeFramebufferObjects(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun _rebuild(): Unit = definedExternally
    open fun freeRenderingGroups(): Unit = definedExternally
    open fun getViewCount(): Number = definedExternally
    companion object {
        var REFRESHRATE_RENDER_ONCE: Number = definedExternally
        var REFRESHRATE_RENDER_ONEVERYFRAME: Number = definedExternally
        var REFRESHRATE_RENDER_ONEVERYTWOFRAMES: Number = definedExternally
    }
}
external interface `T$12` {
    var width: Number
    var height: Number
}
external interface `T$13` {
    var ratio: Number
}
external open class MirrorTexture : RenderTargetTexture {
    constructor(name: String, size: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, type: Number? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, generateDepthBuffer: Boolean? = definedExternally /* null */)
    constructor(name: String, size: `T$12`, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, type: Number? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, generateDepthBuffer: Boolean? = definedExternally /* null */)
    constructor(name: String, size: `T$13`, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, type: Number? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, generateDepthBuffer: Boolean? = definedExternally /* null */)
    open var scene: Any = definedExternally
    open var mirrorPlane: Plane = definedExternally
    open var blurRatio: Number = definedExternally
    open var adaptiveBlurKernel: Number = definedExternally
    open var blurKernel: Number = definedExternally
    open var blurKernelX: Number = definedExternally
    open var blurKernelY: Number = definedExternally
    open var _autoComputeBlurKernel: Any = definedExternally
    override fun _onRatioRescale(): Unit = definedExternally
    open var _updateGammaSpace: Any = definedExternally
    open var _imageProcessingConfigChangeObserver: Any = definedExternally
    open var _transformMatrix: Any = definedExternally
    open var _mirrorMatrix: Any = definedExternally
    open var _savedViewMatrix: Any = definedExternally
    open var _blurX: Any = definedExternally
    open var _blurY: Any = definedExternally
    open var _adaptiveBlurKernel: Any = definedExternally
    open var _blurKernelX: Any = definedExternally
    open var _blurKernelY: Any = definedExternally
    open var _blurRatio: Any = definedExternally
    open var _preparePostProcesses: Any = definedExternally
    override fun clone(): MirrorTexture = definedExternally
    override fun serialize(): Any = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class Texture : BaseTexture {
    constructor(url: String, scene: Scene, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, buffer: String? = definedExternally /* null */, deleteBuffer: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */)
    constructor(url: String, scene: Scene, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, buffer: HTMLImageElement? = definedExternally /* null */, deleteBuffer: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */)
    constructor(url: String, scene: Scene, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, buffer: Blob? = definedExternally /* null */, deleteBuffer: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */)
    constructor(url: String, scene: Scene, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, buffer: ArrayBuffer? = definedExternally /* null */, deleteBuffer: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */)
    open var url: String = definedExternally
    open var uOffset: Number = definedExternally
    open var vOffset: Number = definedExternally
    open var uScale: Number = definedExternally
    open var vScale: Number = definedExternally
    open var uAng: Number = definedExternally
    open var vAng: Number = definedExternally
    open var wAng: Number = definedExternally
    open var uRotationCenter: Number = definedExternally
    open var vRotationCenter: Number = definedExternally
    open var wRotationCenter: Number = definedExternally
    override var noMipmap: Boolean = definedExternally
    open var inspectableCustomProperties: Array<IInspectable> = definedExternally
    open var _noMipmap: Any = definedExternally
    open var _invertY: Boolean = definedExternally
    open var _rowGenerationMatrix: Any = definedExternally
    open var _cachedTextureMatrix: Any = definedExternally
    open var _projectionModeMatrix: Any = definedExternally
    open var _t0: Any = definedExternally
    open var _t1: Any = definedExternally
    open var _t2: Any = definedExternally
    open var _cachedUOffset: Any = definedExternally
    open var _cachedVOffset: Any = definedExternally
    open var _cachedUScale: Any = definedExternally
    open var _cachedVScale: Any = definedExternally
    open var _cachedUAng: Any = definedExternally
    open var _cachedVAng: Any = definedExternally
    open var _cachedWAng: Any = definedExternally
    open var _cachedProjectionMatrixId: Any = definedExternally
    open var _cachedCoordinatesMode: Any = definedExternally
    open var _initialSamplingMode: Number = definedExternally
    open var _buffer: dynamic /* String | HTMLImageElement | Blob | ArrayBuffer */ = definedExternally
    open var _deleteBuffer: Any = definedExternally
    open var _format: Number = definedExternally
    open var _delayedOnLoad: Any = definedExternally
    open var _delayedOnError: Any = definedExternally
    open var onLoadObservable: Observable<Texture> = definedExternally
    open var _isBlocking: Boolean = definedExternally
    override var isBlocking: Boolean = definedExternally
    open var samplingMode: Number = definedExternally
    open var invertY: Boolean = definedExternally
    open fun updateURL(url: String, buffer: String? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun updateURL(url: String, buffer: HTMLImageElement? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun updateURL(url: String, buffer: Blob? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun updateURL(url: String, buffer: ArrayBuffer? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    override fun delayLoad(): Unit = definedExternally
    open var _prepareRowForTextureGeneration: Any = definedExternally
    override fun getTextureMatrix(): Matrix = definedExternally
    override fun getReflectionTextureMatrix(): Matrix = definedExternally
    override fun clone(): Texture = definedExternally
    override fun serialize(): Any = definedExternally
    override fun getClassName(): String = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        var _CubeTextureParser: (jsonTexture: Any, scene: Scene, rootUrl: String) -> CubeTexture = definedExternally
        var _CreateMirror: (name: String, renderTargetSize: Number, scene: Scene, generateMipMaps: Boolean) -> MirrorTexture = definedExternally
        var _CreateRenderTargetTexture: (name: String, renderTargetSize: Number, scene: Scene, generateMipMaps: Boolean) -> RenderTargetTexture = definedExternally
        var NEAREST_SAMPLINGMODE: Number = definedExternally
        var NEAREST_NEAREST_MIPLINEAR: Number = definedExternally
        var BILINEAR_SAMPLINGMODE: Number = definedExternally
        var LINEAR_LINEAR_MIPNEAREST: Number = definedExternally
        var TRILINEAR_SAMPLINGMODE: Number = definedExternally
        var LINEAR_LINEAR_MIPLINEAR: Number = definedExternally
        var NEAREST_NEAREST_MIPNEAREST: Number = definedExternally
        var NEAREST_LINEAR_MIPNEAREST: Number = definedExternally
        var NEAREST_LINEAR_MIPLINEAR: Number = definedExternally
        var NEAREST_LINEAR: Number = definedExternally
        var NEAREST_NEAREST: Number = definedExternally
        var LINEAR_NEAREST_MIPNEAREST: Number = definedExternally
        var LINEAR_NEAREST_MIPLINEAR: Number = definedExternally
        var LINEAR_LINEAR: Number = definedExternally
        var LINEAR_NEAREST: Number = definedExternally
        var EXPLICIT_MODE: Number = definedExternally
        var SPHERICAL_MODE: Number = definedExternally
        var PLANAR_MODE: Number = definedExternally
        var CUBIC_MODE: Number = definedExternally
        var PROJECTION_MODE: Number = definedExternally
        var SKYBOX_MODE: Number = definedExternally
        var INVCUBIC_MODE: Number = definedExternally
        var EQUIRECTANGULAR_MODE: Number = definedExternally
        var FIXED_EQUIRECTANGULAR_MODE: Number = definedExternally
        var FIXED_EQUIRECTANGULAR_MIRRORED_MODE: Number = definedExternally
        var CLAMP_ADDRESSMODE: Number = definedExternally
        var WRAP_ADDRESSMODE: Number = definedExternally
        var MIRROR_ADDRESSMODE: Number = definedExternally
        var UseSerializedUrlIfAny: Boolean = definedExternally
        fun Parse(parsedTexture: Any, scene: Scene, rootUrl: String): BaseTexture = definedExternally
        fun CreateFromBase64String(data: String, name: String, scene: Scene, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: (() -> Unit)? = definedExternally /* null */, format: Number? = definedExternally /* null */): Texture = definedExternally
        fun LoadFromDataString(name: String, buffer: Any, scene: Scene, deleteBuffer: Boolean? = definedExternally /* null */, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, format: Number? = definedExternally /* null */): Texture = definedExternally
    }
    open fun updateURL(url: String): Unit = definedExternally
}
external open class RawTexture(data: ArrayBufferView, width: Number, height: Number, format: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */) : Texture {
    open var format: Number = definedExternally
    open var _engine: Any = definedExternally
    open fun update(data: ArrayBufferView): Unit = definedExternally
    companion object {
        fun CreateLuminanceTexture(data: ArrayBufferView, width: Number, height: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */): RawTexture = definedExternally
        fun CreateLuminanceAlphaTexture(data: ArrayBufferView, width: Number, height: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */): RawTexture = definedExternally
        fun CreateAlphaTexture(data: ArrayBufferView, width: Number, height: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */): RawTexture = definedExternally
        fun CreateRGBTexture(data: ArrayBufferView, width: Number, height: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */): RawTexture = definedExternally
        fun CreateRGBATexture(data: ArrayBufferView, width: Number, height: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */): RawTexture = definedExternally
        fun CreateRTexture(data: ArrayBufferView, width: Number, height: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */): RawTexture = definedExternally
    }
}
external open class RuntimeAnimation(target: Any, animation: Animation, scene: Scene, host: Animatable) {
    open var _events: Any = definedExternally
    open var _currentFrame: Any = definedExternally
    open var _animation: Any = definedExternally
    open var _target: Any = definedExternally
    open var _host: Any = definedExternally
    open var _originalValue: Any = definedExternally
    open var _originalBlendValue: Any = definedExternally
    open var _offsetsCache: Any = definedExternally
    open var _highLimitsCache: Any = definedExternally
    open var _stopped: Any = definedExternally
    open var _blendingFactor: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _currentValue: Any = definedExternally
    open var _animationState: _IAnimationState = definedExternally
    open var _activeTargets: Any = definedExternally
    open var _currentActiveTarget: Any = definedExternally
    open var _directTarget: Any = definedExternally
    open var _targetPath: Any = definedExternally
    open var _weight: Any = definedExternally
    open var _ratioOffset: Any = definedExternally
    open var _previousDelay: Any = definedExternally
    open var _previousRatio: Any = definedExternally
    open var _enableBlending: Any = definedExternally
    open var _keys: Any = definedExternally
    open var _minFrame: Any = definedExternally
    open var _maxFrame: Any = definedExternally
    open var _minValue: Any = definedExternally
    open var _maxValue: Any = definedExternally
    open var _targetIsArray: Any = definedExternally
    open var currentFrame: Number = definedExternally
    open var weight: Number = definedExternally
    open var currentValue: Any = definedExternally
    open var targetPath: String = definedExternally
    open var target: Any = definedExternally
    open var _onLoop: () -> Unit = definedExternally
    open var _preparePath: Any = definedExternally
    open var animation: Animation = definedExternally
    open fun reset(restoreOriginal: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun isStopped(): Boolean = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun setValue(currentValue: Any, weight: Number): Unit = definedExternally
    open var _getOriginalValues: Any = definedExternally
    open var _setValue: Any = definedExternally
    open var _getCorrectLoopMode: Any = definedExternally
    open fun goToFrame(frame: Number): Unit = definedExternally
    open fun _prepareForSpeedRatioChange(newSpeedRatio: Number): Unit = definedExternally
    open fun animate(delay: Number, from: Number, to: Number, loop: Boolean, speedRatio: Number, weight: Number? = definedExternally /* null */): Boolean = definedExternally
}
external open class Animatable(scene: Scene, target: Any, fromFrame: Number? = definedExternally /* null */, toFrame: Number? = definedExternally /* null */, loopAnimation: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */, animations: Array<Animation>? = definedExternally /* null */, onAnimationLoop: (() -> Unit)? = definedExternally /* null */) {
    open var target: Any = definedExternally
    open var fromFrame: Number = definedExternally
    open var toFrame: Number = definedExternally
    open var loopAnimation: Boolean = definedExternally
    open var onAnimationEnd: (() -> Unit)? = definedExternally
    open var onAnimationLoop: (() -> Unit)? = definedExternally
    open var _localDelayOffset: Any = definedExternally
    open var _pausedDelay: Any = definedExternally
    open var _runtimeAnimations: Any = definedExternally
    open var _paused: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _speedRatio: Any = definedExternally
    open var _weight: Any = definedExternally
    open var _syncRoot: Any = definedExternally
    open var disposeOnEnd: Boolean = definedExternally
    open var animationStarted: Boolean = definedExternally
    open var onAnimationEndObservable: Observable<Animatable> = definedExternally
    open var onAnimationLoopObservable: Observable<Animatable> = definedExternally
    open var syncRoot: Animatable = definedExternally
    open var masterFrame: Number = definedExternally
    open var weight: Number = definedExternally
    open var speedRatio: Number = definedExternally
    open fun syncWith(root: Animatable): Animatable = definedExternally
    open fun getAnimations(): Array<RuntimeAnimation> = definedExternally
    open fun appendAnimations(target: Any, animations: Array<Animation>): Unit = definedExternally
    open fun getAnimationByTargetProperty(property: String): Animation = definedExternally
    open fun getRuntimeAnimationByTargetProperty(property: String): RuntimeAnimation = definedExternally
    open fun reset(): Unit = definedExternally
    open fun enableBlending(blendingSpeed: Number): Unit = definedExternally
    open fun disableBlending(): Unit = definedExternally
    open fun goToFrame(frame: Number): Unit = definedExternally
    open fun pause(): Unit = definedExternally
    open fun restart(): Unit = definedExternally
    open var _raiseOnAnimationEnd: Any = definedExternally
    open fun stop(animationName: String? = definedExternally /* null */, targetMask: ((target: Any) -> Boolean)? = definedExternally /* null */): Unit = definedExternally
    open fun waitAsync(): Promise<Animatable> = definedExternally
    open fun _animate(delay: Number): Boolean = definedExternally
}
external interface `T$14` {
    var totalWeight: Number
    var animations: Array<RuntimeAnimation>
    var originalValue: Matrix
}
external interface `T$15` {
    var totalWeight: Number
    var animations: Array<RuntimeAnimation>
    var originalValue: Quaternion
}
external open class Skeleton(name: String, id: String, scene: Scene) : IAnimatable {
    open var name: String = definedExternally
    open var id: String = definedExternally
    open var bones: Array<Bone> = definedExternally
    open var dimensionsAtRest: Vector3 = definedExternally
    open var needInitialSkinMatrix: Boolean = definedExternally
    open var overrideMesh: AbstractMesh = definedExternally
    override var animations: Array<Animation> = definedExternally
    open var _scene: Any = definedExternally
    open var _isDirty: Any = definedExternally
    open var _transformMatrices: Any = definedExternally
    open var _transformMatrixTexture: Any = definedExternally
    open var _meshesWithPoseMatrix: Any = definedExternally
    open var _animatables: Any = definedExternally
    open var _identity: Any = definedExternally
    open var _synchronizedWithMesh: Any = definedExternally
    open var _ranges: Any = definedExternally
    open var _lastAbsoluteTransformsUpdateId: Any = definedExternally
    open var _canUseTextureForBones: Any = definedExternally
    open var _uniqueId: Any = definedExternally
    open var _numBonesWithLinkedTransformNode: Number = definedExternally
    open var _hasWaitingData: Boolean = definedExternally
    open var doNotSerialize: Boolean = definedExternally
    open var _useTextureToStoreBoneMatrices: Any = definedExternally
    open var useTextureToStoreBoneMatrices: Boolean = definedExternally
    open var _animationPropertiesOverride: Any = definedExternally
    open var animationPropertiesOverride: AnimationPropertiesOverride = definedExternally
    open var inspectableCustomProperties: Array<IInspectable> = definedExternally
    open var onBeforeComputeObservable: Observable<Skeleton> = definedExternally
    open var isUsingTextureForMatrices: Boolean = definedExternally
    open var uniqueId: Number = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getChildren(): Array<Bone> = definedExternally
    open fun getTransformMatrices(mesh: AbstractMesh): Float32Array = definedExternally
    open fun getTransformMatrixTexture(): RawTexture = definedExternally
    open fun getScene(): Scene = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    open fun getBoneIndexByName(name: String): Number = definedExternally
    open fun createAnimationRange(name: String, from: Number, to: Number): Unit = definedExternally
    open fun deleteAnimationRange(name: String, deleteFrames: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getAnimationRange(name: String): AnimationRange = definedExternally
    open fun getAnimationRanges(): Array<AnimationRange> = definedExternally
    open fun copyAnimationRange(source: Skeleton, name: String, rescaleAsRequired: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun returnToRest(): Unit = definedExternally
    open var _getHighestAnimationFrame: Any = definedExternally
    open fun beginAnimation(name: String, loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Animatable = definedExternally
    open fun _markAsDirty(): Unit = definedExternally
    open fun _registerMeshWithPoseMatrix(mesh: AbstractMesh): Unit = definedExternally
    open fun _unregisterMeshWithPoseMatrix(mesh: AbstractMesh): Unit = definedExternally
    open var _computeTransformMatrices: Any = definedExternally
    open fun prepare(): Unit = definedExternally
    open fun getAnimatables(): Array<IAnimatable> = definedExternally
    open fun clone(name: String, id: String): Skeleton = definedExternally
    open fun enableBlending(blendingSpeed: Number? = definedExternally /* null */): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun computeAbsoluteTransforms(forceUpdate: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getPoseMatrix(): Matrix = definedExternally
    open fun sortBones(): Unit = definedExternally
    open var _sortBones: Any = definedExternally
    companion object {
        fun Parse(parsedSkeleton: Any, scene: Scene): Skeleton = definedExternally
    }
}
external open class MorphTarget(name: String, influence: Number? = definedExternally /* null */, scene: Scene? = definedExternally /* null */) : IAnimatable {
    open var name: String = definedExternally
    override var animations: Array<Animation> = definedExternally
    open var _scene: Any = definedExternally
    open var _positions: Any = definedExternally
    open var _normals: Any = definedExternally
    open var _tangents: Any = definedExternally
    open var _influence: Any = definedExternally
    open var onInfluenceChanged: Observable<Boolean> = definedExternally
    open var _onDataLayoutChanged: Observable<Unit> = definedExternally
    open var influence: Number = definedExternally
    open var id: String = definedExternally
    open var _animationPropertiesOverride: Any = definedExternally
    open var animationPropertiesOverride: AnimationPropertiesOverride = definedExternally
    open var hasPositions: Boolean = definedExternally
    open var hasNormals: Boolean = definedExternally
    open var hasTangents: Boolean = definedExternally
    open fun setPositions(data: Array<Number>): Unit = definedExternally
    open fun setPositions(data: Float32Array): Unit = definedExternally
    open fun getPositions(): dynamic /* Array<Number> | Float32Array */ = definedExternally
    open fun setNormals(data: Array<Number>): Unit = definedExternally
    open fun setNormals(data: Float32Array): Unit = definedExternally
    open fun getNormals(): dynamic /* Array<Number> | Float32Array */ = definedExternally
    open fun setTangents(data: Array<Number>): Unit = definedExternally
    open fun setTangents(data: Float32Array): Unit = definedExternally
    open fun getTangents(): dynamic /* Array<Number> | Float32Array */ = definedExternally
    open fun serialize(): Any = definedExternally
    open fun getClassName(): String = definedExternally
    companion object {
        fun Parse(serializationObject: Any): MorphTarget = definedExternally
        fun FromMesh(mesh: AbstractMesh, name: String? = definedExternally /* null */, influence: Number? = definedExternally /* null */): MorphTarget = definedExternally
    }
}
external open class MorphTargetManager(scene: Scene? = definedExternally /* null */) {
    open var _targets: Any = definedExternally
    open var _targetInfluenceChangedObservers: Any = definedExternally
    open var _targetDataLayoutChangedObservers: Any = definedExternally
    open var _activeTargets: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _influences: Any = definedExternally
    open var _supportsNormals: Any = definedExternally
    open var _supportsTangents: Any = definedExternally
    open var _vertexCount: Any = definedExternally
    open var _uniqueId: Any = definedExternally
    open var _tempInfluences: Any = definedExternally
    open var uniqueId: Number = definedExternally
    open var vertexCount: Number = definedExternally
    open var supportsNormals: Boolean = definedExternally
    open var supportsTangents: Boolean = definedExternally
    open var numTargets: Number = definedExternally
    open var numInfluencers: Number = definedExternally
    open var influences: Float32Array = definedExternally
    open fun getActiveTarget(index: Number): MorphTarget = definedExternally
    open fun getTarget(index: Number): MorphTarget = definedExternally
    open fun addTarget(target: MorphTarget): Unit = definedExternally
    open fun removeTarget(target: MorphTarget): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open var _syncActiveTargets: Any = definedExternally
    open fun synchronize(): Unit = definedExternally
    companion object {
        fun Parse(serializationObject: Any, scene: Scene): MorphTargetManager = definedExternally
    }
}
external open class MeshLODLevel(distance: Number, mesh: Mesh) {
    open var distance: Number = definedExternally
    open var mesh: Mesh = definedExternally
}
external open class GroundMesh(name: String, scene: Scene) : Mesh {
    open var generateOctree: Boolean = definedExternally
    open var _heightQuads: Any = definedExternally
    open var _subdivisionsX: Number = definedExternally
    open var _subdivisionsY: Number = definedExternally
    open var _width: Number = definedExternally
    open var _height: Number = definedExternally
    open var _minX: Number = definedExternally
    open var _maxX: Number = definedExternally
    open var _minZ: Number = definedExternally
    open var _maxZ: Number = definedExternally
    override fun getClassName(): String = definedExternally
    open var subdivisions: Number = definedExternally
    open var subdivisionsX: Number = definedExternally
    open var subdivisionsY: Number = definedExternally
    open fun optimize(chunksCount: Number, octreeBlocksSize: Number? = definedExternally /* null */): Unit = definedExternally
    open fun getHeightAtCoordinates(x: Number, z: Number): Number = definedExternally
    open fun getNormalAtCoordinates(x: Number, z: Number): Vector3 = definedExternally
    open fun getNormalAtCoordinatesToRef(x: Number, z: Number, ref: Vector3): GroundMesh = definedExternally
    open fun updateCoordinateHeights(): GroundMesh = definedExternally
    open var _getFacetAt: Any = definedExternally
    open var _initHeightQuads: Any = definedExternally
    open var _computeHeightQuads: Any = definedExternally
    override fun serialize(serializationObject: Any): Unit = definedExternally
    companion object {
        fun Parse(parsedMesh: Any, scene: Scene): GroundMesh = definedExternally
    }
}
external interface PhysicsJointData {
    var mainPivot: Vector3? get() = definedExternally; set(value) = definedExternally
    var connectedPivot: Vector3? get() = definedExternally; set(value) = definedExternally
    var mainAxis: Vector3? get() = definedExternally; set(value) = definedExternally
    var connectedAxis: Vector3? get() = definedExternally; set(value) = definedExternally
    var collision: Boolean? get() = definedExternally; set(value) = definedExternally
    var nativeParams: Any? get() = definedExternally; set(value) = definedExternally
}
external open class PhysicsJoint(type: Number, jointData: PhysicsJointData) {
    open var type: Number = definedExternally
    open var jointData: PhysicsJointData = definedExternally
    open var _physicsJoint: Any = definedExternally
    open var _physicsPlugin: IPhysicsEnginePlugin = definedExternally
    open var physicsJoint: Any = definedExternally
    open var physicsPlugin: IPhysicsEnginePlugin = definedExternally
    open fun executeNativeFunction(func: (world: Any, physicsJoint: Any) -> Unit): Unit = definedExternally
    companion object {
        var DistanceJoint: Number = definedExternally
        var HingeJoint: Number = definedExternally
        var BallAndSocketJoint: Number = definedExternally
        var WheelJoint: Number = definedExternally
        var SliderJoint: Number = definedExternally
        var PrismaticJoint: Number = definedExternally
        var UniversalJoint: Number = definedExternally
        var Hinge2Joint: Number = definedExternally
        var PointToPointJoint: Number = definedExternally
        var SpringJoint: Number = definedExternally
        var LockJoint: Number = definedExternally
    }
}
external open class DistanceJoint(jointData: DistanceJointData) : PhysicsJoint {
    open fun updateDistance(maxDistance: Number, minDistance: Number? = definedExternally /* null */): Unit = definedExternally
}
external open class MotorEnabledJoint(type: Number, jointData: PhysicsJointData) : PhysicsJoint, IMotorEnabledJoint {
	override fun setMotor(force: Number?  /* null */, maxForce: Number?  /* null */, motorIndex: Number?): Unit = definedExternally
	override fun setLimit(upperLimit: Number, lowerLimit: Number?  /* null */,motorIndex: Number?): Unit = definedExternally
}
external open class HingeJoint(jointData: PhysicsJointData) : MotorEnabledJoint {
    override fun setMotor(force: Number?, maxForce: Number?,motorIndex: Number?): Unit = definedExternally
    override fun setLimit(upperLimit: Number, lowerLimit: Number?,motorIndex: Number?): Unit = definedExternally
}
external open class Hinge2Joint(jointData: PhysicsJointData) : MotorEnabledJoint {
    override fun setMotor(targetSpeed: Number?, maxForce: Number?, motorIndex: Number?): Unit = definedExternally
    override fun setLimit(upperLimit: Number, lowerLimit: Number?, motorIndex: Number?): Unit = definedExternally
}
external interface IMotorEnabledJoint {
    var physicsJoint: Any
    fun setMotor(force: Number? = definedExternally /* null */, maxForce: Number? = definedExternally /* null */, motorIndex: Number? = definedExternally /* null */)
    fun setLimit(upperLimit: Number, lowerLimit: Number? = definedExternally /* null */, motorIndex: Number? = definedExternally /* null */)
}
external interface DistanceJointData : PhysicsJointData {
    var maxDistance: Number
}
external interface SpringJointData : PhysicsJointData {
    var length: Number
    var stiffness: Number
    var damping: Number
    var forceApplicationCallback: () -> Unit
}
external open class PhysicsRaycastResult {
    open var _hasHit: Any = definedExternally
    open var _hitDistance: Any = definedExternally
    open var _hitNormalWorld: Any = definedExternally
    open var _hitPointWorld: Any = definedExternally
    open var _rayFromWorld: Any = definedExternally
    open var _rayToWorld: Any = definedExternally
    open var hasHit: Boolean = definedExternally
    open var hitDistance: Number = definedExternally
    open var hitNormalWorld: Vector3 = definedExternally
    open var hitPointWorld: Vector3 = definedExternally
    open var rayFromWorld: Vector3 = definedExternally
    open var rayToWorld: Vector3 = definedExternally
    open fun setHitData(hitNormalWorld: IXYZ, hitPointWorld: IXYZ): Unit = definedExternally
    open fun setHitDistance(distance: Number): Unit = definedExternally
    open fun calculateHitDistance(): Unit = definedExternally
    open fun reset(from: Vector3? = definedExternally /* null */, to: Vector3? = definedExternally /* null */): Unit = definedExternally
}
external interface IXYZ {
    var x: Number
    var y: Number
    var z: Number
}
external interface PhysicsImpostorJoint {
    var mainImpostor: PhysicsImpostor
    var connectedImpostor: PhysicsImpostor
    var joint: PhysicsJoint
}
external interface IPhysicsEnginePlugin {
    var world: Any
    var name: String
    fun setGravity(gravity: Vector3)
    fun setTimeStep(timeStep: Number)
    fun getTimeStep(): Number
    fun executeStep(delta: Number, impostors: Array<PhysicsImpostor>?)
    fun applyImpulse(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3)
    fun applyForce(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3)
    fun generatePhysicsBody(impostor: PhysicsImpostor)
    fun removePhysicsBody(impostor: PhysicsImpostor)
    fun generateJoint(joint: PhysicsImpostorJoint)
    fun removeJoint(joint: PhysicsImpostorJoint)
    fun isSupported(): Boolean
    fun setTransformationFromPhysicsBody(impostor: PhysicsImpostor)
    fun setPhysicsBodyTransformation(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion)
    fun setLinearVelocity(impostor: PhysicsImpostor, velocity: Vector3)
    fun setAngularVelocity(impostor: PhysicsImpostor, velocity: Vector3)
    fun getLinearVelocity(impostor: PhysicsImpostor): Vector3
    fun getAngularVelocity(impostor: PhysicsImpostor): Vector3
    fun setBodyMass(impostor: PhysicsImpostor, mass: Number)
    fun getBodyMass(impostor: PhysicsImpostor): Number
    fun getBodyFriction(impostor: PhysicsImpostor): Number
    fun setBodyFriction(impostor: PhysicsImpostor, friction: Number)
    fun getBodyRestitution(impostor: PhysicsImpostor): Number
    fun setBodyRestitution(impostor: PhysicsImpostor, restitution: Number)
    val getBodyPressure: ((impostor: PhysicsImpostor) -> Number)? get() = definedExternally
    val setBodyPressure: ((impostor: PhysicsImpostor, pressure: Number) -> Unit)? get() = definedExternally
    val getBodyStiffness: ((impostor: PhysicsImpostor) -> Number)? get() = definedExternally
    val setBodyStiffness: ((impostor: PhysicsImpostor, stiffness: Number) -> Unit)? get() = definedExternally
    val getBodyVelocityIterations: ((impostor: PhysicsImpostor) -> Number)? get() = definedExternally
    val setBodyVelocityIterations: ((impostor: PhysicsImpostor, velocityIterations: Number) -> Unit)? get() = definedExternally
    val getBodyPositionIterations: ((impostor: PhysicsImpostor) -> Number)? get() = definedExternally
    val setBodyPositionIterations: ((impostor: PhysicsImpostor, positionIterations: Number) -> Unit)? get() = definedExternally
    val appendAnchor: ((impostor: PhysicsImpostor, otherImpostor: PhysicsImpostor, width: Number, height: Number, influence: Number, noCollisionBetweenLinkedBodies: Boolean) -> Unit)? get() = definedExternally
    val appendHook: ((impostor: PhysicsImpostor, otherImpostor: PhysicsImpostor, length: Number, influence: Number, noCollisionBetweenLinkedBodies: Boolean) -> Unit)? get() = definedExternally
    fun sleepBody(impostor: PhysicsImpostor)
    fun wakeUpBody(impostor: PhysicsImpostor)
    fun raycast(from: Vector3, to: Vector3): PhysicsRaycastResult
    fun updateDistanceJoint(joint: PhysicsJoint, maxDistance: Number, minDistance: Number? = definedExternally /* null */)
    fun setMotor(joint: IMotorEnabledJoint, speed: Number, maxForce: Number? = definedExternally /* null */, motorIndex: Number? = definedExternally /* null */)
    fun setLimit(joint: IMotorEnabledJoint, upperLimit: Number, lowerLimit: Number? = definedExternally /* null */, motorIndex: Number? = definedExternally /* null */)
    fun getRadius(impostor: PhysicsImpostor): Number
    fun getBoxSizeToRef(impostor: PhysicsImpostor, result: Vector3)
    fun syncMeshWithImpostor(mesh: AbstractMesh, impostor: PhysicsImpostor)
    fun dispose()
}
external interface IPhysicsEngine {
    var gravity: Vector3
    fun setGravity(gravity: Vector3)
    fun setTimeStep(newTimeStep: Number)
    fun getTimeStep(): Number
    fun dispose()
    fun getPhysicsPluginName(): String
    fun addImpostor(impostor: PhysicsImpostor)
    fun removeImpostor(impostor: PhysicsImpostor)
    fun addJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint)
    fun removeJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint)
    fun getPhysicsPlugin(): IPhysicsEnginePlugin
    fun getImpostors(): Array<PhysicsImpostor>
    fun getImpostorForPhysicsObject(`object`: IPhysicsEnabledObject): PhysicsImpostor
    fun getImpostorWithPhysicsBody(body: Any): PhysicsImpostor
    fun raycast(from: Vector3, to: Vector3): PhysicsRaycastResult
    fun _step(delta: Number)
}
external interface PhysicsImpostorParameters {
    var mass: Number
    var friction: Number? get() = definedExternally; set(value) = definedExternally
    var restitution: Number? get() = definedExternally; set(value) = definedExternally
    var nativeOptions: Any? get() = definedExternally; set(value) = definedExternally
    var ignoreParent: Boolean? get() = definedExternally; set(value) = definedExternally
    var disableBidirectionalTransformation: Boolean? get() = definedExternally; set(value) = definedExternally
    var pressure: Number? get() = definedExternally; set(value) = definedExternally
    var stiffness: Number? get() = definedExternally; set(value) = definedExternally
    var velocityIterations: Number? get() = definedExternally; set(value) = definedExternally
    var positionIterations: Number? get() = definedExternally; set(value) = definedExternally
    var fixedPoints: Number? get() = definedExternally; set(value) = definedExternally
    var margin: Number? get() = definedExternally; set(value) = definedExternally
    var damping: Number? get() = definedExternally; set(value) = definedExternally
    var path: Any? get() = definedExternally; set(value) = definedExternally
    var shape: Any? get() = definedExternally; set(value) = definedExternally
}
external interface IPhysicsEnabledObject {
    var position: Vector3
    var rotationQuaternion: Quaternion
    var scaling: Vector3
    var rotation: Vector3? get() = definedExternally; set(value) = definedExternally
    var parent: Any? get() = definedExternally; set(value) = definedExternally
    fun getBoundingInfo(): BoundingInfo
    fun computeWorldMatrix(force: Boolean): Matrix
    val getWorldMatrix: (() -> Matrix)? get() = definedExternally
    val getChildMeshes: ((directDescendantsOnly: Boolean? /*= null*/) -> Array<AbstractMesh>)? get() = definedExternally
    fun getVerticesData(kind: String): Any /* Array<Number> | Float32Array */
    val getIndices: (() -> Any /* Array<Number> | Int32Array | Uint32Array | Uint16Array */)? get() = definedExternally
    val getScene: (() -> Scene)? get() = definedExternally
    fun getAbsolutePosition(): Vector3
    fun getAbsolutePivotPoint(): Vector3
    fun rotate(axis: Vector3, amount: Number, space: Number? /* 0 */ = definedExternally /* null */): TransformNode
    fun rotate(axis: Vector3, amount: Number, space: Number? /* 1 */ = definedExternally /* null */): TransformNode
    fun rotate(axis: Vector3, amount: Number, space: Number? /* 2 */ = definedExternally /* null */): TransformNode
    fun translate(axis: Vector3, distance: Number, space: Number? /* 0 */ = definedExternally /* null */): TransformNode
    fun translate(axis: Vector3, distance: Number, space: Number? /* 1 */ = definedExternally /* null */): TransformNode
    fun translate(axis: Vector3, distance: Number, space: Number? /* 2 */ = definedExternally /* null */): TransformNode
    fun setAbsolutePosition(absolutePosition: Vector3): TransformNode
    fun getClassName(): String
    fun rotate(axis: Vector3, amount: Number): TransformNode
    fun translate(axis: Vector3, distance: Number): TransformNode
}
external interface `T$16` {
    var callback: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor) -> Unit
    var otherImpostors: Array<PhysicsImpostor>
}
external interface `T$17` {
    var body: Any
}
external open class PhysicsImpostor(`object`: IPhysicsEnabledObject, type: Number, _options: PhysicsImpostorParameters? = definedExternally /* null */, _scene: Scene? = definedExternally /* null */) {
    open var `object`: IPhysicsEnabledObject = definedExternally
    open var type: Number = definedExternally
    open var _options: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _pluginData: Any = definedExternally
    open var _physicsEngine: Any = definedExternally
    open var _physicsBody: Any = definedExternally
    open var _bodyUpdateRequired: Any = definedExternally
    open var _onBeforePhysicsStepCallbacks: Any = definedExternally
    open var _onAfterPhysicsStepCallbacks: Any = definedExternally
    open var _onPhysicsCollideCallbacks: Array<`T$16`> = definedExternally
    open var _deltaPosition: Any = definedExternally
    open var _deltaRotation: Any = definedExternally
    open var _deltaRotationConjugated: Any = definedExternally
    open var _isFromLine: Boolean = definedExternally
    open var _parent: Any = definedExternally
    open var _isDisposed: Any = definedExternally
    open var isDisposed: Boolean = definedExternally
    open var mass: Number = definedExternally
    open var friction: Number = definedExternally
    open var restitution: Number = definedExternally
    open var pressure: Number = definedExternally
    open var stiffness: Number = definedExternally
    open var velocityIterations: Number = definedExternally
    open var positionIterations: Number = definedExternally
    open var uniqueId: Number = definedExternally
    open var soft: Boolean = definedExternally
    open var segments: Number = definedExternally
    open var _joints: Any = definedExternally
    open fun _init(): Unit = definedExternally
    open var _getPhysicsParent: Any = definedExternally
    open fun isBodyInitRequired(): Boolean = definedExternally
    open fun setScalingUpdated(): Unit = definedExternally
    open fun forceUpdate(): Unit = definedExternally
    open var physicsBody: Any = definedExternally
    open var parent: PhysicsImpostor = definedExternally
    open fun resetUpdateFlags(): Unit = definedExternally
    open fun getObjectExtendSize(): Vector3 = definedExternally
    open fun getObjectCenter(): Vector3 = definedExternally
    open fun getParam(paramName: String): Any = definedExternally
    open fun setParam(paramName: String, value: Number): Unit = definedExternally
    open fun setMass(mass: Number): Unit = definedExternally
    open fun getLinearVelocity(): Vector3 = definedExternally
    open fun setLinearVelocity(velocity: Vector3): Unit = definedExternally
    open fun getAngularVelocity(): Vector3 = definedExternally
    open fun setAngularVelocity(velocity: Vector3): Unit = definedExternally
    open fun executeNativeFunction(func: (world: Any, physicsBody: Any) -> Unit): Unit = definedExternally
    open fun registerBeforePhysicsStep(func: (impostor: PhysicsImpostor) -> Unit): Unit = definedExternally
    open fun unregisterBeforePhysicsStep(func: (impostor: PhysicsImpostor) -> Unit): Unit = definedExternally
    open fun registerAfterPhysicsStep(func: (impostor: PhysicsImpostor) -> Unit): Unit = definedExternally
    open fun unregisterAfterPhysicsStep(func: (impostor: PhysicsImpostor) -> Unit): Unit = definedExternally
    open fun registerOnPhysicsCollide(collideAgainst: PhysicsImpostor, func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor) -> Unit): Unit = definedExternally
    open fun registerOnPhysicsCollide(collideAgainst: Array<PhysicsImpostor>, func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor) -> Unit): Unit = definedExternally
    open fun unregisterOnPhysicsCollide(collideAgainst: PhysicsImpostor, func: (collider: PhysicsImpostor, collidedAgainst: dynamic /* PhysicsImpostor | Array<PhysicsImpostor> */) -> Unit): Unit = definedExternally
    open fun unregisterOnPhysicsCollide(collideAgainst: Array<PhysicsImpostor>, func: (collider: PhysicsImpostor, collidedAgainst: dynamic /* PhysicsImpostor | Array<PhysicsImpostor> */) -> Unit): Unit = definedExternally
    open var _tmpQuat: Any = definedExternally
    open var _tmpQuat2: Any = definedExternally
    open fun getParentsRotation(): Quaternion = definedExternally
    open var beforeStep: () -> Unit = definedExternally
    open var afterStep: () -> Unit = definedExternally
    open var onCollideEvent: (collider: PhysicsImpostor, collidedWith: PhysicsImpostor) -> Unit = definedExternally
    open var onCollide: (e: `T$17`) -> Unit = definedExternally
    open fun applyForce(force: Vector3, contactPoint: Vector3): PhysicsImpostor = definedExternally
    open fun applyImpulse(force: Vector3, contactPoint: Vector3): PhysicsImpostor = definedExternally
    open fun createJoint(otherImpostor: PhysicsImpostor, jointType: Number, jointData: PhysicsJointData): PhysicsImpostor = definedExternally
    open fun addJoint(otherImpostor: PhysicsImpostor, joint: PhysicsJoint): PhysicsImpostor = definedExternally
    open fun addAnchor(otherImpostor: PhysicsImpostor, width: Number, height: Number, influence: Number, noCollisionBetweenLinkedBodies: Boolean): PhysicsImpostor = definedExternally
    open fun addHook(otherImpostor: PhysicsImpostor, length: Number, influence: Number, noCollisionBetweenLinkedBodies: Boolean): PhysicsImpostor = definedExternally
    open fun sleep(): PhysicsImpostor = definedExternally
    open fun wakeUp(): PhysicsImpostor = definedExternally
    open fun clone(newObject: IPhysicsEnabledObject): PhysicsImpostor = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun setDeltaPosition(position: Vector3): Unit = definedExternally
    open fun setDeltaRotation(rotation: Quaternion): Unit = definedExternally
    open fun getBoxSizeToRef(result: Vector3): PhysicsImpostor = definedExternally
    open fun getRadius(): Number = definedExternally
    open fun syncBoneWithImpostor(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint: Number? = definedExternally /* null */, adjustRotation: Quaternion? = definedExternally /* null */): Unit = definedExternally
    open fun syncImpostorWithBone(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint: Number? = definedExternally /* null */, adjustRotation: Quaternion? = definedExternally /* null */, boneAxis: Vector3? = definedExternally /* null */): Unit = definedExternally
    companion object {
        var DEFAULT_OBJECT_SIZE: Vector3 = definedExternally
        var IDENTITY_QUATERNION: Quaternion = definedExternally
        var _tmpVecs: Any = definedExternally
        var _tmpQuat: Any = definedExternally
        var NoImpostor: Number = definedExternally
        var SphereImpostor: Number = definedExternally
        var BoxImpostor: Number = definedExternally
        var PlaneImpostor: Number = definedExternally
        var MeshImpostor: Number = definedExternally
        var CylinderImpostor: Number = definedExternally
        var ParticleImpostor: Number = definedExternally
        var HeightmapImpostor: Number = definedExternally
        var ConvexHullImpostor: Number = definedExternally
        var RopeImpostor: Number = definedExternally
        var ClothImpostor: Number = definedExternally
        var SoftbodyImpostor: Number = definedExternally
    }
}
external open class _CreationDataStorage {
    open var closePath: Boolean = definedExternally
    open var closeArray: Boolean = definedExternally
    open var idx: Array<Number> = definedExternally
    open var dashSize: Number = definedExternally
    open var gapSize: Number = definedExternally
    open var path3D: Path3D = definedExternally
    open var pathArray: Array<Array<Vector3>> = definedExternally
    open var arc: Number = definedExternally
    open var radius: Number = definedExternally
    open var cap: Number = definedExternally
    open var tessellation: Number = definedExternally
}
external open class _InstanceDataStorage {
    open var visibleInstances: Any = definedExternally
    open var batchCache: _InstancesBatch = definedExternally
    open var instancesBufferSize: Number = definedExternally
    open var instancesBuffer: Buffer = definedExternally
    open var instancesData: Float32Array = definedExternally
    open var overridenInstanceCount: Number = definedExternally
    open var isFrozen: Boolean = definedExternally
    open var previousBatch: _InstancesBatch = definedExternally
    open var hardwareInstancedRendering: Boolean = definedExternally
    open var sideOrientation: Number = definedExternally
}
external open class _InstancesBatch {
    open var mustReturn: Boolean = definedExternally
    open var visibleInstances: Array<Array<InstancedMesh>> = definedExternally
    open var renderSelf: Array<Boolean> = definedExternally
    open var hardwareInstancedRendering: Array<Boolean> = definedExternally
}
external interface `T$18` {
    var skinned: Boolean
    var valid: Boolean
    var report: String
}
external interface `T$19` {
    var w: Number
    var h: Number
}
external interface `T$20` {
    @nativeInvoke
    operator fun invoke(i: Number, distance: Number): Number
}
external interface `T$21` {
    var type: Number? get() = definedExternally; set(value) = definedExternally
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var sizeX: Number? get() = definedExternally; set(value) = definedExternally
    var sizeY: Number? get() = definedExternally; set(value) = definedExternally
    var sizeZ: Number? get() = definedExternally; set(value) = definedExternally
    var custom: Any? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
}
external interface `T$22` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var flat: Boolean? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$23` {
    var min: Vector3
    var max: Vector3
}
external open class Mesh(name: String, scene: Scene? = definedExternally /* null */, parent: Node? = definedExternally /* null */, source: Mesh? = definedExternally /* null */, doNotCloneChildren: Boolean? = definedExternally /* null */, clonePhysicsImpostor: Boolean? = definedExternally /* null */) : AbstractMesh, IGetSetVerticesData {
    open var _internalMeshDataInfo: Any = definedExternally
    open var onBeforeRenderObservable: Observable<Mesh> = definedExternally
    open var onBeforeBindObservable: Observable<Mesh> = definedExternally
    open var onAfterRenderObservable: Observable<Mesh> = definedExternally
    open var onBeforeDrawObservable: Observable<Mesh> = definedExternally
    open var _onBeforeDrawObserver: Any = definedExternally
    open var onBeforeDraw: () -> Unit = definedExternally
    open var delayLoadState: Number = definedExternally
    open var instances: Array<InstancedMesh> = definedExternally
    open var delayLoadingFile: String = definedExternally
    open var _binaryInfo: Any = definedExternally
    open var onLODLevelSelection: (distance: Number, mesh: Mesh, selectedLevel: Mesh) -> Unit = definedExternally
    open var morphTargetManager: MorphTargetManager = definedExternally
    open var _creationDataStorage: _CreationDataStorage = definedExternally
    open var _geometry: Geometry = definedExternally
    open var _delayInfo: Array<String> = definedExternally
    open var _delayLoadingFunction: (any: Any, mesh: Mesh) -> Unit = definedExternally
    open var _instanceDataStorage: _InstanceDataStorage = definedExternally
    open var _effectiveMaterial: Any = definedExternally
    open var _shouldGenerateFlatShading: Boolean = definedExternally
    open var _originalBuilderSideOrientation: Number = definedExternally
    open var overrideMaterialSideOrientation: Number = definedExternally
    open var source: Mesh = definedExternally
    open var isUnIndexed: Boolean = definedExternally
    override fun getClassName(): String = definedExternally
    open var _isMesh: Boolean = definedExternally
    override fun toString(fullDetails: Boolean?): String = definedExternally
    override fun _unBindEffect(): Unit = definedExternally
    open var hasLODLevels: Boolean = definedExternally
    open fun getLODLevels(): Array<MeshLODLevel> = definedExternally
    open var _sortLODLevels: Any = definedExternally
    open fun addLODLevel(distance: Number, mesh: Mesh): Mesh = definedExternally
    open fun getLODLevelAtDistance(distance: Number): Mesh = definedExternally
    open fun removeLODLevel(mesh: Mesh): Mesh = definedExternally
    open fun getLOD(camera: Camera, boundingSphere: BoundingSphere? = definedExternally /* null */): AbstractMesh = definedExternally
    open var geometry: Geometry = definedExternally
    override fun getTotalVertices(): Number = definedExternally
	override fun getVerticesData(kind: String, copyWhenShared: Boolean?  /* null */, forceCopy: Boolean?  /* null */): Any/* Array<Number> | Float32Array */
    open fun getVertexBuffer(kind: String): VertexBuffer = definedExternally
    override fun isVerticesDataPresent(kind: String): Boolean = definedExternally
    open fun isVertexBufferUpdatable(kind: String): Boolean = definedExternally
    open fun getVerticesDataKinds(): Array<String> = definedExternally
    override fun getTotalIndices(): Number = definedExternally
	override fun getIndices(copyWhenShared: Boolean?, forceCopy: Boolean?): Any/* Array<Number> | Int32Array | Uint32Array | Uint16Array */
    override var isBlocked: Boolean = definedExternally
    open fun isReady(completeCheck: Boolean? = definedExternally /* null */, forceInstanceSupport: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open var areNormalsFrozen: Boolean = definedExternally
    open fun freezeNormals(): Mesh = definedExternally
    open fun unfreezeNormals(): Mesh = definedExternally
    open var overridenInstanceCount: Number = definedExternally
    override fun _preActivate(): Mesh = definedExternally
    override fun _preActivateForIntermediateRendering(renderId: Number): Mesh = definedExternally
    open fun _registerInstanceForRenderId(instance: InstancedMesh, renderId: Number): Mesh = definedExternally
    override fun refreshBoundingInfo(applySkeleton: Boolean?): Mesh = definedExternally
    open fun _createGlobalSubMesh(force: Boolean): SubMesh = definedExternally
    open fun subdivide(count: Number): Unit = definedExternally
    override fun setVerticesData(kind: String, data: Array<Number>, updatable: Boolean?, stride: Int?): Mesh = definedExternally
    override fun setVerticesData(kind: String, data: Float32Array, updatable: Boolean?, stride: Int?): Mesh = definedExternally
    open fun markVerticesDataAsUpdatable(kind: String, updatable: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setVerticesBuffer(buffer: VertexBuffer): Mesh = definedExternally
    override fun updateVerticesData(kind: String, data: Array<Number>, updateExtends: Boolean?, makeItUnique: Boolean?): Mesh = definedExternally
    override fun updateVerticesData(kind: String, data: Float32Array, updateExtends: Boolean?, makeItUnique: Boolean?): Mesh = definedExternally
    open fun updateMeshPositions(positionFunction: (data: dynamic /* Array<Number> | Float32Array */) -> Unit, computeNormals: Boolean? = definedExternally /* null */): Mesh = definedExternally
    open fun makeGeometryUnique(): Mesh = definedExternally
	override  fun setIndices(indices: Int32Array, totalVertices: Int?, updatable: Boolean?): Mesh = definedExternally
	override fun setIndices(indices: Uint32Array, totalVertices: Int?, updatable: Boolean?): Mesh = definedExternally
	override fun setIndices(indices: Uint16Array, totalVertices: Int?, updatable: Boolean?): Mesh = definedExternally
	override fun setIndices(indices: Array<Number>, totalVertices: Int?, updatable: Boolean?): Mesh = definedExternally
	override fun updateIndices(indices: Array<Number>, offset: Number?, gpuMemoryOnly: Boolean?): Mesh = definedExternally
	override fun updateIndices(indices: Int32Array, offset: Number?, gpuMemoryOnly: Boolean?): Mesh = definedExternally
	override fun updateIndices(indices: Uint32Array, offset: Number?, gpuMemoryOnly: Boolean?): Mesh = definedExternally
    override fun updateIndices(indices: Uint16Array, offset: Number?, gpuMemoryOnly: Boolean?): Mesh = definedExternally
    open fun toLeftHanded(): Mesh = definedExternally
    open fun _bind(subMesh: SubMesh, effect: Effect, fillMode: Number): Mesh = definedExternally
    open fun _draw(subMesh: SubMesh, fillMode: Number, instancesCount: Number? = definedExternally /* null */): Mesh = definedExternally
    open fun registerBeforeRender(func: (mesh: AbstractMesh) -> Unit): Mesh = definedExternally
    open fun unregisterBeforeRender(func: (mesh: AbstractMesh) -> Unit): Mesh = definedExternally
    open fun registerAfterRender(func: (mesh: AbstractMesh) -> Unit): Mesh = definedExternally
    open fun unregisterAfterRender(func: (mesh: AbstractMesh) -> Unit): Mesh = definedExternally
    open fun _getInstancesRenderList(subMeshId: Number): _InstancesBatch = definedExternally
    open fun _renderWithInstances(subMesh: SubMesh, fillMode: Number, batch: _InstancesBatch, effect: Effect, engine: Engine): Mesh = definedExternally
    open fun _processRendering(subMesh: SubMesh, effect: Effect, fillMode: Number, batch: _InstancesBatch, hardwareInstancedRendering: Boolean, onBeforeDraw: (isInstance: Boolean, world: Matrix, effectiveMaterial: Material? /*= null*/) -> Unit, effectiveMaterial: Material? = definedExternally /* null */): Mesh = definedExternally
    override fun _freeze(): Unit = definedExternally
    override fun _unFreeze(): Unit = definedExternally
    open fun render(subMesh: SubMesh, enableAlphaMode: Boolean): Mesh = definedExternally
    open var _onBeforeDraw: Any = definedExternally
    open fun cleanMatrixWeights(): Unit = definedExternally
    open var normalizeSkinFourWeights: Any = definedExternally
    open var normalizeSkinWeightsAndExtra: Any = definedExternally
    open fun validateSkinning(): `T$18` = definedExternally
    open fun _checkDelayState(): Mesh = definedExternally
    open var _queueLoad: Any = definedExternally
    override fun isInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun setMaterialByID(id: String): Mesh = definedExternally
    open fun getAnimatables(): Array<IAnimatable> = definedExternally
    open fun bakeTransformIntoVertices(transform: Matrix): Mesh = definedExternally
    open fun bakeCurrentTransformIntoVertices(): Mesh = definedExternally
    override var _positions: Array<Vector3> = definedExternally
    open fun _resetPointsArrayCache(): Mesh = definedExternally
    override fun _generatePointsArray(): Boolean = definedExternally
    open fun clone(name: String? = definedExternally /* null */, newParent: Node? = definedExternally /* null */, doNotCloneChildren: Boolean? = definedExternally /* null */, clonePhysicsImpostor: Boolean? = definedExternally /* null */): Mesh = definedExternally
	override fun dispose(): Unit = definedExternally
    override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
    open fun applyDisplacementMap(url: String, minHeight: Number, maxHeight: Number, onSuccess: ((mesh: Mesh) -> Unit)? = definedExternally /* null */, uvOffset: Vector2? = definedExternally /* null */, uvScale: Vector2? = definedExternally /* null */, forceUpdate: Boolean? = definedExternally /* null */): Mesh = definedExternally
    open fun applyDisplacementMapFromBuffer(buffer: Uint8Array, heightMapWidth: Number, heightMapHeight: Number, minHeight: Number, maxHeight: Number, uvOffset: Vector2? = definedExternally /* null */, uvScale: Vector2? = definedExternally /* null */, forceUpdate: Boolean? = definedExternally /* null */): Mesh = definedExternally
    open fun convertToFlatShadedMesh(): Mesh = definedExternally
    open fun convertToUnIndexedMesh(): Mesh = definedExternally
    open fun flipFaces(flipNormals: Boolean? = definedExternally /* null */): Mesh = definedExternally
    open fun increaseVertices(numberPerEdge: Number): Unit = definedExternally
    open fun forceSharedVertices(): Unit = definedExternally
    open fun createInstance(name: String): InstancedMesh = definedExternally
    open fun synchronizeInstances(): Mesh = definedExternally
    open fun optimizeIndices(successCallback: ((mesh: Mesh? /*= null*/) -> Unit)? = definedExternally /* null */): Mesh = definedExternally
	open fun serialize(serializationObject: Any): Unit = definedExternally
    open fun _syncGeometryWithMorphTargetManager(): Unit = definedExternally
    open fun setPositionsForCPUSkinning(): Float32Array = definedExternally
    open fun setNormalsForCPUSkinning(): Float32Array = definedExternally
    open fun applySkeleton(skeleton: Skeleton): Mesh = definedExternally
    open fun addInstance(instance: InstancedMesh): Unit = definedExternally
    open fun removeInstance(instance: InstancedMesh): Unit = definedExternally
    companion object {
        var FRONTSIDE: Number = definedExternally
        var BACKSIDE: Number = definedExternally
        var DOUBLESIDE: Number = definedExternally
        var DEFAULTSIDE: Number = definedExternally
        var NO_CAP: Number = definedExternally
        var CAP_START: Number = definedExternally
        var CAP_END: Number = definedExternally
        var CAP_ALL: Number = definedExternally
        fun _GetDefaultSideOrientation(orientation: Number? = definedExternally /* null */): Number = definedExternally
        fun _instancedMeshFactory(name: String, mesh: Mesh): InstancedMesh = definedExternally
        fun _PhysicsImpostorParser(scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: Any): PhysicsImpostor = definedExternally
        var _GroundMeshParser: (parsedMesh: Any, scene: Scene) -> Mesh = definedExternally
        fun Parse(parsedMesh: Any, scene: Scene, rootUrl: String): Mesh = definedExternally
        fun CreateRibbon(name: String, pathArray: Array<Array<Vector3>>, closeArray: Boolean, closePath: Boolean, offset: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */, instance: Mesh? = definedExternally /* null */): Mesh = definedExternally
        fun CreateDisc(name: String, radius: Number, tessellation: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreateBox(name: String, size: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreateSphere(name: String, segments: Number, diameter: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreateHemisphere(name: String, segments: Number, diameter: Number, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateCylinder(name: String, height: Number, diameterTop: Number, diameterBottom: Number, tessellation: Number, subdivisions: Any, scene: Scene? = definedExternally /* null */, updatable: Any? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreateTorus(name: String, diameter: Number, thickness: Number, tessellation: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreateTorusKnot(name: String, radius: Number, tube: Number, radialSegments: Number, tubularSegments: Number, p: Number, q: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreateLines(name: String, points: Array<Vector3>, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, instance: LinesMesh? = definedExternally /* null */): LinesMesh = definedExternally
        fun CreateDashedLines(name: String, points: Array<Vector3>, dashSize: Number, gapSize: Number, dashNb: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, instance: LinesMesh? = definedExternally /* null */): LinesMesh = definedExternally
        fun CreatePolygon(name: String, shape: Array<Vector3>, scene: Scene, holes: Array<Array<Vector3>>? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */): Mesh = definedExternally
        fun ExtrudePolygon(name: String, shape: Array<Vector3>, depth: Number, scene: Scene, holes: Array<Array<Vector3>>? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */): Mesh = definedExternally
        fun ExtrudeShape(name: String, shape: Array<Vector3>, path: Array<Vector3>, scale: Number, rotation: Number, cap: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */, instance: Mesh? = definedExternally /* null */): Mesh = definedExternally
        fun ExtrudeShapeCustom(name: String, shape: Array<Vector3>, path: Array<Vector3>, scaleFunction: Function<*>, rotationFunction: Function<*>, ribbonCloseArray: Boolean, ribbonClosePath: Boolean, cap: Number, scene: Scene, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */, instance: Mesh? = definedExternally /* null */): Mesh = definedExternally
        fun CreateLathe(name: String, shape: Array<Vector3>, radius: Number, tessellation: Number, scene: Scene, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreatePlane(name: String, size: Number, scene: Scene, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */): Mesh = definedExternally
        fun CreateGround(name: String, width: Number, height: Number, subdivisions: Number, scene: Scene? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */): Mesh = definedExternally
        fun CreateTiledGround(name: String, xmin: Number, zmin: Number, xmax: Number, zmax: Number, subdivisions: `T$19`, precision: `T$19`, scene: Scene, updatable: Boolean? = definedExternally /* null */): Mesh = definedExternally
        fun CreateGroundFromHeightMap(name: String, url: String, width: Number, height: Number, subdivisions: Number, minHeight: Number, maxHeight: Number, scene: Scene, updatable: Boolean? = definedExternally /* null */, onReady: ((mesh: GroundMesh) -> Unit)? = definedExternally /* null */, alphaFilter: Number? = definedExternally /* null */): GroundMesh = definedExternally
        fun CreateTube(name: String, path: Array<Vector3>, radius: Number, tessellation: Number, radiusFunction: `T$20`, cap: Number, scene: Scene, updatable: Boolean? = definedExternally /* null */, sideOrientation: Number? = definedExternally /* null */, instance: Mesh? = definedExternally /* null */): Mesh = definedExternally
        fun CreatePolyhedron(name: String, options: `T$21`, scene: Scene): Mesh = definedExternally
        fun CreateIcoSphere(name: String, options: `T$22`, scene: Scene): Mesh = definedExternally
        fun CreateDecal(name: String, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: Number): Mesh = definedExternally
        fun MinMax(meshes: Array<AbstractMesh>): `T$23` = definedExternally
        fun Center(meshesOrMinMaxVector: Array<AbstractMesh>): Vector3 = definedExternally
        fun Center(meshesOrMinMaxVector: `T$23`): Vector3 = definedExternally
        fun MergeMeshes(meshes: Array<Mesh>, disposeSource: Boolean? = definedExternally /* null */, allow32BitsIndices: Boolean? = definedExternally /* null */, meshSubclass: Mesh? = definedExternally /* null */, subdivideWithSubMeshes: Boolean? = definedExternally /* null */, multiMultiMaterials: Boolean? = definedExternally /* null */): Mesh = definedExternally
    }
    fun simplify(settings: Array<ISimplificationSettings>, parallelProcessing: Boolean? = definedExternally /* null */, simplificationType: Number? /* 0 */ = definedExternally /* null */, successCallback: ((mesh: Mesh? /*= null*/, submeshIndex: Number? /*= null*/) -> Unit)? = definedExternally /* null */): Mesh
    fun getEmittedParticleSystems(): Array<IParticleSystem>
    fun getHierarchyEmittedParticleSystems(): Array<IParticleSystem>
}
external interface `T$24` {
    @nativeGetter
    operator fun get(id: String): AbstractMesh?
    @nativeSetter
    operator fun set(id: String, value: AbstractMesh?)
}
external open class Material(name: String, scene: Scene, doNotAdd: Boolean? = definedExternally /* null */) : IAnimatable {
    open var id: String = definedExternally
    open var uniqueId: Number = definedExternally
    open var name: String = definedExternally
    open var metadata: Any = definedExternally
    open var reservedDataStore: Any = definedExternally
    open var checkReadyOnEveryCall: Boolean = definedExternally
    open var checkReadyOnlyOnce: Boolean = definedExternally
    open var state: String = definedExternally
    open var _alpha: Number = definedExternally
    open var inspectableCustomProperties: Array<IInspectable> = definedExternally
    open var alpha: Number = definedExternally
    open var _backFaceCulling: Boolean = definedExternally
    open var backFaceCulling: Boolean = definedExternally
    open var sideOrientation: Number = definedExternally
    open var onCompiled: (effect: Effect) -> Unit = definedExternally
    open var onError: (effect: Effect, errors: String) -> Unit = definedExternally
    open var getRenderTargetTextures: () -> SmartArray<RenderTargetTexture> = definedExternally
    open var hasRenderTargetTextures: Boolean = definedExternally
    open var doNotSerialize: Boolean = definedExternally
    open var _storeEffectOnSubMeshes: Boolean = definedExternally
    override var animations: Array<Animation> = definedExternally
    open var onDisposeObservable: Observable<Material> = definedExternally
    open var _onDisposeObserver: Any = definedExternally
    open var _onUnBindObservable: Any = definedExternally
    open var onDispose: () -> Unit = definedExternally
    open var _onBindObservable: Any = definedExternally
    open var onBindObservable: Observable<AbstractMesh> = definedExternally
    open var _onBindObserver: Any = definedExternally
    open var onBind: (Mesh: AbstractMesh) -> Unit = definedExternally
    open var onUnBindObservable: Observable<Material> = definedExternally
    open var _alphaMode: Any = definedExternally
    open var alphaMode: Number = definedExternally
    open var _needDepthPrePass: Any = definedExternally
    open var needDepthPrePass: Boolean = definedExternally
    open var disableDepthWrite: Boolean = definedExternally
    open var forceDepthWrite: Boolean = definedExternally
    open var separateCullingPass: Boolean = definedExternally
    open var _fogEnabled: Any = definedExternally
    open var fogEnabled: Boolean = definedExternally
    open var pointSize: Number = definedExternally
    open var zOffset: Number = definedExternally
    open var wireframe: Boolean = definedExternally
    open var pointsCloud: Boolean = definedExternally
    open var fillMode: Number = definedExternally
    open var _effect: Effect = definedExternally
    open var _wasPreviouslyReady: Boolean = definedExternally
    open var _useUBO: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _fillMode: Any = definedExternally
    open var _cachedDepthWriteState: Any = definedExternally
    open var _uniformBuffer: UniformBuffer = definedExternally
    open var _indexInSceneMaterialArray: Number = definedExternally
    open var meshMap: `T$24` = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    open fun getClassName(): String = definedExternally
    open var isFrozen: Boolean = definedExternally
    open fun freeze(): Unit = definedExternally
    open fun unfreeze(): Unit = definedExternally
    open fun isReady(mesh: AbstractMesh? = definedExternally /* null */, useInstances: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun isReadyForSubMesh(mesh: AbstractMesh, subMesh: BaseSubMesh, useInstances: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun getEffect(): Effect = definedExternally
    open fun getScene(): Scene = definedExternally
    open fun needAlphaBlending(): Boolean = definedExternally
    open fun needAlphaBlendingForMesh(mesh: AbstractMesh): Boolean = definedExternally
    open fun needAlphaTesting(): Boolean = definedExternally
    open fun getAlphaTestTexture(): BaseTexture = definedExternally
    open fun markDirty(): Unit = definedExternally
    open fun _preBind(effect: Effect? = definedExternally /* null */, overrideOrientation: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun bind(world: Matrix, mesh: Mesh? = definedExternally /* null */): Unit = definedExternally
    open fun bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): Unit = definedExternally
    open fun bindOnlyWorldMatrix(world: Matrix): Unit = definedExternally
    open fun bindSceneUniformBuffer(effect: Effect, sceneUbo: UniformBuffer): Unit = definedExternally
    open fun bindView(effect: Effect): Unit = definedExternally
    open fun bindViewProjection(effect: Effect): Unit = definedExternally
    open fun _shouldTurnAlphaTestOn(mesh: AbstractMesh): Boolean = definedExternally
    open fun _afterBind(mesh: Mesh? = definedExternally /* null */): Unit = definedExternally
    open fun unbind(): Unit = definedExternally
    open fun getActiveTextures(): Array<BaseTexture> = definedExternally
    open fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    open fun clone(name: String): Material = definedExternally
    open fun getBindedMeshes(): Array<AbstractMesh> = definedExternally
    open fun forceCompilation(mesh: AbstractMesh, onCompiled: ((material: Material) -> Unit)? = definedExternally /* null */, options: Any? = definedExternally /* null */): Unit = definedExternally
    open fun forceCompilationAsync(mesh: AbstractMesh, options: Any? = definedExternally /* null */): Promise<Unit> = definedExternally
    open fun markAsDirty(flag: Number): Unit = definedExternally
    open fun _markAllSubMeshesAsDirty(func: (defines: MaterialDefines) -> Unit): Unit = definedExternally
    open fun _markAllSubMeshesAsImageProcessingDirty(): Unit = definedExternally
    open fun _markAllSubMeshesAsTexturesDirty(): Unit = definedExternally
    open fun _markAllSubMeshesAsFresnelDirty(): Unit = definedExternally
    open fun _markAllSubMeshesAsFresnelAndMiscDirty(): Unit = definedExternally
    open fun _markAllSubMeshesAsLightsDirty(): Unit = definedExternally
    open fun _markAllSubMeshesAsAttributesDirty(): Unit = definedExternally
    open fun _markAllSubMeshesAsMiscDirty(): Unit = definedExternally
    open fun _markAllSubMeshesAsTexturesAndMiscDirty(): Unit = definedExternally
    open fun dispose(forceDisposeEffect: Boolean? = definedExternally /* null */, forceDisposeTextures: Boolean? = definedExternally /* null */, notBoundToMesh: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var releaseVertexArrayObject: Any = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var TriangleFillMode: Number = definedExternally
        var WireFrameFillMode: Number = definedExternally
        var PointFillMode: Number = definedExternally
        var PointListDrawMode: Number = definedExternally
        var LineListDrawMode: Number = definedExternally
        var LineLoopDrawMode: Number = definedExternally
        var LineStripDrawMode: Number = definedExternally
        var TriangleStripDrawMode: Number = definedExternally
        var TriangleFanDrawMode: Number = definedExternally
        var ClockWiseSideOrientation: Number = definedExternally
        var CounterClockWiseSideOrientation: Number = definedExternally
        var TextureDirtyFlag: Number = definedExternally
        var LightDirtyFlag: Number = definedExternally
        var FresnelDirtyFlag: Number = definedExternally
        var AttributesDirtyFlag: Number = definedExternally
        var MiscDirtyFlag: Number = definedExternally
        var AllDirtyFlag: Number = definedExternally
        var _ImageProcessingDirtyCallBack: Any = definedExternally
        var _TextureDirtyCallBack: Any = definedExternally
        var _FresnelDirtyCallBack: Any = definedExternally
        var _MiscDirtyCallBack: Any = definedExternally
        var _LightsDirtyCallBack: Any = definedExternally
        var _AttributeDirtyCallBack: Any = definedExternally
        var _FresnelAndMiscDirtyCallBack: Any = definedExternally
        var _TextureAndMiscDirtyCallBack: Any = definedExternally
        var _DirtyCallbackArray: Any = definedExternally
        var _RunDirtyCallBacks: Any = definedExternally
        fun Parse(parsedMaterial: Any, scene: Scene, rootUrl: String): Material = definedExternally
    }
}
external open class BaseSubMesh {
    open var _materialDefines: MaterialDefines = definedExternally
    open var _materialEffect: Effect = definedExternally
    open var effect: Effect = definedExternally
    open fun setEffect(effect: Effect, defines: MaterialDefines? = definedExternally /* null */): Unit = definedExternally
}
external open class SubMesh(materialIndex: Number, verticesStart: Number, verticesCount: Number, indexStart: Number, indexCount: Number, mesh: AbstractMesh, renderingMesh: Mesh? = definedExternally /* null */, createBoundingBox: Boolean? = definedExternally /* null */) : BaseSubMesh, ICullable {
    open var materialIndex: Number = definedExternally
    open var verticesStart: Number = definedExternally
    open var verticesCount: Number = definedExternally
    open var indexStart: Number = definedExternally
    open var indexCount: Number = definedExternally
    open var _linesIndexCount: Number = definedExternally
    open var _mesh: Any = definedExternally
    open var _renderingMesh: Any = definedExternally
    open var _boundingInfo: Any = definedExternally
    open var _linesIndexBuffer: Any = definedExternally
    open var _lastColliderWorldVertices: Array<Vector3> = definedExternally
    open var _trianglePlanes: Array<Plane> = definedExternally
    open var _lastColliderTransformMatrix: Matrix = definedExternally
    open var _renderId: Number = definedExternally
    open var _alphaIndex: Number = definedExternally
    open var _distanceToCamera: Number = definedExternally
    open var _id: Number = definedExternally
    open var _currentMaterial: Any = definedExternally
    open var IsGlobal: Boolean = definedExternally
    open fun getBoundingInfo(): BoundingInfo = definedExternally
    open fun setBoundingInfo(boundingInfo: BoundingInfo): SubMesh = definedExternally
    open fun getMesh(): AbstractMesh = definedExternally
    open fun getRenderingMesh(): Mesh = definedExternally
    open fun getMaterial(): Material = definedExternally
    open fun refreshBoundingInfo(data: Array<Number>? = definedExternally /* null */): SubMesh = definedExternally
    open fun refreshBoundingInfo(data: Float32Array? = definedExternally /* null */): SubMesh = definedExternally
    open fun _checkCollision(collider: Collider): Boolean = definedExternally
    open fun updateBoundingInfo(world: Matrix): SubMesh = definedExternally
    override fun isInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    override fun isCompletelyInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun render(enableAlphaMode: Boolean): SubMesh = definedExternally
    open fun _getLinesIndexBuffer(indices: Array<Number>, engine: Engine): DataBuffer = definedExternally
    open fun _getLinesIndexBuffer(indices: Int32Array, engine: Engine): DataBuffer = definedExternally
    open fun _getLinesIndexBuffer(indices: Uint32Array, engine: Engine): DataBuffer = definedExternally
    open fun _getLinesIndexBuffer(indices: Uint16Array, engine: Engine): DataBuffer = definedExternally
    open fun canIntersects(ray: Ray): Boolean = definedExternally
    open fun intersects(ray: Ray, positions: Array<Vector3>, indices: Array<Number>, fastCheck: Boolean? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): IntersectionInfo = definedExternally
    open fun intersects(ray: Ray, positions: Array<Vector3>, indices: Int32Array, fastCheck: Boolean? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): IntersectionInfo = definedExternally
    open fun intersects(ray: Ray, positions: Array<Vector3>, indices: Uint32Array, fastCheck: Boolean? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): IntersectionInfo = definedExternally
    open fun intersects(ray: Ray, positions: Array<Vector3>, indices: Uint16Array, fastCheck: Boolean? = definedExternally /* null */, trianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) -> Boolean)? = definedExternally /* null */): IntersectionInfo = definedExternally
    open var _intersectLines: Any = definedExternally
    open var _intersectUnIndexedLines: Any = definedExternally
    open var _intersectTriangles: Any = definedExternally
    open var _intersectUnIndexedTriangles: Any = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun clone(newMesh: AbstractMesh, newRenderingMesh: Mesh? = definedExternally /* null */): SubMesh = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    companion object {
        fun AddToMesh(materialIndex: Number, verticesStart: Number, verticesCount: Number, indexStart: Number, indexCount: Number, mesh: AbstractMesh, renderingMesh: Mesh? = definedExternally /* null */, createBoundingBox: Boolean? = definedExternally /* null */): SubMesh = definedExternally
        fun CreateFromIndices(materialIndex: Number, startIndex: Number, indexCount: Number, mesh: AbstractMesh, renderingMesh: Mesh? = definedExternally /* null */): SubMesh = definedExternally
    }
    open fun refreshBoundingInfo(): SubMesh = definedExternally
}
external interface `T$25` {
    @nativeGetter
    operator fun get(key: String): VertexBuffer?
    @nativeSetter
    operator fun set(key: String, value: VertexBuffer)
}
external interface `T$26` {
    var minimum: Vector3
    var maximum: Vector3
}
external open class Geometry(id: String, scene: Scene, vertexData: VertexData? = definedExternally /* null */, updatable: Boolean? = definedExternally /* null */, mesh: Mesh? = definedExternally /* null */) : IGetSetVerticesData {
    open var id: String = definedExternally
    open var uniqueId: Number = definedExternally
    open var delayLoadState: Number = definedExternally
    open var delayLoadingFile: String = definedExternally
    open var onGeometryUpdated: (geometry: Geometry, kind: String? /*= null*/) -> Unit = definedExternally
    open var _scene: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _meshes: Any = definedExternally
    open var _totalVertices: Any = definedExternally
    open var _indices: dynamic /* Array<Number> | Int32Array | Uint32Array | Uint16Array */ = definedExternally
    open var _vertexBuffers: `T$25` = definedExternally
    open var _isDisposed: Any = definedExternally
    open var _extend: Any = definedExternally
    open var _boundingBias: Any = definedExternally
    open var _delayInfo: Array<String> = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _indexBufferIsUpdatable: Any = definedExternally
    open var _boundingInfo: BoundingInfo = definedExternally
    open var _delayLoadingFunction: (any: Any, geometry: Geometry) -> Unit = definedExternally
    open var _softwareSkinningFrameId: Number = definedExternally
    open var _vertexArrayObjects: Any = definedExternally
    open var _updatable: Any = definedExternally
    open var _positions: Array<Vector3> = definedExternally
    open var boundingBias: Vector2 = definedExternally
    open var extend: `T$26` = definedExternally
    open fun getScene(): Scene = definedExternally
    open fun getEngine(): Engine = definedExternally
    open fun isReady(): Boolean = definedExternally
    open var doNotSerialize: Boolean = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun setAllVerticesData(vertexData: VertexData, updatable: Boolean? = definedExternally /* null */): Unit = definedExternally
	override fun setVerticesData(kind: String, data: Array<Number>, updatable: Boolean?  /* null */, stride: Int?  /* null */): Unit = definedExternally
	override fun setVerticesData(kind: String, data: Float32Array, updatable: Boolean?  /* null */, stride: Int?  /* null */): Unit = definedExternally
    open fun removeVerticesData(kind: String): Unit = definedExternally
    open fun setVerticesBuffer(buffer: VertexBuffer, totalVertices: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateVerticesDataDirectly(kind: String, data: Array<Number>, offset: Number, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
	open fun updateVerticesDataDirectly(kind: String, data: ArrayBuffer, offset: Number, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
	open fun updateVerticesDataDirectly(kind: String, data: ArrayBufferView, offset: Number, useBytes: Boolean? = definedExternally /* null */): Unit = definedExternally
	override fun updateVerticesData(kind: String, data: Array<Number>, updateExtends: Boolean? /* null */, makeItUnique: Boolean?): Unit = definedExternally
	override fun updateVerticesData(kind: String, data: Float32Array, updateExtends: Boolean? /* null */, makeItUnique: Boolean?): Unit = definedExternally
    open var _updateBoundingInfo: Any = definedExternally
    open fun _bind(effect: Effect, indexToBind: DataBuffer? = definedExternally /* null */): Unit = definedExternally
    open fun getTotalVertices(): Number = definedExternally
    override fun getVerticesData(kind: String, copyWhenShared: Boolean?, forceCopy: Boolean?): Any /* Array<Number> | Float32Array */ = definedExternally
    open fun isVertexBufferUpdatable(kind: String): Boolean = definedExternally
    open fun getVertexBuffer(kind: String): VertexBuffer = definedExternally
    open fun getVertexBuffers(): `T$25` = definedExternally
    override fun isVerticesDataPresent(kind: String): Boolean = definedExternally
    open fun getVerticesDataKinds(): Array<String> = definedExternally
    open fun updateIndices(indices: Array<Number>, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateIndices(indices: Int32Array, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateIndices(indices: Uint32Array, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updateIndices(indices: Uint16Array, offset: Number? = definedExternally /* null */, gpuMemoryOnly: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun setIndices(indices: Array<Number>, totalVertices:Int?, updatable: Boolean?): Unit = definedExternally
    override fun setIndices(indices: Int32Array, totalVertices:Int?, updatable: Boolean?): Unit = definedExternally
    override fun setIndices(indices: Uint32Array, totalVertices:Int?, updatable: Boolean?): Unit = definedExternally
    override fun setIndices(indices: Uint16Array, totalVertices:Int?, updatable: Boolean?): Unit = definedExternally
    open fun getTotalIndices(): Number = definedExternally
	override fun getIndices(copyWhenShared: Boolean?, forceCopy: Boolean?): Any/* Array<Number> | Int32Array | Uint32Array | Uint16Array */
    open fun getIndexBuffer(): DataBuffer = definedExternally
    open fun _releaseVertexArrayObject(effect: Effect? = definedExternally /* null */): Unit = definedExternally
    open fun releaseForMesh(mesh: Mesh, shouldDispose: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun applyToMesh(mesh: Mesh): Unit = definedExternally
    open var _updateExtend: Any = definedExternally
    open var _applyToMesh: Any = definedExternally
    open var notifyUpdate: Any = definedExternally
    open fun load(scene: Scene, onLoaded: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open var _queueLoad: Any = definedExternally
    open fun toLeftHanded(): Unit = definedExternally
    open fun _resetPointsArrayCache(): Unit = definedExternally
    open fun _generatePointsArray(): Boolean = definedExternally
    open fun isDisposed(): Boolean = definedExternally
    open var _disposeVertexArrayObjects: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun copy(id: String): Geometry = definedExternally
    open fun serialize(): Any = definedExternally
    open var toNumberArray: Any = definedExternally
    open fun serializeVerticeData(): Any = definedExternally
    companion object {
        fun CreateGeometryForMesh(mesh: Mesh): Geometry = definedExternally
        fun ExtractFromMesh(mesh: Mesh, id: String): Geometry = definedExternally
        fun RandomId(): String = definedExternally
        fun _ImportGeometry(parsedGeometry: Any, mesh: Mesh): Unit = definedExternally
        var _CleanMatricesWeights: Any = definedExternally
        fun Parse(parsedVertexData: Any, scene: Scene, rootUrl: String): Geometry = definedExternally
    }
}
external interface IGetSetVerticesData {
    fun isVerticesDataPresent(kind: String): Boolean
    fun getVerticesData(kind: String, copyWhenShared: Boolean? = definedExternally /* null */, forceCopy: Boolean? = definedExternally /* null */): Any /* Array<Number> | Float32Array */
	fun getIndices(copyWhenShared: Boolean? = definedExternally /* null */, forceCopy: Boolean? = definedExternally /* null */): Any/* Array<Number> | Int32Array | Uint32Array | Uint16Array */
    fun setVerticesData(kind: String, data: Array<Number>, updatable: Boolean?, stride:Int?)
    fun setVerticesData(kind: String, data: Float32Array, updatable: Boolean?, stride:Int?)
    fun updateVerticesData(kind: String, data: Array<Number>, updateExtends: Boolean? = definedExternally /* null */, makeItUnique: Boolean? = definedExternally /* null */)
    fun updateVerticesData(kind: String, data: Float32Array, updateExtends: Boolean? = definedExternally /* null */, makeItUnique: Boolean? = definedExternally /* null */)
    fun setIndices(indices: Array<Number>, totalVertices:Int? = definedExternally, updatable: Boolean? = definedExternally /* null */)
    fun setIndices(indices: Int32Array, totalVertices:Int? = definedExternally, updatable: Boolean? = definedExternally /* null */)
    fun setIndices(indices: Uint32Array, totalVertices:Int? = definedExternally, updatable: Boolean? = definedExternally /* null */)
    fun setIndices(indices: Uint16Array, totalVertices:Int? = definedExternally, updatable: Boolean? = definedExternally /* null */)
}
external interface `T$27` {
    var pathArray: Array<Array<Vector3>>
    var closeArray: Boolean? get() = definedExternally; set(value) = definedExternally
    var closePath: Boolean? get() = definedExternally; set(value) = definedExternally
    var offset: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
    var uvs: Array<Vector2>? get() = definedExternally; set(value) = definedExternally
    var colors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
}
external interface `T$28` {
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var depth: Number? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$29` {
    var segments: Number? get() = definedExternally; set(value) = definedExternally
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var diameterX: Number? get() = definedExternally; set(value) = definedExternally
    var diameterY: Number? get() = definedExternally; set(value) = definedExternally
    var diameterZ: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var slice: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$30` {
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var diameterTop: Number? get() = definedExternally; set(value) = definedExternally
    var diameterBottom: Number? get() = definedExternally; set(value) = definedExternally
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var hasRings: Boolean? get() = definedExternally; set(value) = definedExternally
    var enclose: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$31` {
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var thickness: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$32` {
    var lines: Array<Array<Vector3>>
    var colors: Array<Array<Color4>>? get() = definedExternally; set(value) = definedExternally
}
external interface `T$33` {
    var points: Array<Vector3>
    var dashSize: Number? get() = definedExternally; set(value) = definedExternally
    var gapSize: Number? get() = definedExternally; set(value) = definedExternally
    var dashNb: Number? get() = definedExternally; set(value) = definedExternally
}
external interface `T$34` {
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisionsX: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisionsY: Number? get() = definedExternally; set(value) = definedExternally
}
external interface `T$35` {
    var w: Number
    var h: Number
}
external interface `T$36` {
    var xmin: Number
    var zmin: Number
    var xmax: Number
    var zmax: Number
    var subdivisions: `T$35`? get() = definedExternally; set(value) = definedExternally
    var precision: `T$35`? get() = definedExternally; set(value) = definedExternally
}
external interface `T$37` {
    var width: Number
    var height: Number
    var subdivisions: Number
    var minHeight: Number
    var maxHeight: Number
    var colorFilter: Color3
    var buffer: Uint8Array
    var bufferWidth: Number
    var bufferHeight: Number
    var alphaFilter: Number
}
external interface `T$38` {
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$39` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$40` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var radiusX: Number? get() = definedExternally; set(value) = definedExternally
    var radiusY: Number? get() = definedExternally; set(value) = definedExternally
    var radiusZ: Number? get() = definedExternally; set(value) = definedExternally
    var flat: Boolean? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$41` {
    var type: Number? get() = definedExternally; set(value) = definedExternally
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var sizeX: Number? get() = definedExternally; set(value) = definedExternally
    var sizeY: Number? get() = definedExternally; set(value) = definedExternally
    var sizeZ: Number? get() = definedExternally; set(value) = definedExternally
    var custom: Any? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var flat: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$42` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tube: Number? get() = definedExternally; set(value) = definedExternally
    var radialSegments: Number? get() = definedExternally; set(value) = definedExternally
    var tubularSegments: Number? get() = definedExternally; set(value) = definedExternally
    var p: Number? get() = definedExternally; set(value) = definedExternally
    var q: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$43` {
    var facetNormals: Any? get() = definedExternally; set(value) = definedExternally
    var facetPositions: Any? get() = definedExternally; set(value) = definedExternally
    var facetPartitioning: Any? get() = definedExternally; set(value) = definedExternally
    var ratio: Number? get() = definedExternally; set(value) = definedExternally
    var bInfo: Any? get() = definedExternally; set(value) = definedExternally
    var bbSize: Vector3? get() = definedExternally; set(value) = definedExternally
    var subDiv: Any? get() = definedExternally; set(value) = definedExternally
    var useRightHandedSystem: Boolean? get() = definedExternally; set(value) = definedExternally
    var depthSort: Boolean? get() = definedExternally; set(value) = definedExternally
    var distanceTo: Vector3? get() = definedExternally; set(value) = definedExternally
    var depthSortedFacets: Any? get() = definedExternally; set(value) = definedExternally
}
external open class VertexData {
    open var positions: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var normals: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var tangents: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var uvs: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var uvs2: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var uvs3: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var uvs4: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var uvs5: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var uvs6: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var colors: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var matricesIndices: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var matricesWeights: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var matricesIndicesExtra: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var matricesWeightsExtra: dynamic /* Array<Number> | Float32Array */ = definedExternally
    open var indices: dynamic /* Array<Number> | Int32Array | Uint32Array | Uint16Array */ = definedExternally
    open fun set(data: Array<Number>, kind: String): Unit = definedExternally
    open fun set(data: Float32Array, kind: String): Unit = definedExternally
    open fun applyToMesh(mesh: Mesh, updatable: Boolean? = definedExternally /* null */): VertexData = definedExternally
    open fun applyToGeometry(geometry: Geometry, updatable: Boolean? = definedExternally /* null */): VertexData = definedExternally
    open fun updateMesh(mesh: Mesh): VertexData = definedExternally
    open fun updateGeometry(geometry: Geometry): VertexData = definedExternally
    open var _applyTo: Any = definedExternally
    open var _update: Any = definedExternally
    open fun transform(matrix: Matrix): VertexData = definedExternally
    open fun merge(other: VertexData, use32BitsIndices: Boolean? = definedExternally /* null */): VertexData = definedExternally
    open var _mergeElement: Any = definedExternally
    open var _validate: Any = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var FRONTSIDE: Number = definedExternally
        var BACKSIDE: Number = definedExternally
        var DOUBLESIDE: Number = definedExternally
        var DEFAULTSIDE: Number = definedExternally
        fun ExtractFromMesh(mesh: Mesh, copyWhenShared: Boolean? = definedExternally /* null */, forceCopy: Boolean? = definedExternally /* null */): VertexData = definedExternally
        fun ExtractFromGeometry(geometry: Geometry, copyWhenShared: Boolean? = definedExternally /* null */, forceCopy: Boolean? = definedExternally /* null */): VertexData = definedExternally
        var _ExtractFrom: Any = definedExternally
        fun CreateRibbon(options: `T$27`): VertexData = definedExternally
        fun CreateBox(options: `T$28`): VertexData = definedExternally
        fun CreateSphere(options: `T$29`): VertexData = definedExternally
        fun CreateCylinder(options: `T$30`): VertexData = definedExternally
        fun CreateTorus(options: `T$31`): VertexData = definedExternally
        fun CreateLineSystem(options: `T$32`): VertexData = definedExternally
        fun CreateDashedLines(options: `T$33`): VertexData = definedExternally
        fun CreateGround(options: `T$34`): VertexData = definedExternally
        fun CreateTiledGround(options: `T$36`): VertexData = definedExternally
        fun CreateGroundFromHeightMap(options: `T$37`): VertexData = definedExternally
        fun CreatePlane(options: `T$38`): VertexData = definedExternally
        fun CreateDisc(options: `T$39`): VertexData = definedExternally
        fun CreatePolygon(polygon: Mesh, sideOrientation: Number, fUV: Array<Vector4>? = definedExternally /* null */, fColors: Array<Color4>? = definedExternally /* null */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): VertexData = definedExternally
        fun CreateIcoSphere(options: `T$40`): VertexData = definedExternally
        fun CreatePolyhedron(options: `T$41`): VertexData = definedExternally
        fun CreateTorusKnot(options: `T$42`): VertexData = definedExternally
        fun ComputeNormals(positions: Any, indices: Any, normals: Any, options: `T$43`? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Array<Number>, indices: Array<Number>, normals: Array<Number>, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Array<Number>, indices: Array<Number>, normals: Float32Array, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Array<Number>, indices: Float32Array, normals: Array<Number>, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Array<Number>, indices: Float32Array, normals: Float32Array, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Float32Array, indices: Array<Number>, normals: Array<Number>, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Float32Array, indices: Array<Number>, normals: Float32Array, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Float32Array, indices: Float32Array, normals: Array<Number>, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun _ComputeSides(sideOrientation: Number, positions: Float32Array, indices: Float32Array, normals: Float32Array, uvs: dynamic /* Array<Number> | Float32Array */, frontUVs: Vector4? = definedExternally /* null */, backUVs: Vector4? = definedExternally /* null */): Unit = definedExternally
        fun ImportVertexData(parsedVertexData: Any, geometry: Geometry): Unit = definedExternally
    }
}
external interface `T$44` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external open class DiscBuilder {
    companion object {
        fun CreateDisc(name: String, options: `T$44`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$45` {
    var idx: Number
    var faceId: Number
}
external interface `T$46` {
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var isPickable: Boolean? get() = definedExternally; set(value) = definedExternally
    var enableDepthSort: Boolean? get() = definedExternally; set(value) = definedExternally
    var particleIntersection: Boolean? get() = definedExternally; set(value) = definedExternally
    var boundingSphereOnly: Boolean? get() = definedExternally; set(value) = definedExternally
    var bSphereRadiusFactor: Number? get() = definedExternally; set(value) = definedExternally
}
external interface `T$47` {
    var facetNb: Number? get() = definedExternally; set(value) = definedExternally
    var number: Number? get() = definedExternally; set(value) = definedExternally
    var delta: Number? get() = definedExternally; set(value) = definedExternally
}
external interface `T$48` {
    var positionFunction: Any? get() = definedExternally; set(value) = definedExternally
    var vertexFunction: Any? get() = definedExternally; set(value) = definedExternally
}
external open class SolidParticleSystem(name: String, scene: Scene, options: `T$46`? = definedExternally /* null */) : IDisposable {
    open var particles: Array<SolidParticle> = definedExternally
    open var nbParticles: Number = definedExternally
    open var billboard: Boolean = definedExternally
    open var recomputeNormals: Boolean = definedExternally
    open var counter: Number = definedExternally
    open var name: String = definedExternally
    open var mesh: Mesh = definedExternally
    open var vars: Any = definedExternally
    open var pickedParticles: Array<`T$45`> = definedExternally
    open var depthSortedParticles: Array<DepthSortedParticle> = definedExternally
    open var _bSphereOnly: Boolean = definedExternally
    open var _bSphereRadiusFactor: Number = definedExternally
    open var _scene: Any = definedExternally
    open var _positions: Any = definedExternally
    open var _indices: Any = definedExternally
    open var _normals: Any = definedExternally
    open var _colors: Any = definedExternally
    open var _uvs: Any = definedExternally
    open var _indices32: Any = definedExternally
    open var _positions32: Any = definedExternally
    open var _normals32: Any = definedExternally
    open var _fixedNormal32: Any = definedExternally
    open var _colors32: Any = definedExternally
    open var _uvs32: Any = definedExternally
    open var _index: Any = definedExternally
    open var _updatable: Any = definedExternally
    open var _pickable: Any = definedExternally
    open var _isVisibilityBoxLocked: Any = definedExternally
    open var _alwaysVisible: Any = definedExternally
    open var _depthSort: Any = definedExternally
    open var _shapeCounter: Any = definedExternally
    open var _copy: Any = definedExternally
    open var _color: Any = definedExternally
    open var _computeParticleColor: Any = definedExternally
    open var _computeParticleTexture: Any = definedExternally
    open var _computeParticleRotation: Any = definedExternally
    open var _computeParticleVertex: Any = definedExternally
    open var _computeBoundingBox: Any = definedExternally
    open var _depthSortParticles: Any = definedExternally
    open var _camera: Any = definedExternally
    open var _mustUnrotateFixedNormals: Any = definedExternally
    open var _particlesIntersect: Any = definedExternally
    open var _needs32Bits: Any = definedExternally
    open fun buildMesh(): Mesh = definedExternally
    open fun digest(mesh: Mesh, options: `T$47`? = definedExternally /* null */): SolidParticleSystem = definedExternally
    open var _unrotateFixedNormals: Any = definedExternally
    open var _resetCopy: Any = definedExternally
    open var _meshBuilder: Any = definedExternally
    open var _posToShape: Any = definedExternally
    open var _uvsToShapeUV: Any = definedExternally
    open var _addParticle: Any = definedExternally
    open fun addShape(mesh: Mesh, nb: Number, options: `T$48`? = definedExternally /* null */): Number = definedExternally
    open var _rebuildParticle: Any = definedExternally
    open fun rebuildMesh(): SolidParticleSystem = definedExternally
    open fun setParticles(start: Number? = definedExternally /* null */, end: Number? = definedExternally /* null */, update: Boolean? = definedExternally /* null */): SolidParticleSystem = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun refreshVisibleSize(): SolidParticleSystem = definedExternally
    open fun setVisibilityBox(size: Number): Unit = definedExternally
    open var isAlwaysVisible: Boolean = definedExternally
    open var isVisibilityBoxLocked: Boolean = definedExternally
    open var computeParticleRotation: Boolean = definedExternally
    open var computeParticleColor: Boolean = definedExternally
    open var computeParticleTexture: Boolean = definedExternally
    open var computeParticleVertex: Boolean = definedExternally
    open var computeBoundingBox: Boolean = definedExternally
    open var depthSortParticles: Boolean = definedExternally
    open fun initParticles(): Unit = definedExternally
    open fun recycleParticle(particle: SolidParticle): SolidParticle = definedExternally
    open fun updateParticle(particle: SolidParticle): SolidParticle = definedExternally
    open fun updateParticleVertex(particle: SolidParticle, vertex: Vector3, pt: Number): Vector3 = definedExternally
    open fun beforeUpdateParticles(start: Number? = definedExternally /* null */, stop: Number? = definedExternally /* null */, update: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun afterUpdateParticles(start: Number? = definedExternally /* null */, stop: Number? = definedExternally /* null */, update: Boolean? = definedExternally /* null */): Unit = definedExternally
}
external open class SolidParticle(particleIndex: Number, positionIndex: Number, indiceIndex: Number, model: ModelShape, shapeId: Number, idxInShape: Number, sps: SolidParticleSystem, modelBoundingInfo: BoundingInfo? = definedExternally /* null */) {
    open var idx: Number = definedExternally
    open var color: Color4 = definedExternally
    open var position: Vector3 = definedExternally
    open var rotation: Vector3 = definedExternally
    open var rotationQuaternion: Quaternion = definedExternally
    open var scaling: Vector3 = definedExternally
    open var uvs: Vector4 = definedExternally
    open var velocity: Vector3 = definedExternally
    open var pivot: Vector3 = definedExternally
    open var translateFromPivot: Boolean = definedExternally
    open var alive: Boolean = definedExternally
    open var isVisible: Boolean = definedExternally
    open var _pos: Number = definedExternally
    open var _ind: Number = definedExternally
    open var _model: ModelShape = definedExternally
    open var shapeId: Number = definedExternally
    open var idxInShape: Number = definedExternally
    open var _modelBoundingInfo: BoundingInfo = definedExternally
    open var _boundingInfo: BoundingInfo = definedExternally
    open var _sps: SolidParticleSystem = definedExternally
    open var _stillInvisible: Boolean = definedExternally
    open var _rotationMatrix: Array<Number> = definedExternally
    open var parentId: Number = definedExternally
    open var cullingStrategy: Number = definedExternally
    open var _globalPosition: Vector3 = definedExternally
    open var scale: Vector3 = definedExternally
    open var quaternion: Quaternion = definedExternally
    open fun intersectsMesh(target: Mesh): Boolean = definedExternally
    open fun intersectsMesh(target: SolidParticle): Boolean = definedExternally
    open fun isInFrustum(frustumPlanes: Array<Plane>): Boolean = definedExternally
    open fun getRotationMatrix(m: Matrix): Unit = definedExternally
}
external open class ModelShape(id: Number, shape: Array<Vector3>, indicesLength: Number, shapeUV: Array<Number>, posFunction: (particle: SolidParticle, i: Number, s: Number) -> Unit, vtxFunction: (particle: SolidParticle, vertex: Vector3, i: Number) -> Unit) {
    open var shapeID: Number = definedExternally
    open var _shape: Array<Vector3> = definedExternally
    open var _shapeUV: Array<Number> = definedExternally
    open var _indicesLength: Number = definedExternally
    open var _positionFunction: (particle: SolidParticle, i: Number, s: Number) -> Unit = definedExternally
    open var _vertexFunction: (particle: SolidParticle, vertex: Vector3, i: Number) -> Unit = definedExternally
}
external open class DepthSortedParticle {
    open var ind: Number = definedExternally
    open var indicesLength: Number = definedExternally
    open var sqDistance: Number = definedExternally
}
external open class _MeshCollisionData {
    open var _checkCollisions: Boolean = definedExternally
    open var _collisionMask: Number = definedExternally
    open var _collisionGroup: Number = definedExternally
    open var _collider: Collider = definedExternally
    open var _oldPositionForCollisions: Vector3 = definedExternally
    open var _diffPositionForCollisions: Vector3 = definedExternally
    open var _onCollideObserver: Observer<AbstractMesh> = definedExternally
    open var _onCollisionPositionChangeObserver: Observer<Vector3> = definedExternally
}
external interface `T$49` {
    var max: Number
    var X: Number
    var Y: Number
    var Z: Number
}
external interface `T$50` {
    var ind: Number
    var sqDistance: Number
}
external open class _FacetDataStorage {
    open var facetPositions: Array<Vector3> = definedExternally
    open var facetNormals: Array<Vector3> = definedExternally
    open var facetPartitioning: Array<Array<Number>> = definedExternally
    open var facetNb: Number = definedExternally
    open var partitioningSubdivisions: Number = definedExternally
    open var partitioningBBoxRatio: Number = definedExternally
    open var facetDataEnabled: Boolean = definedExternally
    open var facetParameters: Any = definedExternally
    open var bbSize: Vector3 = definedExternally
    open var subDiv: `T$49` = definedExternally
    open var facetDepthSort: Boolean = definedExternally
    open var facetDepthSortEnabled: Boolean = definedExternally
    open var depthSortedIndices: dynamic /* Array<Number> | Int32Array | Uint32Array | Uint16Array */ = definedExternally
    open var depthSortedFacets: Array<`T$50`> = definedExternally
    open var facetDepthSortFunction: (f1: `T$50`, f2: `T$50`) -> Number = definedExternally
    open var facetDepthSortFrom: Vector3 = definedExternally
    open var facetDepthSortOrigin: Vector3 = definedExternally
    open var invertedMatrix: Matrix = definedExternally
}
external open class _InternalAbstractMeshDataInfo {
    open var _hasVertexAlpha: Boolean = definedExternally
    open var _useVertexColors: Boolean = definedExternally
    open var _numBoneInfluencers: Number = definedExternally
    open var _applyFog: Boolean = definedExternally
    open var _receiveShadows: Boolean = definedExternally
    open var _facetData: _FacetDataStorage = definedExternally
    open var _visibility: Number = definedExternally
    open var _skeleton: Skeleton = definedExternally
    open var _layerMask: Number = definedExternally
    open var _computeBonesUsingShaders: Boolean = definedExternally
    open var _isActive: Boolean = definedExternally
    open var _onlyForInstances: Boolean = definedExternally
    open var _isActiveIntermediate: Boolean = definedExternally
    open var _onlyForInstancesIntermediate: Boolean = definedExternally
}
external interface `T$51` {
    var lods: Any?
    var actions: Any?
    var freezeWorldMatrix: Boolean
}
external interface IActionEvent {
    var source: Any
    var pointerX: Number
    var pointerY: Number
    var meshUnderPointer: AbstractMesh
    var sourceEvent: Any?
    var additionalData: Any?
}
external open class ActionEvent(source: Any, pointerX: Number, pointerY: Number, meshUnderPointer: AbstractMesh, sourceEvent: Any? = definedExternally /* null */, additionalData: Any? = definedExternally /* null */) : IActionEvent {
    override var source: Any = definedExternally
    override var pointerX: Number = definedExternally
    override var pointerY: Number = definedExternally
    override var meshUnderPointer: AbstractMesh = definedExternally
    override var sourceEvent: Any?
    override var additionalData: Any?
    companion object {
        fun CreateNew(source: AbstractMesh, evt: Event? = definedExternally /* null */, additionalData: Any? = definedExternally /* null */): ActionEvent = definedExternally
        fun CreateNewFromSprite(source: Sprite, scene: Scene, evt: Event? = definedExternally /* null */, additionalData: Any? = definedExternally /* null */): ActionEvent = definedExternally
        fun CreateNewFromScene(scene: Scene, evt: Event): ActionEvent = definedExternally
        fun CreateNewFromPrimitive(prim: Any, pointerPos: Vector2, evt: Event? = definedExternally /* null */, additionalData: Any? = definedExternally /* null */): ActionEvent = definedExternally
    }
}
external interface `T$52` {
    @nativeGetter
    operator fun get(key: String): Number?
    @nativeSetter
    operator fun set(key: String, value: Number)
}
external open class AbstractActionManager : IDisposable {
    open var hoverCursor: String = definedExternally
    open var actions: Array<IAction> = definedExternally
    open var isRecursive: Boolean = definedExternally
    override fun dispose(): Unit = definedExternally
    open var hasPointerTriggers: Boolean = definedExternally
    open var hasPickTriggers: Boolean = definedExternally
    open fun processTrigger(trigger: Number, evt: IActionEvent? = definedExternally /* null */): Unit = definedExternally
    open fun hasSpecificTriggers(triggers: Array<Number>): Boolean = definedExternally
    open fun hasSpecificTriggers2(triggerA: Number, triggerB: Number): Boolean = definedExternally
    open fun hasSpecificTrigger(trigger: Number, parameterPredicate: ((parameter: Any) -> Boolean)? = definedExternally /* null */): Boolean = definedExternally
    open fun serialize(name: String): Any = definedExternally
    open fun registerAction(action: IAction): IAction = definedExternally
    open fun unregisterAction(action: IAction): Boolean = definedExternally
    companion object {
        var Triggers: `T$52` = definedExternally
        var HasTriggers: Boolean = definedExternally
        var HasPickTriggers: Boolean = definedExternally
        fun HasSpecificTrigger(trigger: Number): Boolean = definedExternally
    }
}
external interface `T$53` {
    @nativeGetter
    operator fun get(name: String): AnimationRange?
    @nativeSetter
    operator fun set(name: String, value: AnimationRange)
}
external interface `T$54` {
    var min: Vector3
    var max: Vector3
}
external open class Node(name: String, scene: Scene? = definedExternally /* null */, addToRootNodes: Boolean? = definedExternally /* null */) : IBehaviorAware<Node> {
    open var name: String = definedExternally
    open var id: String = definedExternally
    open var uniqueId: Number = definedExternally
    open var state: String = definedExternally
    open var metadata: Any = definedExternally
    open var reservedDataStore: Any = definedExternally
    open var inspectableCustomProperties: Array<IInspectable> = definedExternally
    open var doNotSerialize: Boolean = definedExternally
    open var _isDisposed: Boolean = definedExternally
    open var animations: Array<Animation> = definedExternally
    open var _ranges: `T$53` = definedExternally
    open var onReady: (node: Node) -> Unit = definedExternally
    open var _isEnabled: Any = definedExternally
    open var _isParentEnabled: Any = definedExternally
    open var _isReady: Any = definedExternally
    open var _currentRenderId: Number = definedExternally
    open var _parentUpdateId: Any = definedExternally
    open var _childUpdateId: Number = definedExternally
    open var _waitingParentId: String = definedExternally
    open var _scene: Scene = definedExternally
    open var _cache: Any = definedExternally
    open var _parentNode: Any = definedExternally
    open var _children: Any = definedExternally
    open var _worldMatrix: Matrix = definedExternally
    open var _worldMatrixDeterminant: Number = definedExternally
    open var _worldMatrixDeterminantIsDirty: Boolean = definedExternally
    open var _sceneRootNodesIndex: Any = definedExternally
    open fun isDisposed(): Boolean = definedExternally
    open var parent: Node = definedExternally
    open var addToSceneRootNodes: Any = definedExternally
    open var removeFromSceneRootNodes: Any = definedExternally
    open var _animationPropertiesOverride: Any = definedExternally
    open var animationPropertiesOverride: AnimationPropertiesOverride = definedExternally
    open fun getClassName(): String = definedExternally
    open var _isNode: Boolean = definedExternally
    open var onDisposeObservable: Observable<Node> = definedExternally
    open var _onDisposeObserver: Any = definedExternally
    open var onDispose: () -> Unit = definedExternally
    open fun getScene(): Scene = definedExternally
    open fun getEngine(): Engine = definedExternally
    open var _behaviors: Any = definedExternally
	override fun addBehavior(behavior: Behavior<Node>): Node = definedExternally
	open fun addBehavior(behavior: Behavior<Node>, attachImmediately: Boolean? = definedExternally /* null */): Node = definedExternally
	override fun removeBehavior(behavior: Behavior<Node>): Node = definedExternally
    open var behaviors: Array<Behavior<Node>> = definedExternally
    override fun getBehaviorByName(name: String): Behavior<Node> = definedExternally
    open fun getWorldMatrix(): Matrix = definedExternally
    open fun _getWorldMatrixDeterminant(): Number = definedExternally
    open var worldMatrixFromCache: Matrix = definedExternally
    open fun _initCache(): Unit = definedExternally
    open fun updateCache(force: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun _getActionManagerForTrigger(trigger: Number? = definedExternally /* null */, initialCall: Boolean? = definedExternally /* null */): AbstractActionManager = definedExternally
    open fun _updateCache(ignoreParentClass: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun _isSynchronized(): Boolean = definedExternally
    open fun _markSyncedWithParent(): Unit = definedExternally
    open fun isSynchronizedWithParent(): Boolean = definedExternally
    open fun isSynchronized(): Boolean = definedExternally
    open fun isReady(completeCheck: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun isEnabled(checkAncestors: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun _syncParentEnabledState(): Unit = definedExternally
    open fun setEnabled(value: Boolean): Unit = definedExternally
    open fun isDescendantOf(ancestor: Node): Boolean = definedExternally
    open fun _getDescendants(results: Array<Node>, directDescendantsOnly: Boolean? = definedExternally /* null */, predicate: ((node: Node) -> Boolean)? = definedExternally /* null */): Unit = definedExternally
    open fun getDescendants(directDescendantsOnly: Boolean? = definedExternally /* null */, predicate: ((node: Node) -> Boolean)? = definedExternally /* null */): Array<Node> = definedExternally
    open fun getChildMeshes(directDescendantsOnly: Boolean? = definedExternally /* null */, predicate: ((node: Node) -> Boolean)? = definedExternally /* null */): Array<AbstractMesh> = definedExternally
    open fun getChildren(predicate: ((node: Node) -> Boolean)? = definedExternally /* null */, directDescendantsOnly: Boolean? = definedExternally /* null */): Array<Node> = definedExternally
    open fun _setReady(state: Boolean): Unit = definedExternally
    open fun getAnimationByName(name: String): Animation = definedExternally
    open fun createAnimationRange(name: String, from: Number, to: Number): Unit = definedExternally
    open fun deleteAnimationRange(name: String, deleteFrames: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getAnimationRange(name: String): AnimationRange = definedExternally
    open fun getAnimationRanges(): Array<AnimationRange> = definedExternally
    open fun beginAnimation(name: String, loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Animatable = definedExternally
    open fun serializeAnimationRanges(): Any = definedExternally
    open fun computeWorldMatrix(force: Boolean? = definedExternally /* null */): Matrix = definedExternally
    open fun dispose(doNotRecurse: Boolean? = definedExternally /* null */, disposeMaterialAndTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getHierarchyBoundingVectors(includeDescendants: Boolean? = definedExternally /* null */, predicate: ((abstractMesh: AbstractMesh) -> Boolean)? = definedExternally /* null */): `T$54` = definedExternally
    companion object {
        var _AnimationRangeFactory: (name: String, from: Number, to: Number) -> AnimationRange = definedExternally
        var _NodeConstructors: Any = definedExternally
        fun AddNodeConstructor(type: String, constructorFunc: (name: String, scene: Scene, options: Any? /*= null*/) -> () -> Node): Unit = definedExternally
        fun Construct(type: String, name: String, scene: Scene, options: Any? = definedExternally /* null */): () -> Node = definedExternally
        fun ParseAnimationRanges(node: Node, parsedNode: Any, scene: Scene): Unit = definedExternally
    }
}
external open class _IAnimationState {
    open var key: Number = definedExternally
    open var repeatCount: Number = definedExternally
    open var workValue: Any = definedExternally
    open var loopMode: Number = definedExternally
    open var offsetValue: Any = definedExternally
    open var highLimitValue: Any = definedExternally
}
external open class Animation(name: String, targetProperty: String, framePerSecond: Number, dataType: Number, loopMode: Number? = definedExternally /* null */, enableBlending: Boolean? = definedExternally /* null */) {
    open var name: String = definedExternally
    open var targetProperty: String = definedExternally
    open var framePerSecond: Number = definedExternally
    open var dataType: Number = definedExternally
    open var loopMode: Number? = definedExternally
    open var enableBlending: Boolean = definedExternally
    open var _keys: Any = definedExternally
    open var _easingFunction: Any = definedExternally
    open var _runtimeAnimations: Array<RuntimeAnimation> = definedExternally
    open var _events: Any = definedExternally
    open var targetPropertyPath: Array<String> = definedExternally
    open var blendingSpeed: Number = definedExternally
    open var _ranges: Any = definedExternally
    open var runtimeAnimations: Array<RuntimeAnimation> = definedExternally
    open var hasRunningRuntimeAnimations: Boolean = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    open fun addEvent(event: AnimationEvent): Unit = definedExternally
    open fun removeEvents(frame: Number): Unit = definedExternally
    open fun getEvents(): Array<AnimationEvent> = definedExternally
    open fun createRange(name: String, from: Number, to: Number): Unit = definedExternally
    open fun deleteRange(name: String, deleteFrames: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getRange(name: String): AnimationRange = definedExternally
    open fun getKeys(): Array<IAnimationKey> = definedExternally
    open fun getHighestFrame(): Number = definedExternally
    open fun getEasingFunction(): IEasingFunction = definedExternally
    open fun setEasingFunction(easingFunction: EasingFunction): Unit = definedExternally
    open fun floatInterpolateFunction(startValue: Number, endValue: Number, gradient: Number): Number = definedExternally
    open fun floatInterpolateFunctionWithTangents(startValue: Number, outTangent: Number, endValue: Number, inTangent: Number, gradient: Number): Number = definedExternally
    open fun quaternionInterpolateFunction(startValue: Quaternion, endValue: Quaternion, gradient: Number): Quaternion = definedExternally
    open fun quaternionInterpolateFunctionWithTangents(startValue: Quaternion, outTangent: Quaternion, endValue: Quaternion, inTangent: Quaternion, gradient: Number): Quaternion = definedExternally
    open fun vector3InterpolateFunction(startValue: Vector3, endValue: Vector3, gradient: Number): Vector3 = definedExternally
    open fun vector3InterpolateFunctionWithTangents(startValue: Vector3, outTangent: Vector3, endValue: Vector3, inTangent: Vector3, gradient: Number): Vector3 = definedExternally
    open fun vector2InterpolateFunction(startValue: Vector2, endValue: Vector2, gradient: Number): Vector2 = definedExternally
    open fun vector2InterpolateFunctionWithTangents(startValue: Vector2, outTangent: Vector2, endValue: Vector2, inTangent: Vector2, gradient: Number): Vector2 = definedExternally
    open fun sizeInterpolateFunction(startValue: Size, endValue: Size, gradient: Number): Size = definedExternally
    open fun color3InterpolateFunction(startValue: Color3, endValue: Color3, gradient: Number): Color3 = definedExternally
    open fun _getKeyValue(value: Any): Any = definedExternally
    open fun _interpolate(currentFrame: Number, state: _IAnimationState): Any = definedExternally
    open fun matrixInterpolateFunction(startValue: Matrix, endValue: Matrix, gradient: Number, result: Matrix? = definedExternally /* null */): Matrix = definedExternally
    open fun clone(): Animation = definedExternally
    open fun setKeys(values: Array<IAnimationKey>): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var AllowMatricesInterpolation: Boolean = definedExternally
        var AllowMatrixDecomposeForInterpolation: Boolean = definedExternally
        fun _PrepareAnimation(name: String, targetProperty: String, framePerSecond: Number, totalFrame: Number, from: Any, to: Any, loopMode: Number? = definedExternally /* null */, easingFunction: EasingFunction? = definedExternally /* null */): Animation = definedExternally
        fun CreateAnimation(property: String, animationType: Number, framePerSecond: Number, easingFunction: EasingFunction): Animation = definedExternally
        fun CreateAndStartAnimation(name: String, node: Node, targetProperty: String, framePerSecond: Number, totalFrame: Number, from: Any, to: Any, loopMode: Number? = definedExternally /* null */, easingFunction: EasingFunction? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Animatable = definedExternally
        fun CreateAndStartHierarchyAnimation(name: String, node: Node, directDescendantsOnly: Boolean, targetProperty: String, framePerSecond: Number, totalFrame: Number, from: Any, to: Any, loopMode: Number? = definedExternally /* null */, easingFunction: EasingFunction? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Array<Animatable> = definedExternally
        fun CreateMergeAndStartAnimation(name: String, node: Node, targetProperty: String, framePerSecond: Number, totalFrame: Number, from: Any, to: Any, loopMode: Number? = definedExternally /* null */, easingFunction: EasingFunction? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Animatable = definedExternally
        fun TransitionTo(property: String, targetValue: Any, host: Any, scene: Scene, frameRate: Number, transition: Animation, duration: Number, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Animatable = definedExternally
        var _ANIMATIONTYPE_FLOAT: Any = definedExternally
        var _ANIMATIONTYPE_VECTOR3: Any = definedExternally
        var _ANIMATIONTYPE_QUATERNION: Any = definedExternally
        var _ANIMATIONTYPE_MATRIX: Any = definedExternally
        var _ANIMATIONTYPE_COLOR3: Any = definedExternally
        var _ANIMATIONTYPE_VECTOR2: Any = definedExternally
        var _ANIMATIONTYPE_SIZE: Any = definedExternally
        var _ANIMATIONLOOPMODE_RELATIVE: Any = definedExternally
        var _ANIMATIONLOOPMODE_CYCLE: Any = definedExternally
        var _ANIMATIONLOOPMODE_CONSTANT: Any = definedExternally
        var ANIMATIONTYPE_FLOAT: Number = definedExternally
        var ANIMATIONTYPE_VECTOR3: Number = definedExternally
        var ANIMATIONTYPE_VECTOR2: Number = definedExternally
        var ANIMATIONTYPE_SIZE: Number = definedExternally
        var ANIMATIONTYPE_QUATERNION: Number = definedExternally
        var ANIMATIONTYPE_MATRIX: Number = definedExternally
        var ANIMATIONTYPE_COLOR3: Number = definedExternally
        var ANIMATIONLOOPMODE_RELATIVE: Number = definedExternally
        var ANIMATIONLOOPMODE_CYCLE: Number = definedExternally
        var ANIMATIONLOOPMODE_CONSTANT: Number = definedExternally
        fun _UniversalLerp(left: Any, right: Any, amount: Number): Any = definedExternally
        fun Parse(parsedAnimation: Any): Animation = definedExternally
        fun AppendSerializedAnimations(source: IAnimatable, destination: Any): Unit = definedExternally
    }
}
external open class BaseTexture(scene: Scene) : IAnimatable {
    open var uniqueId: Number = definedExternally
    open var name: String = definedExternally
    open var metadata: Any = definedExternally
    open var reservedDataStore: Any = definedExternally
    open var _hasAlpha: Any = definedExternally
    open var hasAlpha: Boolean = definedExternally
    open var getAlphaFromRGB: Boolean = definedExternally
    open var level: Number = definedExternally
    open var coordinatesIndex: Number = definedExternally
    open var _coordinatesMode: Any = definedExternally
    open var coordinatesMode: Number = definedExternally
    open var wrapU: Number = definedExternally
    open var wrapV: Number = definedExternally
    open var wrapR: Number = definedExternally
    open var anisotropicFilteringLevel: Number = definedExternally
    open var isCube: Boolean = definedExternally
    open var is3D: Boolean = definedExternally
    open var gammaSpace: Boolean = definedExternally
    open var isRGBD: Boolean = definedExternally
    open var invertZ: Boolean = definedExternally
    open var noMipmap: Boolean = definedExternally
    open var lodLevelInAlpha: Boolean = definedExternally
    open var lodGenerationOffset: Number = definedExternally
    open var lodGenerationScale: Number = definedExternally
    open var isRenderTarget: Boolean = definedExternally
    open var uid: String = definedExternally
    override fun toString(): String = definedExternally
    open fun getClassName(): String = definedExternally
    override var animations: Array<Animation> = definedExternally
    open var onDisposeObservable: Observable<BaseTexture> = definedExternally
    open var _onDisposeObserver: Any = definedExternally
    open var onDispose: () -> Unit = definedExternally
    open var delayLoadState: Number = definedExternally
    open var _scene: Any = definedExternally
    open var _texture: InternalTexture = definedExternally
    open var _uid: Any = definedExternally
    open var isBlocking: Boolean = definedExternally
    open fun getScene(): Scene = definedExternally
    open fun getTextureMatrix(): Matrix = definedExternally
    open fun getReflectionTextureMatrix(): Matrix = definedExternally
    open fun getInternalTexture(): InternalTexture = definedExternally
    open fun isReadyOrNotBlocking(): Boolean = definedExternally
    open fun isReady(): Boolean = definedExternally
    open var _cachedSize: Any = definedExternally
    open fun getSize(): ISize = definedExternally
    open fun getBaseSize(): ISize = definedExternally
    open fun updateSamplingMode(samplingMode: Number): Unit = definedExternally
    open fun scale(ratio: Number): Unit = definedExternally
    open var canRescale: Boolean = definedExternally
    open fun _getFromCache(url: String, noMipmap: Boolean, sampling: Number? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */): InternalTexture = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun delayLoad(): Unit = definedExternally
    open fun clone(): BaseTexture = definedExternally
    open var textureType: Number = definedExternally
    open var textureFormat: Number = definedExternally
    open fun readPixels(faceIndex: Number? = definedExternally /* null */, level: Number? = definedExternally /* null */, buffer: ArrayBufferView? = definedExternally /* null */): ArrayBufferView = definedExternally
    open fun releaseInternalTexture(): Unit = definedExternally
    open var sphericalPolynomial: SphericalPolynomial = definedExternally
    open var _lodTextureHigh: BaseTexture = definedExternally
    open var _lodTextureMid: BaseTexture = definedExternally
    open var _lodTextureLow: BaseTexture = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var DEFAULT_ANISOTROPIC_FILTERING_LEVEL: Number = definedExternally
        fun WhenAllReady(textures: Array<BaseTexture>, callback: () -> Unit): Unit = definedExternally
    }
}
external open class UniformBuffer(engine: Engine, data: Array<Number>? = definedExternally /* null */, dynamic: Boolean? = definedExternally /* null */) {
    open var _engine: Any = definedExternally
    open var _buffer: Any = definedExternally
    open var _data: Any = definedExternally
    open var _bufferData: Any = definedExternally
    open var _dynamic: Any = definedExternally
    open var _uniformLocations: Any = definedExternally
    open var _uniformSizes: Any = definedExternally
    open var _uniformLocationPointer: Any = definedExternally
    open var _needSync: Any = definedExternally
    open var _noUBO: Any = definedExternally
    open var _currentEffect: Any = definedExternally
    open var updateMatrix3x3: (name: String, matrix: Float32Array) -> Unit = definedExternally
    open var updateMatrix2x2: (name: String, matrix: Float32Array) -> Unit = definedExternally
    open var updateFloat: (name: String, x: Number) -> Unit = definedExternally
    open var updateFloat2: (name: String, x: Number, y: Number, suffix: String? /*= null*/) -> Unit = definedExternally
    open var updateFloat3: (name: String, x: Number, y: Number, z: Number, suffix: String? /*= null*/) -> Unit = definedExternally
    open var updateFloat4: (name: String, x: Number, y: Number, z: Number, w: Number, suffix: String? /*= null*/) -> Unit = definedExternally
    open var updateMatrix: (name: String, mat: Matrix) -> Unit = definedExternally
    open var updateVector3: (name: String, vector: Vector3) -> Unit = definedExternally
    open var updateVector4: (name: String, vector: Vector4) -> Unit = definedExternally
    open var updateColor3: (name: String, color: Color3, suffix: String? /*= null*/) -> Unit = definedExternally
    open var updateColor4: (name: String, color: Color3, alpha: Number, suffix: String? /*= null*/) -> Unit = definedExternally
    open var useUbo: Boolean = definedExternally
    open var isSync: Boolean = definedExternally
    open fun isDynamic(): Boolean = definedExternally
    open fun getData(): Float32Array = definedExternally
    open fun getBuffer(): DataBuffer = definedExternally
    open var _fillAlignment: Any = definedExternally
    open fun addUniform(name: String, size: Number): Unit = definedExternally
    open fun addUniform(name: String, size: Array<Number>): Unit = definedExternally
    open fun addMatrix(name: String, mat: Matrix): Unit = definedExternally
    open fun addFloat2(name: String, x: Number, y: Number): Unit = definedExternally
    open fun addFloat3(name: String, x: Number, y: Number, z: Number): Unit = definedExternally
    open fun addColor3(name: String, color: Color3): Unit = definedExternally
    open fun addColor4(name: String, color: Color3, alpha: Number): Unit = definedExternally
    open fun addVector3(name: String, vector: Vector3): Unit = definedExternally
    open fun addMatrix3x3(name: String): Unit = definedExternally
    open fun addMatrix2x2(name: String): Unit = definedExternally
    open fun create(): Unit = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun update(): Unit = definedExternally
    open fun updateUniform(uniformName: String, data: Array<Number>, size: Number): Unit = definedExternally
    open fun updateUniform(uniformName: String, data: Float32Array, size: Number): Unit = definedExternally
    open var _updateMatrix3x3ForUniform: Any = definedExternally
    open var _updateMatrix3x3ForEffect: Any = definedExternally
    open var _updateMatrix2x2ForEffect: Any = definedExternally
    open var _updateMatrix2x2ForUniform: Any = definedExternally
    open var _updateFloatForEffect: Any = definedExternally
    open var _updateFloatForUniform: Any = definedExternally
    open var _updateFloat2ForEffect: Any = definedExternally
    open var _updateFloat2ForUniform: Any = definedExternally
    open var _updateFloat3ForEffect: Any = definedExternally
    open var _updateFloat3ForUniform: Any = definedExternally
    open var _updateFloat4ForEffect: Any = definedExternally
    open var _updateFloat4ForUniform: Any = definedExternally
    open var _updateMatrixForEffect: Any = definedExternally
    open var _updateMatrixForUniform: Any = definedExternally
    open var _updateVector3ForEffect: Any = definedExternally
    open var _updateVector3ForUniform: Any = definedExternally
    open var _updateVector4ForEffect: Any = definedExternally
    open var _updateVector4ForUniform: Any = definedExternally
    open var _updateColor3ForEffect: Any = definedExternally
    open var _updateColor3ForUniform: Any = definedExternally
    open var _updateColor4ForEffect: Any = definedExternally
    open var _updateColor4ForUniform: Any = definedExternally
    open fun setTexture(name: String, texture: BaseTexture): Unit = definedExternally
    open fun updateUniformDirectly(uniformName: String, data: Array<Number>): Unit = definedExternally
    open fun updateUniformDirectly(uniformName: String, data: Float32Array): Unit = definedExternally
    open fun bindToEffect(effect: Effect, name: String): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        var _MAX_UNIFORM_SIZE: Any = definedExternally
        var _tempBuffer: Any = definedExternally
    }
}
external interface `T$55` {
    var x: Number
    var y: Number
}
external interface `T$56` {
    var width: Number
    var height: Number
}
external open class Analyser(scene: Scene) {
    open var SMOOTHING: Number = definedExternally
    open var FFT_SIZE: Number = definedExternally
    open var BARGRAPHAMPLITUDE: Number = definedExternally
    open var DEBUGCANVASPOS: `T$55` = definedExternally
    open var DEBUGCANVASSIZE: `T$56` = definedExternally
    open var _byteFreqs: Any = definedExternally
    open var _byteTime: Any = definedExternally
    open var _floatFreqs: Any = definedExternally
    open var _webAudioAnalyser: Any = definedExternally
    open var _debugCanvas: Any = definedExternally
    open var _debugCanvasContext: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _registerFunc: Any = definedExternally
    open var _audioEngine: Any = definedExternally
    open fun getFrequencyBinCount(): Number = definedExternally
    open fun getByteFrequencyData(): Uint8Array = definedExternally
    open fun getByteTimeDomainData(): Uint8Array = definedExternally
    open fun getFloatFrequencyData(): Float32Array = definedExternally
    open fun drawDebugCanvas(): Unit = definedExternally
    open fun stopDebugCanvas(): Unit = definedExternally
    open fun connectAudioNodes(inputAudioNode: AudioNode, outputAudioNode: AudioNode): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
}
external interface IAudioEngine : IDisposable {
    var canUseWebAudio: Boolean
    var audioContext: AudioContext
    var masterGain: GainNode
    var isMP3supported: Boolean
    var isOGGsupported: Boolean
    var WarnedWebAudioUnsupported: Boolean
    var useCustomUnlockedButton: Boolean
    var unlocked: Boolean
    var onAudioUnlockedObservable: Observable<AudioEngine>
    var onAudioLockedObservable: Observable<AudioEngine>
    fun lock()
    fun unlock()
}
external open class AudioEngine(hostElement: HTMLElement? = definedExternally /* null */) : IAudioEngine {
    open var _audioContext: Any = definedExternally
    open var _audioContextInitialized: Any = definedExternally
    open var _muteButton: Any = definedExternally
    open var _hostElement: Any = definedExternally
    override var canUseWebAudio: Boolean = definedExternally
    override var masterGain: GainNode = definedExternally
    override var WarnedWebAudioUnsupported: Boolean = definedExternally
    override var isMP3supported: Boolean = definedExternally
    override var isOGGsupported: Boolean = definedExternally
    override var unlocked: Boolean = definedExternally
    override var useCustomUnlockedButton: Boolean = definedExternally
    override var onAudioUnlockedObservable: Observable<AudioEngine> = definedExternally
    override var onAudioLockedObservable: Observable<AudioEngine> = definedExternally
    override var audioContext: AudioContext = definedExternally
    open var _connectedAnalyser: Any = definedExternally
    override fun lock(): Unit = definedExternally
    override fun unlock(): Unit = definedExternally
    open var _resumeAudioContext: Any = definedExternally
    open var _initializeAudioContext: Any = definedExternally
    open var _tryToRun: Any = definedExternally
    open var _triggerRunningState: Any = definedExternally
    open var _triggerSuspendedState: Any = definedExternally
    open var _displayMuteButton: Any = definedExternally
    open var _moveButtonToTopLeft: Any = definedExternally
    open var _onResize: Any = definedExternally
    open var _hideMuteButton: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun getGlobalVolume(): Number = definedExternally
    open fun setGlobalVolume(newVolume: Number): Unit = definedExternally
    open fun connectToAnalyser(analyser: Analyser): Unit = definedExternally
}
external interface ILoadingScreen {
	fun displayLoadingUI()
	fun hideLoadingUI()
    var loadingUIBackgroundColor: String
    var loadingUIText: String
}
external open class DefaultLoadingScreen(_renderingCanvas: HTMLCanvasElement, _loadingText: String? = definedExternally /* null */, _loadingDivBackgroundColor: String? = definedExternally /* null */) : ILoadingScreen {
    open var _renderingCanvas: Any = definedExternally
    open var _loadingText: Any = definedExternally
    open var _loadingDivBackgroundColor: Any = definedExternally
    open var _loadingDiv: Any = definedExternally
    open var _loadingTextDiv: Any = definedExternally
	override fun displayLoadingUI(): Unit = definedExternally
	override fun hideLoadingUI(): Unit = definedExternally
    override var loadingUIText: String = definedExternally
    override var loadingUIBackgroundColor: String = definedExternally
    open var _resizeLoadingUI: Any = definedExternally
    companion object {
        var DefaultLogoUrl: String = definedExternally
        var DefaultSpinnerUrl: String = definedExternally
    }
}
external open class WebGLPipelineContext : IPipelineContext {
    open var engine: Engine = definedExternally
    open var program: WebGLProgram = definedExternally
    open var context: WebGLRenderingContext = definedExternally
    open var vertexShader: WebGLShader = definedExternally
    open var fragmentShader: WebGLShader = definedExternally
    open var isParallelCompiled: Boolean = definedExternally
    open var onCompiled: () -> Unit = definedExternally
    open var transformFeedback: WebGLTransformFeedback? = definedExternally
    override var isAsync: Boolean = definedExternally
    override var isReady: Boolean = definedExternally
	override fun _handlesSpectorRebuildCallback(onCompiled: (program: Any/*WebGLProgram*/) -> Unit): Unit = definedExternally
}
external open class WebGLDataBuffer(resource: WebGLBuffer) : DataBuffer {
    open var _buffer: Any = definedExternally
    override var underlyingResource: Any = definedExternally
}
external interface VideoTextureSettings {
    var autoPlay: Boolean? get() = definedExternally; set(value) = definedExternally
    var loop: Boolean? get() = definedExternally; set(value) = definedExternally
    var autoUpdateTexture: Boolean
    var poster: String? get() = definedExternally; set(value) = definedExternally
}
external interface `T$57` {
    var minWidth: Number
    var maxWidth: Number
    var minHeight: Number
    var maxHeight: Number
    var deviceId: String
}
external open class VideoTexture : Texture {
    constructor(name: String, src: String, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, settings: VideoTextureSettings? = definedExternally /* null */)
    constructor(name: String, src: Array<String>, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, settings: VideoTextureSettings? = definedExternally /* null */)
    constructor(name: String, src: HTMLVideoElement, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, settings: VideoTextureSettings? = definedExternally /* null */)
    open var autoUpdateTexture: Boolean = definedExternally
    open var video: HTMLVideoElement = definedExternally
    open var _onUserActionRequestedObservable: Any = definedExternally
    open var onUserActionRequestedObservable: Observable<Texture> = definedExternally
    open var _generateMipMaps: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _stillImageCaptured: Any = definedExternally
    open var _displayingPosterTexture: Any = definedExternally
    open var _settings: Any = definedExternally
    open var _createInternalTextureOnEvent: Any = definedExternally
    open var _getName: Any = definedExternally
    open var _getVideo: Any = definedExternally
    open var _createInternalTexture: Any = definedExternally
    open var reset: Any = definedExternally
    override fun _rebuild(): Unit = definedExternally
    open fun update(): Unit = definedExternally
    open fun updateTexture(isVisible: Boolean): Unit = definedExternally
    open var _updateInternalTexture: () -> Unit = definedExternally
	override fun updateURL(url: String): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        fun CreateFromStreamAsync(scene: Scene, stream: MediaStream): Promise<VideoTexture> = definedExternally
        fun CreateFromWebCamAsync(scene: Scene, constraints: `T$57` /* `T$57` & MediaTrackConstraints */, audioConstaints: Boolean? = definedExternally /* null */): Promise<VideoTexture> = definedExternally
        fun CreateFromWebCamAsync(scene: Scene, constraints: `T$57` /* `T$57` & MediaTrackConstraints */, audioConstaints: MediaTrackConstraints? = definedExternally /* null */): Promise<VideoTexture> = definedExternally
        fun CreateFromWebCam(scene: Scene, onReady: (videoTexture: VideoTexture) -> Unit, constraints: `T$57` /* `T$57` & MediaTrackConstraints */, audioConstaints: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun CreateFromWebCam(scene: Scene, onReady: (videoTexture: VideoTexture) -> Unit, constraints: `T$57` /* `T$57` & MediaTrackConstraints */, audioConstaints: MediaTrackConstraints? = definedExternally /* null */): Unit = definedExternally
        fun CreateFromWebCamAsync(scene: Scene, constraints: `T$57` /* `T$57` & MediaTrackConstraints */): Promise<VideoTexture> = definedExternally
        fun CreateFromWebCam(scene: Scene, onReady: (videoTexture: VideoTexture) -> Unit, constraints: `T$57` /* `T$57` & MediaTrackConstraints */): Unit = definedExternally
    }
}
external open class InstancingAttributeInfo {
    open var index: Number = definedExternally
    open var attributeSize: Number = definedExternally
    open var attribyteType: Number = definedExternally
    open var normalized: Boolean = definedExternally
    open var offset: Number = definedExternally
    open var attributeName: String = definedExternally
}
external open class DepthTextureCreationOptions {
    open var generateStencil: Boolean = definedExternally
    open var bilinearFiltering: Boolean = definedExternally
    open var comparisonFunction: Number = definedExternally
    open var isCube: Boolean = definedExternally
}
external interface `T$58` {
    var COMPLETION_STATUS_KHR: Number
}
external open class EngineCapabilities {
    open var maxTexturesImageUnits: Number = definedExternally
    open var maxVertexTextureImageUnits: Number = definedExternally
    open var maxCombinedTexturesImageUnits: Number = definedExternally
    open var maxTextureSize: Number = definedExternally
    open var maxCubemapTextureSize: Number = definedExternally
    open var maxRenderTextureSize: Number = definedExternally
    open var maxVertexAttribs: Number = definedExternally
    open var maxVaryingVectors: Number = definedExternally
    open var maxVertexUniformVectors: Number = definedExternally
    open var maxFragmentUniformVectors: Number = definedExternally
    open var standardDerivatives: Boolean = definedExternally
    open var s3tc: WEBGL_compressed_texture_s3tc = definedExternally
    open var pvrtc: Any = definedExternally
    open var etc1: Any = definedExternally
    open var etc2: Any = definedExternally
    open var astc: Any = definedExternally
    open var textureFloat: Boolean = definedExternally
    open var vertexArrayObject: Boolean = definedExternally
    open var textureAnisotropicFilterExtension: EXT_texture_filter_anisotropic = definedExternally
    open var maxAnisotropy: Number = definedExternally
    open var instancedArrays: Boolean = definedExternally
    open var uintIndices: Boolean = definedExternally
    open var highPrecisionShaderSupported: Boolean = definedExternally
    open var fragmentDepthSupported: Boolean = definedExternally
    open var textureFloatLinearFiltering: Boolean = definedExternally
    open var textureFloatRender: Boolean = definedExternally
    open var textureHalfFloat: Boolean = definedExternally
    open var textureHalfFloatLinearFiltering: Boolean = definedExternally
    open var textureHalfFloatRender: Boolean = definedExternally
    open var textureLOD: Boolean = definedExternally
    open var drawBuffersExtension: Boolean = definedExternally
    open var depthTextureExtension: Boolean = definedExternally
    open var colorBufferFloat: Boolean = definedExternally
    open var timerQuery: EXT_disjoint_timer_query = definedExternally
    open var canUseTimestampForTimerQuery: Boolean = definedExternally
    open var multiview: Any = definedExternally
    open var parallelShaderCompile: `T$58` = definedExternally
}
external interface EngineOptions : WebGLContextAttributes {
    var limitDeviceRatio: Number? get() = definedExternally; set(value) = definedExternally
    var autoEnableWebVR: Boolean? get() = definedExternally; set(value) = definedExternally
    var disableWebGL2Support: Boolean? get() = definedExternally; set(value) = definedExternally
    var audioEngine: Boolean? get() = definedExternally; set(value) = definedExternally
    var deterministicLockstep: Boolean? get() = definedExternally; set(value) = definedExternally
    var lockstepMaxSteps: Number? get() = definedExternally; set(value) = definedExternally
    var doNotHandleContextLost: Boolean? get() = definedExternally; set(value) = definedExternally
    var doNotHandleTouchAction: Boolean? get() = definedExternally; set(value) = definedExternally
    var useHighPrecisionFloats: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$59` {
    var key: String
    var capture: String
    var captureConstraint: Number
    var targets: Array<String>
}
external interface `T$60` {
    var key: String
    var capture: Nothing?
    var captureConstraint: Nothing?
    var targets: Array<String>
}
external interface `T$61` {
    @nativeGetter
    operator fun get(key: String): InternalTexture?
    @nativeSetter
    operator fun set(key: String, value: InternalTexture)
}
external interface `T$62` {
    var vendor: String
    var renderer: String
    var version: String
}
external interface `T$63` {
    @nativeGetter
    operator fun get(key: String): VertexBuffer?
    @nativeSetter
    operator fun set(key: String, value: VertexBuffer)
}
external interface `T$64` {
    var min: Number
    var mag: Number
}
external interface `T$65` {
    var width: Number
    var height: Number
}
external open class EffectFallbacks {
    open var _defines: Any = definedExternally
    open var _currentRank: Any = definedExternally
    open var _maxRank: Any = definedExternally
    open var _mesh: Any = definedExternally
    open fun unBindMesh(): Unit = definedExternally
    open fun addFallback(rank: Number, define: String): Unit = definedExternally
    open fun addCPUSkinningFallback(rank: Number, mesh: AbstractMesh): Unit = definedExternally
    open var isMoreFallbacks: Boolean = definedExternally
    open fun reduce(currentDefines: String, effect: Effect): String = definedExternally
}
external open class EffectCreationOptions {
    open var attributes: Array<String> = definedExternally
    open var uniformsNames: Array<String> = definedExternally
    open var uniformBuffersNames: Array<String> = definedExternally
    open var samplers: Array<String> = definedExternally
    open var defines: Any = definedExternally
    open var fallbacks: EffectFallbacks = definedExternally
    open var onCompiled: (effect: Effect) -> Unit = definedExternally
    open var onError: (effect: Effect, errors: String) -> Unit = definedExternally
    open var indexParameters: Any = definedExternally
    open var maxSimultaneousLights: Number = definedExternally
    open var transformFeedbackVaryings: Array<String> = definedExternally
}
external interface `T$66` {
    @nativeGetter
    operator fun get(key: String): String?
    @nativeSetter
    operator fun set(key: String, value: String)
}
external open class Effect : IDisposable {
    constructor(baseName: Any, attributesNamesOrOptions: Array<String>, uniformsNamesOrEngine: Array<String>, samplers: Array<String>? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */)
    constructor(baseName: Any, attributesNamesOrOptions: Array<String>, uniformsNamesOrEngine: Engine, samplers: Array<String>? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */)
    constructor(baseName: Any, attributesNamesOrOptions: EffectCreationOptions, uniformsNamesOrEngine: Array<String>, samplers: Array<String>? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */)
    constructor(baseName: Any, attributesNamesOrOptions: EffectCreationOptions, uniformsNamesOrEngine: Engine, samplers: Array<String>? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, defines: String? = definedExternally /* null */, fallbacks: EffectFallbacks? = definedExternally /* null */, onCompiled: ((effect: Effect) -> Unit)? = definedExternally /* null */, onError: ((effect: Effect, errors: String) -> Unit)? = definedExternally /* null */, indexParameters: Any? = definedExternally /* null */)
    open var name: Any = definedExternally
    open var defines: String = definedExternally
    open var onCompiled: (effect: Effect) -> Unit = definedExternally
    open var onError: (effect: Effect, errors: String) -> Unit = definedExternally
    open var onBind: (effect: Effect) -> Unit = definedExternally
    open var uniqueId: Number = definedExternally
    open var onCompileObservable: Observable<Effect> = definedExternally
    open var onErrorObservable: Observable<Effect> = definedExternally
    open var _onBindObservable: Observable<Effect> = definedExternally
    open var onBindObservable: Observable<Effect> = definedExternally
    open var _bonesComputationForcedToCPU: Boolean = definedExternally
    open var _engine: Any = definedExternally
    open var _uniformBuffersNames: Any = definedExternally
    open var _uniformsNames: Any = definedExternally
    open var _samplerList: Any = definedExternally
    open var _samplers: Any = definedExternally
    open var _isReady: Any = definedExternally
    open var _compilationError: Any = definedExternally
    open var _attributesNames: Any = definedExternally
    open var _attributes: Any = definedExternally
    open var _uniforms: Any = definedExternally
    open var _key: String = definedExternally
    open var _indexParameters: Any = definedExternally
    open var _fallbacks: Any = definedExternally
    open var _vertexSourceCode: Any = definedExternally
    open var _fragmentSourceCode: Any = definedExternally
    open var _vertexSourceCodeOverride: Any = definedExternally
    open var _fragmentSourceCodeOverride: Any = definedExternally
    open var _transformFeedbackVaryings: Any = definedExternally
    open var _pipelineContext: IPipelineContext = definedExternally
    open var _valueCache: Any = definedExternally
    open var key: String = definedExternally
    open fun isReady(): Boolean = definedExternally
    open fun getEngine(): Engine = definedExternally
    open fun getPipelineContext(): IPipelineContext = definedExternally
    open fun getAttributesNames(): Array<String> = definedExternally
    open fun getAttributeLocation(index: Number): Number = definedExternally
    open fun getAttributeLocationByName(name: String): Number = definedExternally
    open fun getAttributesCount(): Number = definedExternally
    open fun getUniformIndex(uniformName: String): Number = definedExternally
    open fun getUniform(uniformName: String): WebGLUniformLocation = definedExternally
    open fun getSamplers(): Array<String> = definedExternally
    open fun getCompilationError(): String = definedExternally
    open fun executeWhenCompiled(func: (effect: Effect) -> Unit): Unit = definedExternally
    open var _checkIsReady: Any = definedExternally
    open fun _loadVertexShader(vertex: Any, callback: (data: Any) -> Unit): Unit = definedExternally
    open fun _loadFragmentShader(fragment: Any, callback: (data: Any) -> Unit): Unit = definedExternally
    open fun _dumpShadersSource(vertexCode: String, fragmentCode: String, defines: String): Unit = definedExternally
    open var _processShaderConversion: Any = definedExternally
    open var _processIncludes: Any = definedExternally
    open var _processPrecision: Any = definedExternally
    open fun _rebuildProgram(vertexSourceCode: String, fragmentSourceCode: String, onCompiled: (pipelineContext: IPipelineContext) -> Unit, onError: (message: String) -> Unit): Unit = definedExternally
    open fun _prepareEffect(): Unit = definedExternally
    open var isSupported: Boolean = definedExternally
    open fun _bindTexture(channel: String, texture: InternalTexture): Unit = definedExternally
    open fun setTexture(channel: String, texture: BaseTexture): Unit = definedExternally
    open fun setDepthStencilTexture(channel: String, texture: RenderTargetTexture): Unit = definedExternally
    open fun setTextureArray(channel: String, textures: Array<BaseTexture>): Unit = definedExternally
    open fun setTextureFromPostProcess(channel: String, postProcess: PostProcess): Unit = definedExternally
    open fun setTextureFromPostProcessOutput(channel: String, postProcess: PostProcess): Unit = definedExternally
    open fun _cacheMatrix(uniformName: String, matrix: Matrix): Boolean = definedExternally
    open fun _cacheFloat2(uniformName: String, x: Number, y: Number): Boolean = definedExternally
    open fun _cacheFloat3(uniformName: String, x: Number, y: Number, z: Number): Boolean = definedExternally
    open fun _cacheFloat4(uniformName: String, x: Number, y: Number, z: Number, w: Number): Boolean = definedExternally
    open fun bindUniformBuffer(buffer: DataBuffer, name: String): Unit = definedExternally
    open fun bindUniformBlock(blockName: String, index: Number): Unit = definedExternally
    open fun setInt(uniformName: String, value: Number): Effect = definedExternally
    open fun setIntArray(uniformName: String, array: Int32Array): Effect = definedExternally
    open fun setIntArray2(uniformName: String, array: Int32Array): Effect = definedExternally
    open fun setIntArray3(uniformName: String, array: Int32Array): Effect = definedExternally
    open fun setIntArray4(uniformName: String, array: Int32Array): Effect = definedExternally
    open fun setFloatArray(uniformName: String, array: Float32Array): Effect = definedExternally
    open fun setFloatArray2(uniformName: String, array: Float32Array): Effect = definedExternally
    open fun setFloatArray3(uniformName: String, array: Float32Array): Effect = definedExternally
    open fun setFloatArray4(uniformName: String, array: Float32Array): Effect = definedExternally
    open fun setArray(uniformName: String, array: Array<Number>): Effect = definedExternally
    open fun setArray2(uniformName: String, array: Array<Number>): Effect = definedExternally
    open fun setArray3(uniformName: String, array: Array<Number>): Effect = definedExternally
    open fun setArray4(uniformName: String, array: Array<Number>): Effect = definedExternally
    open fun setMatrices(uniformName: String, matrices: Float32Array): Effect = definedExternally
    open fun setMatrix(uniformName: String, matrix: Matrix): Effect = definedExternally
    open fun setMatrix3x3(uniformName: String, matrix: Float32Array): Effect = definedExternally
    open fun setMatrix2x2(uniformName: String, matrix: Float32Array): Effect = definedExternally
    open fun setFloat(uniformName: String, value: Number): Effect = definedExternally
    open fun setBool(uniformName: String, bool: Boolean): Effect = definedExternally
    open fun setVector2(uniformName: String, vector2: Vector2): Effect = definedExternally
    open fun setFloat2(uniformName: String, x: Number, y: Number): Effect = definedExternally
    open fun setVector3(uniformName: String, vector3: Vector3): Effect = definedExternally
    open fun setFloat3(uniformName: String, x: Number, y: Number, z: Number): Effect = definedExternally
    open fun setVector4(uniformName: String, vector4: Vector4): Effect = definedExternally
    open fun setFloat4(uniformName: String, x: Number, y: Number, z: Number, w: Number): Effect = definedExternally
    open fun setColor3(uniformName: String, color3: Color3): Effect = definedExternally
    open fun setColor4(uniformName: String, color3: Color3, alpha: Number): Effect = definedExternally
    open fun setDirectColor4(uniformName: String, color4: Color4): Effect = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        var ShadersRepository: String = definedExternally
        var _uniqueIdSeed: Any = definedExternally
        var _baseCache: Any = definedExternally
        fun RegisterShader(name: String, pixelShader: String? = definedExternally /* null */, vertexShader: String? = definedExternally /* null */): Unit = definedExternally
        var ShadersStore: `T$66` = definedExternally
        var IncludesShadersStore: `T$66` = definedExternally
        fun ResetCache(): Unit = definedExternally
    }
}
external open class ColorCurves {
    open var _dirty: Any = definedExternally
    open var _tempColor: Any = definedExternally
    open var _globalCurve: Any = definedExternally
    open var _highlightsCurve: Any = definedExternally
    open var _midtonesCurve: Any = definedExternally
    open var _shadowsCurve: Any = definedExternally
    open var _positiveCurve: Any = definedExternally
    open var _negativeCurve: Any = definedExternally
    open var _globalHue: Any = definedExternally
    open var _globalDensity: Any = definedExternally
    open var _globalSaturation: Any = definedExternally
    open var _globalExposure: Any = definedExternally
    open var globalHue: Number = definedExternally
    open var globalDensity: Number = definedExternally
    open var globalSaturation: Number = definedExternally
    open var globalExposure: Number = definedExternally
    open var _highlightsHue: Any = definedExternally
    open var _highlightsDensity: Any = definedExternally
    open var _highlightsSaturation: Any = definedExternally
    open var _highlightsExposure: Any = definedExternally
    open var highlightsHue: Number = definedExternally
    open var highlightsDensity: Number = definedExternally
    open var highlightsSaturation: Number = definedExternally
    open var highlightsExposure: Number = definedExternally
    open var _midtonesHue: Any = definedExternally
    open var _midtonesDensity: Any = definedExternally
    open var _midtonesSaturation: Any = definedExternally
    open var _midtonesExposure: Any = definedExternally
    open var midtonesHue: Number = definedExternally
    open var midtonesDensity: Number = definedExternally
    open var midtonesSaturation: Number = definedExternally
    open var midtonesExposure: Number = definedExternally
    open var _shadowsHue: Any = definedExternally
    open var _shadowsDensity: Any = definedExternally
    open var _shadowsSaturation: Any = definedExternally
    open var _shadowsExposure: Any = definedExternally
    open var shadowsHue: Number = definedExternally
    open var shadowsDensity: Number = definedExternally
    open var shadowsSaturation: Number = definedExternally
    open var shadowsExposure: Number = definedExternally
    open fun getClassName(): String = definedExternally
    open var getColorGradingDataToRef: Any = definedExternally
    open fun clone(): ColorCurves = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        fun Bind(colorCurves: ColorCurves, effect: Effect, positiveUniform: String? = definedExternally /* null */, neutralUniform: String? = definedExternally /* null */, negativeUniform: String? = definedExternally /* null */): Unit = definedExternally
        fun PrepareUniforms(uniformsList: Array<String>): Unit = definedExternally
        var applyColorGradingSliderNonlinear: Any = definedExternally
        var fromHSBToRef: Any = definedExternally
        var clamp: Any = definedExternally
        fun Parse(source: Any): ColorCurves = definedExternally
    }
}
external interface IImageProcessingConfigurationDefines {
    var IMAGEPROCESSING: Boolean
    var VIGNETTE: Boolean
    var VIGNETTEBLENDMODEMULTIPLY: Boolean
    var VIGNETTEBLENDMODEOPAQUE: Boolean
    var TONEMAPPING: Boolean
    var TONEMAPPING_ACES: Boolean
    var CONTRAST: Boolean
    var EXPOSURE: Boolean
    var COLORCURVES: Boolean
    var COLORGRADING: Boolean
    var COLORGRADING3D: Boolean
    var SAMPLER3DGREENDEPTH: Boolean
    var SAMPLER3DBGRMAP: Boolean
    var IMAGEPROCESSINGPOSTPROCESS: Boolean
}
external open class ImageProcessingConfigurationDefines : MaterialDefines, IImageProcessingConfigurationDefines {
    override var IMAGEPROCESSING: Boolean = definedExternally
    override var VIGNETTE: Boolean = definedExternally
    override var VIGNETTEBLENDMODEMULTIPLY: Boolean = definedExternally
    override var VIGNETTEBLENDMODEOPAQUE: Boolean = definedExternally
    override var TONEMAPPING: Boolean = definedExternally
    override var TONEMAPPING_ACES: Boolean = definedExternally
    override var CONTRAST: Boolean = definedExternally
    override var COLORCURVES: Boolean = definedExternally
    override var COLORGRADING: Boolean = definedExternally
    override var COLORGRADING3D: Boolean = definedExternally
    override var SAMPLER3DGREENDEPTH: Boolean = definedExternally
    override var SAMPLER3DBGRMAP: Boolean = definedExternally
    override var IMAGEPROCESSINGPOSTPROCESS: Boolean = definedExternally
    override var EXPOSURE: Boolean = definedExternally
}
external open class ImageProcessingConfiguration {
    open var colorCurves: ColorCurves = definedExternally
    open var _colorCurvesEnabled: Any = definedExternally
    open var colorCurvesEnabled: Boolean = definedExternally
    open var _colorGradingTexture: Any = definedExternally
    open var colorGradingTexture: BaseTexture = definedExternally
    open var _colorGradingEnabled: Any = definedExternally
    open var colorGradingEnabled: Boolean = definedExternally
    open var _colorGradingWithGreenDepth: Any = definedExternally
    open var colorGradingWithGreenDepth: Boolean = definedExternally
    open var _colorGradingBGR: Any = definedExternally
    open var colorGradingBGR: Boolean = definedExternally
    open var _exposure: Number = definedExternally
    open var exposure: Number = definedExternally
    open var _toneMappingEnabled: Any = definedExternally
    open var toneMappingEnabled: Boolean = definedExternally
    open var _toneMappingType: Any = definedExternally
    open var toneMappingType: Number = definedExternally
    open var _contrast: Number = definedExternally
    open var contrast: Number = definedExternally
    open var vignetteStretch: Number = definedExternally
    open var vignetteCentreX: Number = definedExternally
    open var vignetteCentreY: Number = definedExternally
    open var vignetteWeight: Number = definedExternally
    open var vignetteColor: Color4 = definedExternally
    open var vignetteCameraFov: Number = definedExternally
    open var _vignetteBlendMode: Any = definedExternally
    open var vignetteBlendMode: Number = definedExternally
    open var _vignetteEnabled: Any = definedExternally
    open var vignetteEnabled: Boolean = definedExternally
    open var _applyByPostProcess: Any = definedExternally
    open var applyByPostProcess: Boolean = definedExternally
    open var _isEnabled: Any = definedExternally
    open var isEnabled: Boolean = definedExternally
    open var onUpdateParameters: Observable<ImageProcessingConfiguration> = definedExternally
    open fun _updateParameters(): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    open fun prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun isReady(): Boolean = definedExternally
    open fun bind(effect: Effect, aspectRatio: Number? = definedExternally /* null */): Unit = definedExternally
    open fun clone(): ImageProcessingConfiguration = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var TONEMAPPING_STANDARD: Number = definedExternally
        var TONEMAPPING_ACES: Number = definedExternally
        fun PrepareUniforms(uniforms: Array<String>, defines: IImageProcessingConfigurationDefines): Unit = definedExternally
        fun PrepareSamplers(samplersList: Array<String>, defines: IImageProcessingConfigurationDefines): Unit = definedExternally
        fun Parse(source: Any): ImageProcessingConfiguration = definedExternally
        var _VIGNETTEMODE_MULTIPLY: Any = definedExternally
        var _VIGNETTEMODE_OPAQUE: Any = definedExternally
        var VIGNETTEMODE_MULTIPLY: Number = definedExternally
        var VIGNETTEMODE_OPAQUE: Number = definedExternally
    }
}
external open class FresnelParameters {
    open var _isEnabled: Any = definedExternally
    open var isEnabled: Boolean = definedExternally
    open var leftColor: Color3 = definedExternally
    open var rightColor: Color3 = definedExternally
    open var bias: Number = definedExternally
    open var power: Number = definedExternally
    open fun clone(): FresnelParameters = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        fun Parse(parsedFresnelParameters: Any): FresnelParameters = definedExternally
    }
}
external fun expandToProperty(callback: String, targetKey: String? = definedExternally /* null */): (target: Any, propertyKey: String) -> Unit = definedExternally
external fun serialize(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsTexture(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsColor3(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsFresnelParameters(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsVector2(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsVector3(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsMeshReference(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsColorCurves(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsColor4(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsImageProcessingConfiguration(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsQuaternion(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsMatrix(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external fun serializeAsCameraReference(sourceName: String? = definedExternally /* null */): (target: Any, propertyKey: dynamic /* String | Any? */) -> Unit = definedExternally
external open class SerializationHelper {
    companion object {
        var _ImageProcessingConfigurationParser: (sourceProperty: Any) -> ImageProcessingConfiguration = definedExternally
        var _FresnelParametersParser: (sourceProperty: Any) -> FresnelParameters = definedExternally
        var _ColorCurvesParser: (sourceProperty: Any) -> ColorCurves = definedExternally
        var _TextureParser: (sourceProperty: Any, scene: Scene, rootUrl: String) -> BaseTexture = definedExternally
        fun AppendSerializedAnimations(source: IAnimatable, destination: Any): Unit = definedExternally
        fun <T> Serialize(entity: T, serializationObject: Any? = definedExternally /* null */): Any = definedExternally
        fun <T> Parse(creationFunction: () -> T, source: Any, scene: Scene, rootUrl: String? = definedExternally /* null */): T = definedExternally
        fun <T> Clone(creationFunction: () -> T, source: T): T = definedExternally
        fun <T> Instanciate(creationFunction: () -> T, source: T): T = definedExternally
    }
}
external interface ICustomAnimationFrameRequester {
    var renderFunction: Function<*>? get() = definedExternally; set(value) = definedExternally
    var requestAnimationFrame: Function<*>
    var requestID: Number? get() = definedExternally; set(value) = definedExternally
}
external interface IAnimatable {
    var animations: Array<Animation>
}
external interface IValueGradient {
    var gradient: Number
}
external open class ColorGradient : IValueGradient {
    override var gradient: Number = definedExternally
    open var color1: Color4 = definedExternally
    open var color2: Color4 = definedExternally
    open fun getColorToRef(result: Color4): Unit = definedExternally
}
external open class Color3Gradient : IValueGradient {
    override var gradient: Number = definedExternally
    open var color: Color3 = definedExternally
}
external open class FactorGradient : IValueGradient {
    override var gradient: Number = definedExternally
    open var factor1: Number = definedExternally
    open var factor2: Number = definedExternally
    open fun getFactor(): Number = definedExternally
}
external open class LoadFileError(message: String, request: WebRequest? = definedExternally /* null */) : Error {
    open var request: WebRequest? = definedExternally
    companion object {
        var _setPrototypeOf: Any = definedExternally
    }
}
external open class RetryStrategy {
    companion object {
        fun ExponentialBackoff(maxRetries: Number? = definedExternally /* null */, baseInterval: Number? = definedExternally /* null */): (url: String, request: WebRequest, retryIndex: Number) -> Number = definedExternally
    }
}
external interface IFileRequest {
    var onCompleteObservable: Observable<IFileRequest>
    var abort: () -> Unit
}
external interface `T$67` {
    @nativeGetter
    operator fun get(key: String): String?
    @nativeSetter
    operator fun set(key: String, value: String)
}
external interface `T$68` {
    var minimum: Vector3
    var maximum: Vector3
}
external interface `T$69` {
    var crossOrigin: String?
}
external interface `T$70` {
    var name: String
    var handler: (e: FocusEvent) -> Any
}
external open class Tools {
    companion object {
        var BaseUrl: String = definedExternally
        var UseCustomRequestHeaders: Boolean = definedExternally
        var CustomRequestHeaders: `T$67` = definedExternally
        var DefaultRetryStrategy: (url: String, request: WebRequest, retryIndex: Number) -> Number = definedExternally
        var CorsBehavior: dynamic /* String | (url: dynamic /* String | Array<String> */) -> String */ = definedExternally
        var UseFallbackTexture: Boolean = definedExternally
        var RegisteredExternalClasses: Json = definedExternally
        var fallbackTexture: String = definedExternally
        fun FetchToRef(u: Number, v: Number, width: Number, height: Number, pixels: Uint8Array, color: Color4): Unit = definedExternally
        fun Mix(a: Number, b: Number, alpha: Number): Number = definedExternally
        fun Instantiate(className: String): Any = definedExternally
        fun <T> Slice(data: T, start: Number? = definedExternally /* null */, end: Number? = definedExternally /* null */): T = definedExternally
        fun SetImmediate(action: () -> Unit): Unit = definedExternally
        fun IsExponentOfTwo(value: Number): Boolean = definedExternally
        var _tmpFloatArray: Any = definedExternally
        fun FloatRound(value: Number): Number = definedExternally
        fun CeilingPOT(x: Number): Number = definedExternally
        fun FloorPOT(x: Number): Number = definedExternally
        fun NearestPOT(x: Number): Number = definedExternally
        fun GetExponentOfTwo(value: Number, max: Number, mode: Number? = definedExternally /* null */): Number = definedExternally
        fun GetFilename(path: String): String = definedExternally
        fun GetFolderPath(uri: String, returnUnchangedIfNoSlash: Boolean? = definedExternally /* null */): String = definedExternally
        var GetDOMTextContent: Any? = definedExternally
        fun ToDegrees(angle: Number): Number = definedExternally
        fun ToRadians(angle: Number): Number = definedExternally
        fun EncodeArrayBufferTobase64(buffer: ArrayBuffer): String = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Array<Number>, indices: Array<Number>, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Array<Number>, indices: Int32Array, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Array<Number>, indices: Uint32Array, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Array<Number>, indices: Uint16Array, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Float32Array, indices: Array<Number>, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Float32Array, indices: Int32Array, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Float32Array, indices: Uint32Array, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMaxIndexed(positions: Float32Array, indices: Uint16Array, indexStart: Number, indexCount: Number, bias: Vector2? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMax(positions: Array<Number>, start: Number, count: Number, bias: Vector2? = definedExternally /* null */, stride: Number? = definedExternally /* null */): `T$68` = definedExternally
        fun ExtractMinAndMax(positions: Float32Array, start: Number, count: Number, bias: Vector2? = definedExternally /* null */, stride: Number? = definedExternally /* null */): `T$68` = definedExternally
        fun MakeArray(obj: Any, allowsNullUndefined: Boolean? = definedExternally /* null */): Array<Array<Any>> = definedExternally
        fun GetPointerPrefix(): String = definedExternally
        fun QueueNewFrame(func: () -> Unit, requester: Any? = definedExternally /* null */): Number = definedExternally
        fun RequestFullscreen(element: HTMLElement): Unit = definedExternally
        fun ExitFullscreen(): Unit = definedExternally
        fun SetCorsBehavior(url: String, element: `T$69`): Unit = definedExternally
        fun SetCorsBehavior(url: Array<String>, element: `T$69`): Unit = definedExternally
        fun CleanUrl(url: String): String = definedExternally
        var PreprocessUrl: (url: String) -> String = definedExternally
        fun LoadImage(input: String, onLoad: (img: HTMLImageElement) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit, offlineProvider: IOfflineProvider): HTMLImageElement = definedExternally
        fun LoadImage(input: Blob, onLoad: (img: HTMLImageElement) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit, offlineProvider: IOfflineProvider): HTMLImageElement = definedExternally
        fun LoadImage(input: ArrayBuffer, onLoad: (img: HTMLImageElement) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit, offlineProvider: IOfflineProvider): HTMLImageElement = definedExternally
        fun LoadFile(url: String, onSuccess: (data: dynamic /* String | ArrayBuffer */, responseURL: String? /*= null*/) -> Unit, onProgress: ((data: Any) -> Unit)? = definedExternally /* null */, offlineProvider: IOfflineProvider? = definedExternally /* null */, useArrayBuffer: Boolean? = definedExternally /* null */, onError: ((request: WebRequest? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */): IFileRequest = definedExternally
        fun LoadScript(scriptUrl: String, onSuccess: () -> Unit, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, scriptId: String? = definedExternally /* null */): Unit = definedExternally
        fun LoadScriptAsync(scriptUrl: String, scriptId: String? = definedExternally /* null */): Promise<Boolean> = definedExternally
        fun ReadFileAsDataURL(fileToLoad: Blob, callback: (data: Any) -> Unit, progressCallback: (ev: ProgressEvent) -> Any): IFileRequest = definedExternally
        fun ReadFile(fileToLoad: File, callback: (data: Any) -> Unit, progressCallBack: ((ev: ProgressEvent) -> Any)? = definedExternally /* null */, useArrayBuffer: Boolean? = definedExternally /* null */): IFileRequest = definedExternally
        fun FileAsURL(content: String): String = definedExternally
        fun Format(value: Number, decimals: Number? = definedExternally /* null */): String = definedExternally
        fun CheckExtends(v: Vector3, min: Vector3, max: Vector3): Unit = definedExternally
        fun DeepCopy(source: Any, destination: Any, doNotCopyList: Array<String>? = definedExternally /* null */, mustCopyList: Array<String>? = definedExternally /* null */): Unit = definedExternally
        fun IsEmpty(obj: Any): Boolean = definedExternally
        fun EndsWith(str: String, suffix: String): Boolean = definedExternally
        fun RegisterTopRootEvents(events: Array<`T$70`>): Unit = definedExternally
        fun UnregisterTopRootEvents(events: Array<`T$70`>): Unit = definedExternally
        var _ScreenshotCanvas: HTMLCanvasElement = definedExternally
        fun DumpFramebuffer(width: Number, height: Number, engine: Engine, successCallback: ((data: String) -> Unit)? = definedExternally /* null */, mimeType: String? = definedExternally /* null */, fileName: String? = definedExternally /* null */): Unit = definedExternally
        fun ToBlob(canvas: HTMLCanvasElement, successCallback: (blob: Blob) -> Unit, mimeType: String? = definedExternally /* null */): Unit = definedExternally
        fun EncodeScreenshotCanvasData(successCallback: ((data: String) -> Unit)? = definedExternally /* null */, mimeType: String? = definedExternally /* null */, fileName: String? = definedExternally /* null */): Unit = definedExternally
        fun Download(blob: Blob, fileName: String): Unit = definedExternally
        fun CreateScreenshot(engine: Engine, camera: Camera, size: Any, successCallback: ((data: String) -> Unit)? = definedExternally /* null */, mimeType: String? = definedExternally /* null */): Unit = definedExternally
        fun CreateScreenshotUsingRenderTarget(engine: Engine, camera: Camera, size: Any, successCallback: ((data: String) -> Unit)? = definedExternally /* null */, mimeType: String? = definedExternally /* null */, samples: Number? = definedExternally /* null */, antialiasing: Boolean? = definedExternally /* null */, fileName: String? = definedExternally /* null */): Unit = definedExternally
        fun RandomId(): String = definedExternally
        fun IsBase64(uri: String): Boolean = definedExternally
        fun DecodeBase64(uri: String): ArrayBuffer = definedExternally
        fun GetAbsoluteUrl(url: String): String = definedExternally
        var NoneLogLevel: Number = definedExternally
        var MessageLogLevel: Number = definedExternally
        var WarningLogLevel: Number = definedExternally
        var ErrorLogLevel: Number = definedExternally
        var AllLogLevel: Number = definedExternally
        var errorsCount: Number = definedExternally
        var OnNewCacheEntry: (entry: String) -> Unit = definedExternally
        fun Log(message: String): Unit = definedExternally
        fun Warn(message: String): Unit = definedExternally
        fun Error(message: String): Unit = definedExternally
        var LogCache: String = definedExternally
        fun ClearLogCache(): Unit = definedExternally
        var LogLevels: Number = definedExternally
        fun IsFileURL(): Boolean = definedExternally
        var IsWindowObjectExist: Any? = definedExternally
        var PerformanceNoneLogLevel: Number = definedExternally
        var PerformanceUserMarkLogLevel: Number = definedExternally
        var PerformanceConsoleLogLevel: Number = definedExternally
        var _performance: Any = definedExternally
        var PerformanceLogLevel: Number = definedExternally
        var _StartPerformanceCounterDisabled: Any = definedExternally
        var _EndPerformanceCounterDisabled: Any = definedExternally
        var _StartUserMark: Any = definedExternally
        var _EndUserMark: Any = definedExternally
        var _StartPerformanceConsole: Any = definedExternally
        var _EndPerformanceConsole: Any = definedExternally
        var StartPerformanceCounter: (counterName: String, condition: Boolean? /*= null*/) -> Unit = definedExternally
        var EndPerformanceCounter: (counterName: String, condition: Boolean? /*= null*/) -> Unit = definedExternally
        var Now: Number = definedExternally
        fun GetClassName(`object`: Any, isType: Boolean? = definedExternally /* null */): String = definedExternally
        fun <T> First(array: Array<T>, predicate: (item: T) -> Boolean): T = definedExternally
        fun getFullClassName(`object`: Any, isType: Boolean? = definedExternally /* null */): String = definedExternally
        fun DelayAsync(delay: Number): Promise<Unit> = definedExternally
        fun GetCurrentGradient(ratio: Number, gradients: Array<IValueGradient>, updateFunc: (current: IValueGradient, next: IValueGradient, scale: Number) -> Unit): Unit = definedExternally
    }
}
external open class PerfCounter {
    open var min: Number = definedExternally
    open var max: Number = definedExternally
    open var average: Number = definedExternally
    open var lastSecAverage: Number = definedExternally
    open var current: Number = definedExternally
    open var total: Number = definedExternally
    open var count: Number = definedExternally
    open fun fetchNewFrame(): Unit = definedExternally
    open fun addCount(newCount: Number, fetchResult: Boolean): Unit = definedExternally
    open fun beginMonitoring(): Unit = definedExternally
    open fun endMonitoring(newFrame: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _fetchResult: Any = definedExternally
    open var _startMonitoringTime: Any = definedExternally
    open var _min: Any = definedExternally
    open var _max: Any = definedExternally
    open var _average: Any = definedExternally
    open var _current: Any = definedExternally
    open var _totalValueCount: Any = definedExternally
    open var _totalAccumulated: Any = definedExternally
    open var _lastSecAverage: Any = definedExternally
    open var _lastSecAccumulated: Any = definedExternally
    open var _lastSecTime: Any = definedExternally
    open var _lastSecValueCount: Any = definedExternally
    companion object {
        var Enabled: Boolean = definedExternally
    }
}
external fun className(name: String, module: String? = definedExternally /* null */): (target: Any) -> Unit = definedExternally
external open class AsyncLoop(iterations: Number, func: (asyncLoop: AsyncLoop) -> Unit, successCallback: () -> Unit, offset: Number? = definedExternally /* null */) {
    open var iterations: Number = definedExternally
    open var index: Number = definedExternally
    open var _done: Any = definedExternally
    open var _fn: Any = definedExternally
    open var _successCallback: Any = definedExternally
    open fun executeNext(): Unit = definedExternally
    open fun breakLoop(): Unit = definedExternally
    companion object {
        fun Run(iterations: Number, fn: (asyncLoop: AsyncLoop) -> Unit, successCallback: () -> Unit, offset: Number? = definedExternally /* null */): AsyncLoop = definedExternally
        fun SyncAsyncForLoop(iterations: Number, syncedIterations: Number, fn: (iteration: Number) -> Unit, callback: () -> Unit, breakFunction: (() -> Boolean)? = definedExternally /* null */, timeout: Number? = definedExternally /* null */): AsyncLoop = definedExternally
    }
}
external interface ICollisionCoordinator {
    fun createCollider(): Collider
    fun getNewPosition(position: Vector3, displacement: Vector3, collider: Collider, maximumRetry: Number, excludedMesh: AbstractMesh, onNewPosition: (collisionIndex: Number, newPosition: Vector3, collidedMesh: AbstractMesh) -> Unit, collisionIndex: Number)
    fun init(scene: Scene)
}
external open class DefaultCollisionCoordinator : ICollisionCoordinator {
    open var _scene: Any = definedExternally
    open var _scaledPosition: Any = definedExternally
    open var _scaledVelocity: Any = definedExternally
    open var _finalPosition: Any = definedExternally
	override fun getNewPosition(position: Vector3, displacement: Vector3, collider: Collider, maximumRetry: Number, excludedMesh: AbstractMesh, onNewPosition: (collisionIndex: Number, newPosition: Vector3, collidedMesh: AbstractMesh) -> Unit, collisionIndex: Number): Unit = definedExternally
    override fun createCollider(): Collider = definedExternally
    override fun init(scene: Scene): Unit = definedExternally
    open var _collideWithWorld: Any = definedExternally
}
external open class InputManager(scene: Scene) {
    open var _wheelEventName: Any = definedExternally
    open var _onPointerMove: Any = definedExternally
    open var _onPointerDown: Any = definedExternally
    open var _onPointerUp: Any = definedExternally
    open var _initClickEvent: Any = definedExternally
    open var _initActionManager: Any = definedExternally
    open var _delayedSimpleClick: Any = definedExternally
    open var _delayedSimpleClickTimeout: Any = definedExternally
    open var _previousDelayedSimpleClickTimeout: Any = definedExternally
    open var _meshPickProceed: Any = definedExternally
    open var _previousButtonPressed: Any = definedExternally
    open var _currentPickResult: Any = definedExternally
    open var _previousPickResult: Any = definedExternally
    open var _totalPointersPressed: Any = definedExternally
    open var _doubleClickOccured: Any = definedExternally
    open var _pointerOverMesh: Any = definedExternally
    open var _pickedDownMesh: Any = definedExternally
    open var _pickedUpMesh: Any = definedExternally
    open var _pointerX: Any = definedExternally
    open var _pointerY: Any = definedExternally
    open var _unTranslatedPointerX: Any = definedExternally
    open var _unTranslatedPointerY: Any = definedExternally
    open var _startingPointerPosition: Any = definedExternally
    open var _previousStartingPointerPosition: Any = definedExternally
    open var _startingPointerTime: Any = definedExternally
    open var _previousStartingPointerTime: Any = definedExternally
    open var _pointerCaptures: Any = definedExternally
    open var _onKeyDown: Any = definedExternally
    open var _onKeyUp: Any = definedExternally
    open var _onCanvasFocusObserver: Any = definedExternally
    open var _onCanvasBlurObserver: Any = definedExternally
    open var _scene: Any = definedExternally
    open var meshUnderPointer: AbstractMesh = definedExternally
    open var unTranslatedPointer: Vector2 = definedExternally
    open var pointerX: Number = definedExternally
    open var pointerY: Number = definedExternally
    open var _updatePointerPosition: Any = definedExternally
    open var _processPointerMove: Any = definedExternally
    open var _setRayOnPointerInfo: Any = definedExternally
    open var _checkPrePointerObservable: Any = definedExternally
    open fun simulatePointerMove(pickResult: PickingInfo, pointerEventInit: PointerEventInit? = definedExternally /* null */): Unit = definedExternally
    open fun simulatePointerDown(pickResult: PickingInfo, pointerEventInit: PointerEventInit? = definedExternally /* null */): Unit = definedExternally
    open var _processPointerDown: Any = definedExternally
    open fun _isPointerSwiping(): Boolean = definedExternally
    open fun simulatePointerUp(pickResult: PickingInfo, pointerEventInit: PointerEventInit? = definedExternally /* null */, doubleTap: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _processPointerUp: Any = definedExternally
    open fun isPointerCaptured(pointerId: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun attachControl(attachUp: Boolean? = definedExternally /* null */, attachDown: Boolean? = definedExternally /* null */, attachMove: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun detachControl(): Unit = definedExternally
    open fun setPointerOverMesh(mesh: AbstractMesh): Unit = definedExternally
    open fun getPointerOverMesh(): AbstractMesh = definedExternally
    companion object {
        var DragMovementThreshold: Number = definedExternally
        var LongPressDelay: Number = definedExternally
        var DoubleClickDelay: Number = definedExternally
        var ExclusiveDoubleClickMode: Boolean = definedExternally
    }
}
external open class TargetedAnimation {
    open var animation: Animation = definedExternally
    open var target: Any = definedExternally
}
external open class AnimationGroup(name: String, scene: Scene? = definedExternally /* null */) : IDisposable {
    open var name: String = definedExternally
    open var _scene: Any = definedExternally
    open var _targetedAnimations: Any = definedExternally
    open var _animatables: Any = definedExternally
    open var _from: Any = definedExternally
    open var _to: Any = definedExternally
    open var _isStarted: Any = definedExternally
    open var _isPaused: Any = definedExternally
    open var _speedRatio: Any = definedExternally
    open var _loopAnimation: Any = definedExternally
    open var uniqueId: Number = definedExternally
    open var onAnimationEndObservable: Observable<TargetedAnimation> = definedExternally
    open var onAnimationLoopObservable: Observable<TargetedAnimation> = definedExternally
    open var onAnimationGroupEndObservable: Observable<AnimationGroup> = definedExternally
    open var onAnimationGroupPauseObservable: Observable<AnimationGroup> = definedExternally
    open var onAnimationGroupPlayObservable: Observable<AnimationGroup> = definedExternally
    open var from: Number = definedExternally
    open var to: Number = definedExternally
    open var isStarted: Boolean = definedExternally
    open var isPlaying: Boolean = definedExternally
    open var speedRatio: Number = definedExternally
    open var loopAnimation: Boolean = definedExternally
    open var targetedAnimations: Array<TargetedAnimation> = definedExternally
    open var animatables: Array<Animatable> = definedExternally
    open fun addTargetedAnimation(animation: Animation, target: Any): TargetedAnimation = definedExternally
    open fun normalize(beginFrame: Number? = definedExternally /* null */, endFrame: Number? = definedExternally /* null */): AnimationGroup = definedExternally
    open fun start(loop: Boolean? = definedExternally /* null */, speedRatio: Number? = definedExternally /* null */, from: Number? = definedExternally /* null */, to: Number? = definedExternally /* null */): AnimationGroup = definedExternally
    open fun pause(): AnimationGroup = definedExternally
    open fun play(loop: Boolean? = definedExternally /* null */): AnimationGroup = definedExternally
    open fun reset(): AnimationGroup = definedExternally
    open fun restart(): AnimationGroup = definedExternally
    open fun stop(): AnimationGroup = definedExternally
    open fun setWeightForAllAnimatables(weight: Number): AnimationGroup = definedExternally
    open fun syncAllAnimationsWith(root: Animatable): AnimationGroup = definedExternally
    open fun goToFrame(frame: Number): AnimationGroup = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _checkAnimationGroupEnded: Any = definedExternally
    open fun clone(newName: String, targetConverter: ((oldTarget: Any) -> Any)? = definedExternally /* null */): AnimationGroup = definedExternally
    open fun getClassName(): String = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    companion object {
        fun Parse(parsedAnimationGroup: Any, scene: Scene): AnimationGroup = definedExternally
    }
}
external interface IDisposable {
    fun dispose()
}
external interface SceneOptions {
    var useGeometryUniqueIdsMap: Boolean? get() = definedExternally; set(value) = definedExternally
    var useMaterialMeshMap: Boolean? get() = definedExternally; set(value) = definedExternally
    var useClonedMeshhMap: Boolean? get() = definedExternally; set(value) = definedExternally
    var virtual: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$71` {
    var min: Vector3
    var max: Vector3
}
external open class KeepAssets : AbstractScene
external open class AssetContainer(scene: Scene) : AbstractScene {
    open var scene: Scene = definedExternally
    open fun addAllToScene(): Unit = definedExternally
    open fun removeAllFromScene(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open var _moveAssets: Any = definedExternally
    open fun moveAllFromScene(keepAssets: KeepAssets? = definedExternally /* null */): Unit = definedExternally
    open fun createRootMesh(): Mesh = definedExternally
}
external open class Sound(name: String, urlOrArrayBuffer: Any, scene: Scene, readyToPlayCallback: (() -> Unit)? = definedExternally /* null */, options: Any? = definedExternally /* null */) {
    open var name: String = definedExternally
    open var autoplay: Boolean = definedExternally
    open var loop: Boolean = definedExternally
    open var useCustomAttenuation: Boolean = definedExternally
    open var soundTrackId: Number = definedExternally
    open var isPlaying: Boolean = definedExternally
    open var isPaused: Boolean = definedExternally
    open var spatialSound: Boolean = definedExternally
    open var refDistance: Number = definedExternally
    open var rolloffFactor: Number = definedExternally
    open var maxDistance: Number = definedExternally
    open var distanceModel: String = definedExternally
    open var onended: () -> Any = definedExternally
    open var onEndedObservable: Observable<Sound> = definedExternally
    open var _panningModel: Any = definedExternally
    open var _playbackRate: Any = definedExternally
    open var _streaming: Any = definedExternally
    open var _startTime: Any = definedExternally
    open var _startOffset: Any = definedExternally
    open var _position: Any = definedExternally
    open var _positionInEmitterSpace: Boolean = definedExternally
    open var _localDirection: Any = definedExternally
    open var _volume: Any = definedExternally
    open var _isReadyToPlay: Any = definedExternally
    open var _isDirectional: Any = definedExternally
    open var _readyToPlayCallback: Any = definedExternally
    open var _audioBuffer: Any = definedExternally
    open var _soundSource: Any = definedExternally
    open var _streamingSource: Any = definedExternally
    open var _soundPanner: Any = definedExternally
    open var _soundGain: Any = definedExternally
    open var _inputAudioNode: Any = definedExternally
    open var _outputAudioNode: Any = definedExternally
    open var _coneInnerAngle: Any = definedExternally
    open var _coneOuterAngle: Any = definedExternally
    open var _coneOuterGain: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _connectedTransformNode: Any = definedExternally
    open var _customAttenuationFunction: Any = definedExternally
    open var _registerFunc: Any = definedExternally
    open var _isOutputConnected: Any = definedExternally
    open var _htmlAudioElement: Any = definedExternally
    open var _urlType: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun isReady(): Boolean = definedExternally
    open var _soundLoaded: Any = definedExternally
    open fun setAudioBuffer(audioBuffer: AudioBuffer): Unit = definedExternally
    open fun updateOptions(options: Any): Unit = definedExternally
    open var _createSpatialParameters: Any = definedExternally
    open var _updateSpatialParameters: Any = definedExternally
    open fun switchPanningModelToHRTF(): Unit = definedExternally
    open fun switchPanningModelToEqualPower(): Unit = definedExternally
    open var _switchPanningModel: Any = definedExternally
    open fun connectToSoundTrackAudioNode(soundTrackAudioNode: AudioNode): Unit = definedExternally
    open fun setDirectionalCone(coneInnerAngle: Number, coneOuterAngle: Number, coneOuterGain: Number): Unit = definedExternally
    open var directionalConeInnerAngle: Number = definedExternally
    open var directionalConeOuterAngle: Number = definedExternally
    open fun setPosition(newPosition: Vector3): Unit = definedExternally
    open fun setLocalDirectionToMesh(newLocalDirection: Vector3): Unit = definedExternally
    open var _updateDirection: Any = definedExternally
    open fun updateDistanceFromListener(): Unit = definedExternally
    open fun setAttenuationFunction(callback: (currentVolume: Number, currentDistance: Number, maxDistance: Number, refDistance: Number, rolloffFactor: Number) -> Number): Unit = definedExternally
    open fun play(time: Number? = definedExternally /* null */, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open var _onended: Any = definedExternally
    open fun stop(time: Number? = definedExternally /* null */): Unit = definedExternally
    open fun pause(): Unit = definedExternally
    open fun setVolume(newVolume: Number, time: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setPlaybackRate(newPlaybackRate: Number): Unit = definedExternally
    open fun getVolume(): Number = definedExternally
    open fun attachToMesh(transformNode: TransformNode): Unit = definedExternally
    open fun detachFromMesh(): Unit = definedExternally
    open var _onRegisterAfterWorldMatrixUpdate: Any = definedExternally
    open fun clone(): Sound = definedExternally
    open fun getAudioBuffer(): AudioBuffer = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var _SceneComponentInitialization: (scene: Scene) -> Unit = definedExternally
        fun Parse(parsedSound: Any, scene: Scene, rootUrl: String, sourceSound: Sound? = definedExternally /* null */): Sound = definedExternally
    }
}
external open class PlaySoundAction(triggerOptions: Any, sound: Sound, condition: Condition? = definedExternally /* null */) : Action {
    open var _sound: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class StopSoundAction(triggerOptions: Any, sound: Sound, condition: Condition? = definedExternally /* null */) : Action {
    open var _sound: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external open class InterpolateValueAction(triggerOptions: Any, target: Any, propertyPath: String, value: Any, duration: Number? = definedExternally /* null */, condition: Condition? = definedExternally /* null */, stopOtherAnimations: Boolean? = definedExternally /* null */, onInterpolationDone: (() -> Unit)? = definedExternally /* null */) : Action {
    open var propertyPath: String = definedExternally
    open var value: Any = definedExternally
    open var duration: Number = definedExternally
    open var stopOtherAnimations: Boolean = definedExternally
    open var onInterpolationDone: () -> Unit = definedExternally
    open var onInterpolationDoneObservable: Observable<InterpolateValueAction> = definedExternally
    open var _target: Any = definedExternally
    open var _effectiveTarget: Any = definedExternally
    open var _property: Any = definedExternally
    override fun _prepare(): Unit = definedExternally
    open fun execute(): Unit = definedExternally
    override fun serialize(parent: Any): Any = definedExternally
}
external interface ISoundTrackOptions {
    var volume: Number? get() = definedExternally; set(value) = definedExternally
    var mainTrack: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class SoundTrack(scene: Scene, options: ISoundTrackOptions? = definedExternally /* null */) {
    open var id: Number = definedExternally
    open var soundCollection: Array<Sound> = definedExternally
    open var _outputAudioNode: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _isMainTrack: Any = definedExternally
    open var _connectedAnalyser: Any = definedExternally
    open var _options: Any = definedExternally
    open var _isInitialized: Any = definedExternally
    open var _initializeSoundTrackAudioGraph: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun AddSound(sound: Sound): Unit = definedExternally
    open fun RemoveSound(sound: Sound): Unit = definedExternally
    open fun setVolume(newVolume: Number): Unit = definedExternally
    open fun switchPanningModelToHRTF(): Unit = definedExternally
    open fun switchPanningModelToEqualPower(): Unit = definedExternally
    open fun connectToAnalyser(analyser: Analyser): Unit = definedExternally
}
external open class AudioSceneComponent(scene: Scene) : ISceneSerializableComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    open var _audioEnabled: Any = definedExternally
    open var audioEnabled: Boolean = definedExternally
    open var _headphone: Any = definedExternally
    open var headphone: Boolean = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun serialize(serializationObject: Any): Unit = definedExternally
    override fun addFromContainer(container: AbstractScene): Unit = definedExternally
    override fun removeFromContainer(container: AbstractScene, dispose: Boolean?): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun disableAudio(): Unit = definedExternally
    open fun enableAudio(): Unit = definedExternally
    open fun switchAudioModeForHeadphones(): Unit = definedExternally
    open fun switchAudioModeForNormalSpeakers(): Unit = definedExternally
    open var _afterRender: Any = definedExternally
}
external open class WeightedSound(loop: Boolean, sounds: Array<Sound>, weights: Array<Number>) {
    open var loop: Boolean = definedExternally
    open var _coneInnerAngle: Any = definedExternally
    open var _coneOuterAngle: Any = definedExternally
    open var _volume: Any = definedExternally
    open var isPlaying: Boolean = definedExternally
    open var isPaused: Boolean = definedExternally
    open var _sounds: Any = definedExternally
    open var _weights: Any = definedExternally
    open var _currentIndex: Any = definedExternally
    open var directionalConeInnerAngle: Number = definedExternally
    open var directionalConeOuterAngle: Number = definedExternally
    open var volume: Number = definedExternally
    open var _onended: Any = definedExternally
    open fun pause(): Unit = definedExternally
    open fun stop(): Unit = definedExternally
    open fun play(startOffset: Number? = definedExternally /* null */): Unit = definedExternally
}
external open class BouncingBehavior : Behavior<ArcRotateCamera> {
    override var name: String = definedExternally
    open var transitionDuration: Number = definedExternally
    open var lowerRadiusTransitionRange: Number = definedExternally
    open var upperRadiusTransitionRange: Number = definedExternally
    open var _autoTransitionRange: Any = definedExternally
    open var autoTransitionRange: Boolean = definedExternally
    open var _attachedCamera: Any = definedExternally
    open var _onAfterCheckInputsObserver: Any = definedExternally
    open var _onMeshTargetChangedObserver: Any = definedExternally
    override fun init(): Unit = definedExternally
	override fun attach(camera: ArcRotateCamera): Unit = definedExternally
    override fun detach(): Unit = definedExternally
    open var _radiusIsAnimating: Any = definedExternally
    open var _radiusBounceTransition: Any = definedExternally
    open var _animatables: Any = definedExternally
    open var _cachedWheelPrecision: Any = definedExternally
    open var _isRadiusAtLimit: Any = definedExternally
    open var _applyBoundRadiusAnimation: Any = definedExternally
    open fun _clearAnimationLocks(): Unit = definedExternally
    open fun stopAllAnimations(): Unit = definedExternally
    companion object {
        var EasingFunction: BackEase = definedExternally
        var EasingMode: Number = definedExternally
    }
}
external open class FramingBehavior : Behavior<ArcRotateCamera> {
    override var name: String = definedExternally
    open var _mode: Any = definedExternally
    open var _radiusScale: Any = definedExternally
    open var _positionScale: Any = definedExternally
    open var _defaultElevation: Any = definedExternally
    open var _elevationReturnTime: Any = definedExternally
    open var _elevationReturnWaitTime: Any = definedExternally
    open var _zoomStopsAnimation: Any = definedExternally
    open var _framingTime: Any = definedExternally
    open var mode: Number = definedExternally
    open var radiusScale: Number = definedExternally
    open var positionScale: Number = definedExternally
    open var defaultElevation: Number = definedExternally
    open var elevationReturnTime: Number = definedExternally
    open var elevationReturnWaitTime: Number = definedExternally
    open var zoomStopsAnimation: Boolean = definedExternally
    open var framingTime: Number = definedExternally
    open var autoCorrectCameraLimitsAndSensibility: Boolean = definedExternally
    open var _onPrePointerObservableObserver: Any = definedExternally
    open var _onAfterCheckInputsObserver: Any = definedExternally
    open var _onMeshTargetChangedObserver: Any = definedExternally
    open var _attachedCamera: Any = definedExternally
    open var _isPointerDown: Any = definedExternally
    open var _lastInteractionTime: Any = definedExternally
    override fun init(): Unit = definedExternally
	override fun attach(camera: ArcRotateCamera): Unit = definedExternally
    override fun detach(): Unit = definedExternally
    open var _animatables: Any = definedExternally
    open var _betaIsAnimating: Any = definedExternally
    open var _betaTransition: Any = definedExternally
    open var _radiusTransition: Any = definedExternally
    open var _vectorTransition: Any = definedExternally
    open fun zoomOnMesh(mesh: AbstractMesh, focusOnOriginXZ: Boolean? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun zoomOnMeshHierarchy(mesh: AbstractMesh, focusOnOriginXZ: Boolean? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun zoomOnMeshesHierarchy(meshes: Array<AbstractMesh>, focusOnOriginXZ: Boolean? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun zoomOnBoundingInfo(minimumWorld: Vector3, maximumWorld: Vector3, focusOnOriginXZ: Boolean? = definedExternally /* null */, onAnimationEnd: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun _calculateLowerRadiusFromModelBoundingSphere(minimumWorld: Vector3, maximumWorld: Vector3): Number = definedExternally
    open var _maintainCameraAboveGround: Any = definedExternally
    open var _getFrustumSlope: Any = definedExternally
    open var _clearAnimationLocks: Any = definedExternally
    open var _applyUserInteraction: Any = definedExternally
    open fun stopAllAnimations(): Unit = definedExternally
    open var isUserIsMoving: Boolean = definedExternally
    companion object {
        var EasingFunction: ExponentialEase = definedExternally
        var EasingMode: Number = definedExternally
        var IgnoreBoundsSizeMode: Number = definedExternally
        var FitFrustumSidesMode: Number = definedExternally
    }
}
external open class BaseCameraPointersInput : ICameraInput<Camera> {
    override var camera: Camera = definedExternally
    open var _altKey: Boolean = definedExternally
    open var _ctrlKey: Boolean = definedExternally
    open var _metaKey: Boolean = definedExternally
    open var _shiftKey: Boolean = definedExternally
    open var _buttonsPressed: Number = definedExternally
    open var buttons: Array<Number> = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
    open fun onDoubleTap(type: String): Unit = definedExternally
    open fun onTouch(point: PointerTouch, offsetX: Number, offsetY: Number): Unit = definedExternally
    open fun onMultiTouch(pointA: PointerTouch, pointB: PointerTouch, previousPinchSquaredDistance: Number, pinchSquaredDistance: Number, previousMultiTouchPanPosition: PointerTouch, multiTouchPanPosition: PointerTouch): Unit = definedExternally
    open fun onContextMenu(evt: PointerEvent): Unit = definedExternally
    open fun onButtonDown(evt: PointerEvent): Unit = definedExternally
    open fun onButtonUp(evt: PointerEvent): Unit = definedExternally
    open fun onLostFocus(): Unit = definedExternally
    open var _pointerInput: Any = definedExternally
    open var _observer: Any = definedExternally
    open var _onLostFocus: Any = definedExternally
    open var pointA: Any = definedExternally
    open var pointB: Any = definedExternally
}
external open class ArcRotateCameraPointersInput : BaseCameraPointersInput {
    override var camera: Camera = definedExternally
    override fun getClassName(): String = definedExternally
    override var buttons: Array<Number> = definedExternally
    open var angularSensibilityX: Number = definedExternally
    open var angularSensibilityY: Number = definedExternally
    open var pinchPrecision: Number = definedExternally
    open var pinchDeltaPercentage: Number = definedExternally
    open var panningSensibility: Number = definedExternally
    open var multiTouchPanning: Boolean = definedExternally
    open var multiTouchPanAndZoom: Boolean = definedExternally
    open var pinchInwards: Boolean = definedExternally
    open var _isPanClick: Any = definedExternally
    open var _twoFingerActivityCount: Any = definedExternally
    open var _isPinching: Any = definedExternally
    override fun onTouch(point: PointerTouch, offsetX: Number, offsetY: Number): Unit = definedExternally
    override fun onDoubleTap(type: String): Unit = definedExternally
    override fun onMultiTouch(pointA: PointerTouch, pointB: PointerTouch, previousPinchSquaredDistance: Number, pinchSquaredDistance: Number, previousMultiTouchPanPosition: PointerTouch, multiTouchPanPosition: PointerTouch): Unit = definedExternally
    override fun onButtonDown(evt: PointerEvent): Unit = definedExternally
    override fun onButtonUp(evt: PointerEvent): Unit = definedExternally
    override fun onLostFocus(): Unit = definedExternally
}
external open class ArcRotateCameraKeyboardMoveInput : ICameraInput<ArcRotateCamera> {
    override var camera: ArcRotateCamera = definedExternally
    open var keysUp: Array<Number> = definedExternally
    open var keysDown: Array<Number> = definedExternally
    open var keysLeft: Array<Number> = definedExternally
    open var keysRight: Array<Number> = definedExternally
    open var keysReset: Array<Number> = definedExternally
    open var panningSensibility: Number = definedExternally
    open var zoomingSensibility: Number = definedExternally
    open var useAltToZoom: Boolean = definedExternally
    open var angularSpeed: Number = definedExternally
    open var _keys: Any = definedExternally
    open var _ctrlPressed: Any = definedExternally
    open var _altPressed: Any = definedExternally
    open var _onCanvasBlurObserver: Any = definedExternally
    open var _onKeyboardObserver: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _scene: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class ArcRotateCameraMouseWheelInput : ICameraInput<ArcRotateCamera> {
    override var camera: ArcRotateCamera = definedExternally
    open var wheelPrecision: Number = definedExternally
    open var wheelDeltaPercentage: Number = definedExternally
    open var _wheel: Any = definedExternally
    open var _observer: Any = definedExternally
    open var computeDeltaFromMouseWheelLegacyEvent: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class ArcRotateCameraInputsManager(camera: ArcRotateCamera) : CameraInputsManager<ArcRotateCamera> {
    open fun addMouseWheel(): ArcRotateCameraInputsManager = definedExternally
    open fun addPointers(): ArcRotateCameraInputsManager = definedExternally
    open fun addKeyboard(): ArcRotateCameraInputsManager = definedExternally
    fun addVRDeviceOrientation(): ArcRotateCameraInputsManager
    fun addGamepad(): ArcRotateCameraInputsManager
}
external interface `T$72` {
    var min: Vector3
    var max: Vector3
    var distance: Number
}
external open class ArcRotateCamera(name: String, alpha: Number, beta: Number, radius: Number, target: Vector3, scene: Scene, setActiveOnSceneIfNoneActive: Boolean? = definedExternally /* null */) : TargetCamera {
    open var alpha: Number = definedExternally
    open var beta: Number = definedExternally
    open var radius: Number = definedExternally
    open var _target: Vector3 = definedExternally
    open var _targetHost: AbstractMesh = definedExternally
    open var target: Vector3 = definedExternally
    override var position: Vector3 = definedExternally
    open var _upVector: Vector3 = definedExternally
    open var _upToYMatrix: Matrix = definedExternally
    open var _YToUpMatrix: Matrix = definedExternally
    override var upVector: Vector3 = definedExternally
    open fun setMatUp(): Unit = definedExternally
    open var inertialAlphaOffset: Number = definedExternally
    open var inertialBetaOffset: Number = definedExternally
    open var inertialRadiusOffset: Number = definedExternally
    open var lowerAlphaLimit: Number = definedExternally
    open var upperAlphaLimit: Number = definedExternally
    open var lowerBetaLimit: Number = definedExternally
    open var upperBetaLimit: Number = definedExternally
    open var lowerRadiusLimit: Number = definedExternally
    open var upperRadiusLimit: Number = definedExternally
    open var inertialPanningX: Number = definedExternally
    open var inertialPanningY: Number = definedExternally
    open var pinchToPanMaxDistance: Number = definedExternally
    open var panningDistanceLimit: Number = definedExternally
    open var panningOriginTarget: Vector3 = definedExternally
    open var panningInertia: Number = definedExternally
    open var angularSensibilityX: Number = definedExternally
    open var angularSensibilityY: Number = definedExternally
    open var pinchPrecision: Number = definedExternally
    open var pinchDeltaPercentage: Number = definedExternally
    open var panningSensibility: Number = definedExternally
    open var keysUp: Array<Number> = definedExternally
    open var keysDown: Array<Number> = definedExternally
    open var keysLeft: Array<Number> = definedExternally
    open var keysRight: Array<Number> = definedExternally
    open var wheelPrecision: Number = definedExternally
    open var wheelDeltaPercentage: Number = definedExternally
    open var zoomOnFactor: Number = definedExternally
    open var targetScreenOffset: Vector2 = definedExternally
    open var allowUpsideDown: Boolean = definedExternally
    open var useInputToRestoreState: Boolean = definedExternally
    override var _viewMatrix: Matrix = definedExternally
    open var _useCtrlForPanning: Boolean = definedExternally
    open var _panningMouseButton: Number = definedExternally
    override var inputs: CameraInputsManager<Camera> = definedExternally
    override var _reset: () -> Unit = definedExternally
    open var panningAxis: Vector3 = definedExternally
    open var _localDirection: Vector3 = definedExternally
    open var _transformedDirection: Vector3 = definedExternally
    open var _bouncingBehavior: Any = definedExternally
    open var bouncingBehavior: BouncingBehavior = definedExternally
    open var useBouncingBehavior: Boolean = definedExternally
    open var _framingBehavior: Any = definedExternally
    open var framingBehavior: FramingBehavior = definedExternally
    open var useFramingBehavior: Boolean = definedExternally
    open var _autoRotationBehavior: Any = definedExternally
    open var autoRotationBehavior: AutoRotationBehavior = definedExternally
    open var useAutoRotationBehavior: Boolean = definedExternally
    open var onMeshTargetChangedObservable: Observable<AbstractMesh> = definedExternally
    open var onCollide: (collidedMesh: AbstractMesh) -> Unit = definedExternally
    open var checkCollisions: Boolean = definedExternally
    open var collisionRadius: Vector3 = definedExternally
    open var _collider: Collider = definedExternally
    open var _previousPosition: Vector3 = definedExternally
    open var _collisionVelocity: Vector3 = definedExternally
    open var _newPosition: Vector3 = definedExternally
    open var _previousAlpha: Number = definedExternally
    open var _previousBeta: Number = definedExternally
    open var _previousRadius: Number = definedExternally
    open var _collisionTriggered: Boolean = definedExternally
    open var _targetBoundingCenter: Vector3 = definedExternally
    open var _computationVector: Any = definedExternally
    override fun _initCache(): Unit = definedExternally
    override fun _updateCache(ignoreParentClass: Boolean?): Unit = definedExternally
    open fun _getTargetPosition(): Vector3 = definedExternally
    open var _storedAlpha: Any = definedExternally
    open var _storedBeta: Any = definedExternally
    open var _storedRadius: Any = definedExternally
    open var _storedTarget: Any = definedExternally
    override fun storeState(): Camera = definedExternally
    override fun _restoreStateValues(): Boolean = definedExternally
    override fun _isSynchronizedViewMatrix(): Boolean = definedExternally
    open fun attachControl(element: HTMLElement, noPreventDefault: Boolean? = definedExternally /* null */, useCtrlForPanning: Boolean? = definedExternally /* null */, panningMouseButton: Number? = definedExternally /* null */): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    open fun _checkLimits(): Unit = definedExternally
    open fun rebuildAnglesAndRadius(): Unit = definedExternally
    open fun setPosition(position: Vector3): Unit = definedExternally
    open fun setTarget(target: Vector3, toBoundingCenter: Boolean? = definedExternally /* null */, allowSamePosition: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setTarget(target: AbstractMesh, toBoundingCenter: Boolean? = definedExternally /* null */, allowSamePosition: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun _getViewMatrix(): Matrix = definedExternally
    open var _onCollisionPositionChange: (collisionId: Number, newPosition: Vector3, collidedMesh: AbstractMesh? /*= null*/) -> Unit = definedExternally
    open fun zoomOn(meshes: Array<AbstractMesh>? = definedExternally /* null */, doNotUpdateMaxZ: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun focusOn(meshesOrMinMaxVectorAndDistance: Array<AbstractMesh>, doNotUpdateMaxZ: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun focusOn(meshesOrMinMaxVectorAndDistance: `T$72`, doNotUpdateMaxZ: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun createRigCamera(name: String, cameraIndex: Number): Camera = definedExternally
    override fun _updateRigCameras(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
}
external open class AutoRotationBehavior : Behavior<ArcRotateCamera> {
    override var name: String = definedExternally
    open var _zoomStopsAnimation: Any = definedExternally
    open var _idleRotationSpeed: Any = definedExternally
    open var _idleRotationWaitTime: Any = definedExternally
    open var _idleRotationSpinupTime: Any = definedExternally
    open var zoomStopsAnimation: Boolean = definedExternally
    open var idleRotationSpeed: Number = definedExternally
    open var idleRotationWaitTime: Number = definedExternally
    open var idleRotationSpinupTime: Number = definedExternally
    open var rotationInProgress: Boolean = definedExternally
    open var _onPrePointerObservableObserver: Any = definedExternally
    open var _onAfterCheckInputsObserver: Any = definedExternally
    open var _attachedCamera: Any = definedExternally
    open var _isPointerDown: Any = definedExternally
    open var _lastFrameTime: Any = definedExternally
    open var _lastInteractionTime: Any = definedExternally
    open var _cameraRotationSpeed: Any = definedExternally
    override fun init(): Unit = definedExternally
	override fun attach(camera: ArcRotateCamera): Unit = definedExternally
    override fun detach(): Unit = definedExternally
    open var _userIsZooming: Any = definedExternally
    open var _lastFrameRadius: Any = definedExternally
    open var _shouldAnimationStopForInteraction: Any = definedExternally
    open var _applyUserInteraction: Any = definedExternally
    open var _userIsMoving: Any = definedExternally
}
external open class AttachToBoxBehavior(ui: TransformNode) : Behavior<Mesh> {
    open var ui: Any = definedExternally
    override var name: String = definedExternally
    open var distanceAwayFromFace: Number = definedExternally
    open var distanceAwayFromBottomOfFace: Number = definedExternally
    open var _faceVectors: Any = definedExternally
    open var _target: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _onRenderObserver: Any = definedExternally
    open var _tmpMatrix: Any = definedExternally
    open var _tmpVector: Any = definedExternally
    override fun init(): Unit = definedExternally
    open var _closestFace: Any = definedExternally
    open var _zeroVector: Any = definedExternally
    open var _lookAtTmpMatrix: Any = definedExternally
    open var _lookAtToRef: Any = definedExternally
	override fun attach(target: Mesh): Unit = definedExternally
    override fun detach(): Unit = definedExternally
}
external open class FadeInOutBehavior : Behavior<Mesh> {
    open var delay: Number = definedExternally
    open var fadeInTime: Number = definedExternally
    open var _millisecondsPerFrame: Any = definedExternally
    open var _hovered: Any = definedExternally
    open var _hoverValue: Any = definedExternally
    open var _ownerNode: Any = definedExternally
    override var name: String = definedExternally
    override fun init(): Unit = definedExternally
	override fun attach(ownerNode: Mesh): Unit = definedExternally
    override fun detach(): Unit = definedExternally
    open fun fadeIn(value: Boolean): Unit = definedExternally
    open var _update: Any = definedExternally
    open var _setAllVisibility: Any = definedExternally
}
external open class PivotTools {
    companion object {
        var _PivotCached: Any = definedExternally
        var _OldPivotPoint: Any = definedExternally
        var _PivotTranslation: Any = definedExternally
        var _PivotTmpVector: Any = definedExternally
        fun _RemoveAndStorePivotPoint(mesh: AbstractMesh): Unit = definedExternally
        fun _RestorePivotPoint(mesh: AbstractMesh): Unit = definedExternally
    }
}
external interface `T$73` {
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sourcePlane: Plane? get() = definedExternally; set(value) = definedExternally
}
external open class PlaneBuilder {
    companion object {
        fun CreatePlane(name: String, options: `T$73`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$74` {
    var delta: Vector3
    var dragPlanePoint: Vector3
    var dragPlaneNormal: Vector3
    var dragDistance: Number
    var pointerId: Number
}
external interface `T$75` {
    var dragPlanePoint: Vector3
    var pointerId: Number
}
external interface `T$76` {
    var dragAxis: Vector3? get() = definedExternally; set(value) = definedExternally
    var dragPlaneNormal: Vector3? get() = definedExternally; set(value) = definedExternally
}
external open class PointerDragBehavior(options: `T$76`? = definedExternally /* null */) : Behavior<AbstractMesh> {
    open var _attachedNode: Any = definedExternally
    open var _dragPlane: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _pointerObserver: Any = definedExternally
    open var _beforeRenderObserver: Any = definedExternally
    open var _useAlternatePickedPointAboveMaxDragAngleDragSpeed: Any = definedExternally
    open var maxDragAngle: Number = definedExternally
    open var _useAlternatePickedPointAboveMaxDragAngle: Boolean = definedExternally
    open var currentDraggingPointerID: Number = definedExternally
    open var lastDragPosition: Vector3 = definedExternally
    open var dragging: Boolean = definedExternally
    open var dragDeltaRatio: Number = definedExternally
    open var updateDragPlane: Boolean = definedExternally
    open var _debugMode: Any = definedExternally
    open var _moving: Any = definedExternally
    open var onDragObservable: Observable<`T$74`> = definedExternally
    open var onDragStartObservable: Observable<`T$75`> = definedExternally
    open var onDragEndObservable: Observable<`T$75`> = definedExternally
    open var moveAttached: Boolean = definedExternally
    open var enabled: Boolean = definedExternally
    open var detachCameraControls: Boolean = definedExternally
    open var useObjectOrienationForDragging: Boolean = definedExternally
    open var _options: Any = definedExternally
    open var validateDrag: (targetPosition: Vector3) -> Boolean = definedExternally
    override var name: String = definedExternally
    override fun init(): Unit = definedExternally
    open var _tmpVector: Any = definedExternally
    open var _alternatePickedPoint: Any = definedExternally
    open var _worldDragAxis: Any = definedExternally
    open var _targetPosition: Any = definedExternally
    open var _attachedElement: Any = definedExternally
	override fun attach(ownerNode: AbstractMesh): Unit = definedExternally
    open fun releaseDrag(): Unit = definedExternally
    open var _startDragRay: Any = definedExternally
    open var _lastPointerRay: Any = definedExternally
    open fun startDrag(pointerId: Number? = definedExternally /* null */, fromRay: Ray? = definedExternally /* null */, startPickedPoint: Vector3? = definedExternally /* null */): Unit = definedExternally
    open var _startDrag: Any = definedExternally
    open var _dragDelta: Any = definedExternally
    open var _moveDrag: Any = definedExternally
    open var _pickWithRayOnDragPlane: Any = definedExternally
    open var _pointA: Any = definedExternally
    open var _pointB: Any = definedExternally
    open var _pointC: Any = definedExternally
    open var _lineA: Any = definedExternally
    open var _lineB: Any = definedExternally
    open var _localAxis: Any = definedExternally
    open var _lookAt: Any = definedExternally
    open var _updateDragPlanePosition: Any = definedExternally
    override fun detach(): Unit = definedExternally
    companion object {
        var _AnyMouseID: Any = definedExternally
        var _planeScene: Any = definedExternally
    }
}
external open class MultiPointerScaleBehavior : Behavior<Mesh> {
    open var _dragBehaviorA: Any = definedExternally
    open var _dragBehaviorB: Any = definedExternally
    open var _startDistance: Any = definedExternally
    open var _initialScale: Any = definedExternally
    open var _targetScale: Any = definedExternally
    open var _ownerNode: Any = definedExternally
    open var _sceneRenderObserver: Any = definedExternally
    override var name: String = definedExternally
    override fun init(): Unit = definedExternally
    open var _getCurrentDistance: Any = definedExternally
	override fun attach(ownerNode: Mesh): Unit = definedExternally
    override fun detach(): Unit = definedExternally
}
external open class SixDofDragBehavior : Behavior<Mesh> {
    open var _ownerNode: Any = definedExternally
    open var _sceneRenderObserver: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _targetPosition: Any = definedExternally
    open var _virtualOriginMesh: Any = definedExternally
    open var _virtualDragMesh: Any = definedExternally
    open var _pointerObserver: Any = definedExternally
    open var _moving: Any = definedExternally
    open var _startingOrientation: Any = definedExternally
    open var zDragFactor: Any = definedExternally
    open var rotateDraggedObject: Boolean = definedExternally
    open var dragging: Boolean = definedExternally
    open var dragDeltaRatio: Number = definedExternally
    open var currentDraggingPointerID: Number = definedExternally
    open var detachCameraControls: Boolean = definedExternally
    open var onDragStartObservable: Observable<Any> = definedExternally
    open var onDragEndObservable: Observable<Any> = definedExternally
    override var name: String = definedExternally
    override fun init(): Unit = definedExternally
	override fun attach(ownerNode: Mesh): Unit = definedExternally
    override fun detach(): Unit = definedExternally
    companion object {
        var _virtualScene: Any = definedExternally
    }
}
external interface `T$77` {
    var targetMesh: AbstractMesh? get() = definedExternally; set(value) = definedExternally
    var poleTargetMesh: AbstractMesh? get() = definedExternally; set(value) = definedExternally
    var poleTargetBone: Bone? get() = definedExternally; set(value) = definedExternally
    var poleTargetLocalOffset: Vector3? get() = definedExternally; set(value) = definedExternally
    var poleAngle: Number? get() = definedExternally; set(value) = definedExternally
    var bendAxis: Vector3? get() = definedExternally; set(value) = definedExternally
    var maxAngle: Number? get() = definedExternally; set(value) = definedExternally
    var slerpAmount: Number? get() = definedExternally; set(value) = definedExternally
}
external open class BoneIKController(mesh: AbstractMesh, bone: Bone, options: `T$77`? = definedExternally /* null */) {
    open var targetMesh: AbstractMesh = definedExternally
    open var poleTargetMesh: AbstractMesh = definedExternally
    open var poleTargetBone: Bone = definedExternally
    open var targetPosition: Vector3 = definedExternally
    open var poleTargetPosition: Vector3 = definedExternally
    open var poleTargetLocalOffset: Vector3 = definedExternally
    open var poleAngle: Number = definedExternally
    open var mesh: AbstractMesh = definedExternally
    open var slerpAmount: Number = definedExternally
    open var _bone1Quat: Any = definedExternally
    open var _bone1Mat: Any = definedExternally
    open var _bone2Ang: Any = definedExternally
    open var _bone1: Any = definedExternally
    open var _bone2: Any = definedExternally
    open var _bone1Length: Any = definedExternally
    open var _bone2Length: Any = definedExternally
    open var _maxAngle: Any = definedExternally
    open var _maxReach: Any = definedExternally
    open var _rightHandedSystem: Any = definedExternally
    open var _bendAxis: Any = definedExternally
    open var _slerping: Any = definedExternally
    open var _adjustRoll: Any = definedExternally
    open var maxAngle: Number = definedExternally
    open var _setMaxAngle: Any = definedExternally
    open fun update(): Unit = definedExternally
    companion object {
        var _tmpVecs: Any = definedExternally
        var _tmpQuat: Any = definedExternally
        var _tmpMats: Any = definedExternally
    }
}
external interface `T$78` {
    var maxYaw: Number? get() = definedExternally; set(value) = definedExternally
    var minYaw: Number? get() = definedExternally; set(value) = definedExternally
    var maxPitch: Number? get() = definedExternally; set(value) = definedExternally
    var minPitch: Number? get() = definedExternally; set(value) = definedExternally
    var slerpAmount: Number? get() = definedExternally; set(value) = definedExternally
    var upAxis: Vector3? get() = definedExternally; set(value) = definedExternally
    var upAxisSpace: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ */ get() = definedExternally; set(value) = definedExternally
    var yawAxis: Vector3? get() = definedExternally; set(value) = definedExternally
    var pitchAxis: Vector3? get() = definedExternally; set(value) = definedExternally
    var adjustYaw: Number? get() = definedExternally; set(value) = definedExternally
    var adjustPitch: Number? get() = definedExternally; set(value) = definedExternally
    var adjustRoll: Number? get() = definedExternally; set(value) = definedExternally
}
external open class BoneLookController(mesh: AbstractMesh, bone: Bone, target: Vector3, options: `T$78`? = definedExternally /* null */) {
    open var target: Vector3 = definedExternally
    open var mesh: AbstractMesh = definedExternally
    open var bone: Bone = definedExternally
    open var upAxis: Vector3 = definedExternally
    open var upAxisSpace: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ */ = definedExternally
    open var adjustYaw: Number = definedExternally
    open var adjustPitch: Number = definedExternally
    open var adjustRoll: Number = definedExternally
    open var slerpAmount: Number = definedExternally
    open var _minYaw: Any = definedExternally
    open var _maxYaw: Any = definedExternally
    open var _minPitch: Any = definedExternally
    open var _maxPitch: Any = definedExternally
    open var _minYawSin: Any = definedExternally
    open var _minYawCos: Any = definedExternally
    open var _maxYawSin: Any = definedExternally
    open var _maxYawCos: Any = definedExternally
    open var _midYawConstraint: Any = definedExternally
    open var _minPitchTan: Any = definedExternally
    open var _maxPitchTan: Any = definedExternally
    open var _boneQuat: Any = definedExternally
    open var _slerping: Any = definedExternally
    open var _transformYawPitch: Any = definedExternally
    open var _transformYawPitchInv: Any = definedExternally
    open var _firstFrameSkipped: Any = definedExternally
    open var _yawRange: Any = definedExternally
    open var _fowardAxis: Any = definedExternally
    open var minYaw: Number = definedExternally
    open var maxYaw: Number = definedExternally
    open var minPitch: Number = definedExternally
    open var maxPitch: Number = definedExternally
    open fun update(): Unit = definedExternally
    open var _getAngleDiff: Any = definedExternally
    open var _getAngleBetween: Any = definedExternally
    open var _isAngleBetween: Any = definedExternally
    companion object {
        var _tmpVecs: Any = definedExternally
        var _tmpQuat: Any = definedExternally
        var _tmpMats: Any = definedExternally
    }
}
external open class ArcRotateCameraGamepadInput : ICameraInput<ArcRotateCamera> {
    override var camera: ArcRotateCamera = definedExternally
    open var gamepad: Gamepad = definedExternally
    open var gamepadRotationSensibility: Number = definedExternally
    open var gamepadMoveSensibility: Number = definedExternally
    open var _onGamepadConnectedObserver: Any = definedExternally
    open var _onGamepadDisconnectedObserver: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class ArcRotateCameraVRDeviceOrientationInput : ICameraInput<ArcRotateCamera> {
    override var camera: ArcRotateCamera = definedExternally
    open var alphaCorrection: Number = definedExternally
    open var gammaCorrection: Number = definedExternally
    open var _alpha: Any = definedExternally
    open var _gamma: Any = definedExternally
    open var _dirty: Any = definedExternally
    open var _deviceOrientationHandler: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    open fun _onOrientationEvent(evt: DeviceOrientationEvent): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class FlyCameraMouseInput(touchEnabled: Boolean? = definedExternally /* null */) : ICameraInput<FlyCamera> {
    override var camera: FlyCamera = definedExternally
    open var touchEnabled: Boolean = definedExternally
    open var buttons: Array<Number> = definedExternally
    open var buttonsYaw: Array<Number> = definedExternally
    open var buttonsPitch: Array<Number> = definedExternally
    open var buttonsRoll: Array<Number> = definedExternally
    open var activeButton: Number = definedExternally
    open var angularSensibility: Number = definedExternally
    open var _mousemoveCallback: Any = definedExternally
    open var _observer: Any = definedExternally
    open var _rollObserver: Any = definedExternally
    open var previousPosition: Any = definedExternally
    open var noPreventDefault: Any = definedExternally
    open var element: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
    open var _pointerInput: Any = definedExternally
    open var _onMouseMove: Any = definedExternally
    open var rotateCamera: Any = definedExternally
}
external open class FlyCameraInputsManager(camera: FlyCamera) : CameraInputsManager<FlyCamera> {
    open fun addKeyboard(): FlyCameraInputsManager = definedExternally
    open fun addMouse(touchEnabled: Boolean? = definedExternally /* null */): FlyCameraInputsManager = definedExternally
}
external open class FlyCamera(name: String, position: Vector3, scene: Scene, setActiveOnSceneIfNoneActive: Boolean? = definedExternally /* null */) : TargetCamera {
    open var ellipsoid: Vector3 = definedExternally
    open var ellipsoidOffset: Vector3 = definedExternally
    open var checkCollisions: Boolean = definedExternally
    open var applyGravity: Boolean = definedExternally
    override var cameraDirection: Vector3 = definedExternally
    override var rotationQuaternion: Quaternion = definedExternally
    open var _trackRoll: Number = definedExternally
    open var rollCorrect: Number = definedExternally
    open var bankedTurn: Boolean = definedExternally
    open var bankedTurnLimit: Number = definedExternally
    open var bankedTurnMultiplier: Number = definedExternally
    override var inputs: CameraInputsManager<Camera> = definedExternally
    open var angularSensibility: Number = definedExternally
    open var keysForward: Array<Number> = definedExternally
    open var keysBackward: Array<Number> = definedExternally
    open var keysUp: Array<Number> = definedExternally
    open var keysDown: Array<Number> = definedExternally
    open var keysLeft: Array<Number> = definedExternally
    open var keysRight: Array<Number> = definedExternally
    open var onCollide: (collidedMesh: AbstractMesh) -> Unit = definedExternally
    open var _collider: Any = definedExternally
    open var _needMoveForGravity: Any = definedExternally
    open var _oldPosition: Any = definedExternally
    open var _diffPosition: Any = definedExternally
    open var _newPosition: Any = definedExternally
    open var _localDirection: Vector3 = definedExternally
    open var _transformedDirection: Vector3 = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open var _collisionMask: Any = definedExternally
    open var collisionMask: Number = definedExternally
    open fun _collideWithWorld(displacement: Vector3): Unit = definedExternally
    open var _onCollisionPositionChange: Any = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    override fun _decideIfNeedsToMove(): Boolean = definedExternally
    override fun _updatePosition(): Unit = definedExternally
    open fun restoreRoll(rate: Number): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
}
external open class FlyCameraKeyboardInput : ICameraInput<FlyCamera> {
    override var camera: FlyCamera = definedExternally
    open var keysForward: Array<Number> = definedExternally
    open var keysBackward: Array<Number> = definedExternally
    open var keysUp: Array<Number> = definedExternally
    open var keysDown: Array<Number> = definedExternally
    open var keysRight: Array<Number> = definedExternally
    open var keysLeft: Array<Number> = definedExternally
    open var _keys: Any = definedExternally
    open var _onCanvasBlurObserver: Any = definedExternally
    open var _onKeyboardObserver: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _scene: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    open fun _onLostFocus(e: FocusEvent): Unit = definedExternally
    override fun getSimpleName(): String = definedExternally
    open fun checkInputs(): Unit = definedExternally
}
external open class FollowCameraMouseWheelInput : ICameraInput<FollowCamera> {
    override var camera: FollowCamera = definedExternally
    open var axisControlRadius: Boolean = definedExternally
    open var axisControlHeight: Boolean = definedExternally
    open var axisControlRotation: Boolean = definedExternally
    open var wheelPrecision: Number = definedExternally
    open var wheelDeltaPercentage: Number = definedExternally
    open var _wheel: Any = definedExternally
    open var _observer: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class FollowCameraPointersInput : BaseCameraPointersInput {
    override var camera: Camera = definedExternally
    override fun getClassName(): String = definedExternally
    open var angularSensibilityX: Number = definedExternally
    open var angularSensibilityY: Number = definedExternally
    open var pinchPrecision: Number = definedExternally
    open var pinchDeltaPercentage: Number = definedExternally
    open var axisXControlRadius: Boolean = definedExternally
    open var axisXControlHeight: Boolean = definedExternally
    open var axisXControlRotation: Boolean = definedExternally
    open var axisYControlRadius: Boolean = definedExternally
    open var axisYControlHeight: Boolean = definedExternally
    open var axisYControlRotation: Boolean = definedExternally
    open var axisPinchControlRadius: Boolean = definedExternally
    open var axisPinchControlHeight: Boolean = definedExternally
    open var axisPinchControlRotation: Boolean = definedExternally
    open var warningEnable: Boolean = definedExternally
    override fun onTouch(pointA: PointerTouch, offsetX: Number, offsetY: Number): Unit = definedExternally
    override fun onMultiTouch(pointA: PointerTouch, pointB: PointerTouch, previousPinchSquaredDistance: Number, pinchSquaredDistance: Number, previousMultiTouchPanPosition: PointerTouch, multiTouchPanPosition: PointerTouch): Unit = definedExternally
    open var _warningCounter: Any = definedExternally
    open var _warning: Any = definedExternally
}
external open class FollowCameraInputsManager(camera: FollowCamera) : CameraInputsManager<FollowCamera> {
    open fun addKeyboard(): FollowCameraInputsManager = definedExternally
    open fun addMouseWheel(): FollowCameraInputsManager = definedExternally
    open fun addPointers(): FollowCameraInputsManager = definedExternally
    open fun addVRDeviceOrientation(): FollowCameraInputsManager = definedExternally
}
external open class FollowCamera(name: String, position: Vector3, scene: Scene, lockedTarget: TransformNode? = definedExternally /* null */) : TargetCamera {
    open var radius: Number = definedExternally
    open var lowerRadiusLimit: Number = definedExternally
    open var upperRadiusLimit: Number = definedExternally
    open var rotationOffset: Number = definedExternally
    open var lowerRotationOffsetLimit: Number = definedExternally
    open var upperRotationOffsetLimit: Number = definedExternally
    open var heightOffset: Number = definedExternally
    open var lowerHeightOffsetLimit: Number = definedExternally
    open var upperHeightOffsetLimit: Number = definedExternally
    open var cameraAcceleration: Number = definedExternally
    open var maxCameraSpeed: Number = definedExternally
    override var lockedTarget: TransformNode = definedExternally
    override var inputs: CameraInputsManager<Camera> = definedExternally
    open var _follow: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    open var _checkLimits: Any = definedExternally
    override fun getClassName(): String = definedExternally
}
external open class ArcFollowCamera(name: String, alpha: Number, beta: Number, radius: Number, target: AbstractMesh, scene: Scene) : TargetCamera {
    open var alpha: Number = definedExternally
    open var beta: Number = definedExternally
    open var radius: Number = definedExternally
    open var target: AbstractMesh = definedExternally
    open var _cartesianCoordinates: Any = definedExternally
    open var _follow: Any = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
}
external open class FollowCameraKeyboardMoveInput : ICameraInput<FollowCamera> {
    override var camera: FollowCamera = definedExternally
    open var keysHeightOffsetIncr: Array<Number> = definedExternally
    open var keysHeightOffsetDecr: Array<Number> = definedExternally
    open var keysHeightOffsetModifierAlt: Boolean = definedExternally
    open var keysHeightOffsetModifierCtrl: Boolean = definedExternally
    open var keysHeightOffsetModifierShift: Boolean = definedExternally
    open var keysRotationOffsetIncr: Array<Number> = definedExternally
    open var keysRotationOffsetDecr: Array<Number> = definedExternally
    open var keysRotationOffsetModifierAlt: Boolean = definedExternally
    open var keysRotationOffsetModifierCtrl: Boolean = definedExternally
    open var keysRotationOffsetModifierShift: Boolean = definedExternally
    open var keysRadiusIncr: Array<Number> = definedExternally
    open var keysRadiusDecr: Array<Number> = definedExternally
    open var keysRadiusModifierAlt: Boolean = definedExternally
    open var keysRadiusModifierCtrl: Boolean = definedExternally
    open var keysRadiusModifierShift: Boolean = definedExternally
    open var heightSensibility: Number = definedExternally
    open var rotationSensibility: Number = definedExternally
    open var radiusSensibility: Number = definedExternally
    open var _keys: Any = definedExternally
    open var _ctrlPressed: Any = definedExternally
    open var _altPressed: Any = definedExternally
    open var _shiftPressed: Any = definedExternally
    open var _onCanvasBlurObserver: Any = definedExternally
    open var _onKeyboardObserver: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _scene: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
    open var _modifierHeightOffset: Any = definedExternally
    open var _modifierRotationOffset: Any = definedExternally
    open var _modifierRadius: Any = definedExternally
}
external open class FreeCameraDeviceOrientationInput : ICameraInput<FreeCamera> {
    open var _camera: Any = definedExternally
    open var _screenOrientationAngle: Any = definedExternally
    open var _constantTranform: Any = definedExternally
    open var _screenQuaternion: Any = definedExternally
    open var _alpha: Any = definedExternally
    open var _beta: Any = definedExternally
    open var _gamma: Any = definedExternally
    open var _onDeviceOrientationChangedObservable: Observable<Unit> = definedExternally
    override var camera: FreeCamera = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    open var _orientationChanged: Any = definedExternally
    open var _deviceOrientation: Any = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class FreeCameraGamepadInput : ICameraInput<FreeCamera> {
    override var camera: FreeCamera = definedExternally
    open var gamepad: Gamepad = definedExternally
    open var gamepadAngularSensibility: Number = definedExternally
    open var gamepadMoveSensibility: Number = definedExternally
    open var _onGamepadConnectedObserver: Any = definedExternally
    open var _onGamepadDisconnectedObserver: Any = definedExternally
    open var _cameraTransform: Any = definedExternally
    open var _deltaTransform: Any = definedExternally
    open var _vector3: Any = definedExternally
    open var _vector2: Any = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external enum class JoystickAxis {
    X /* = 0 */,
    Y /* = 1 */,
    Z /* = 2 */
}
external open class VirtualJoystick(leftJoystick: Boolean? = definedExternally /* null */) {
    open var reverseLeftRight: Boolean = definedExternally
    open var reverseUpDown: Boolean = definedExternally
    open var deltaPosition: Vector3 = definedExternally
    open var pressed: Boolean = definedExternally
    open var _action: Any = definedExternally
    open var _axisTargetedByLeftAndRight: Any = definedExternally
    open var _axisTargetedByUpAndDown: Any = definedExternally
    open var _joystickSensibility: Any = definedExternally
    open var _inversedSensibility: Any = definedExternally
    open var _joystickPointerID: Any = definedExternally
    open var _joystickColor: Any = definedExternally
    open var _joystickPointerPos: Any = definedExternally
    open var _joystickPreviousPointerPos: Any = definedExternally
    open var _joystickPointerStartPos: Any = definedExternally
    open var _deltaJoystickVector: Any = definedExternally
    open var _leftJoystick: Any = definedExternally
    open var _touches: Any = definedExternally
    open var _onPointerDownHandlerRef: Any = definedExternally
    open var _onPointerMoveHandlerRef: Any = definedExternally
    open var _onPointerUpHandlerRef: Any = definedExternally
    open var _onResize: Any = definedExternally
    open fun setJoystickSensibility(newJoystickSensibility: Number): Unit = definedExternally
    open var _onPointerDown: Any = definedExternally
    open var _onPointerMove: Any = definedExternally
    open var _onPointerUp: Any = definedExternally
    open fun setJoystickColor(newColor: String): Unit = definedExternally
    open fun setActionOnTouch(action: () -> Any): Unit = definedExternally
    open fun setAxisForLeftRight(axis: Number /* 0 */): Unit = definedExternally
    open fun setAxisForLeftRight(axis: Number /* 1 */): Unit = definedExternally
    open fun setAxisForLeftRight(axis: Number /* 2 */): Unit = definedExternally
    open fun setAxisForUpDown(axis: Number /* 0 */): Unit = definedExternally
    open fun setAxisForUpDown(axis: Number /* 1 */): Unit = definedExternally
    open fun setAxisForUpDown(axis: Number /* 2 */): Unit = definedExternally
    open var _drawVirtualJoystick: Any = definedExternally
    open fun releaseCanvas(): Unit = definedExternally
    companion object {
        var Canvas: HTMLCanvasElement = definedExternally
        var _globalJoystickIndex: Any = definedExternally
        var vjCanvasContext: Any = definedExternally
        var vjCanvasWidth: Any = definedExternally
        var vjCanvasHeight: Any = definedExternally
        var halfWidth: Any = definedExternally
    }
}
external open class FreeCameraVirtualJoystickInput : ICameraInput<FreeCamera> {
    override var camera: FreeCamera = definedExternally
    open var _leftjoystick: Any = definedExternally
    open var _rightjoystick: Any = definedExternally
    open fun getLeftJoystick(): VirtualJoystick = definedExternally
    open fun getRightJoystick(): VirtualJoystick = definedExternally
    open fun checkInputs(): Unit = definedExternally
    override fun attachControl(element: HTMLElement, noPreventDefault: Boolean?): Unit = definedExternally
    override fun detachControl(element: HTMLElement): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getSimpleName(): String = definedExternally
}
external open class TouchCamera(name: String, position: Vector3, scene: Scene) : FreeCamera {
    open var touchAngularSensibility: Number = definedExternally
    open var touchMoveSensibility: Number = definedExternally
    override fun getClassName(): String = definedExternally
    override fun _setupInputs(): Unit = definedExternally
}
external open class DeviceOrientationCamera(name: String, position: Vector3, scene: Scene) : FreeCamera {
    open var _initialQuaternion: Any = definedExternally
    open var _quaternionCache: Any = definedExternally
    open var _tmpDragQuaternion: Any = definedExternally
    open var _disablePointerInputWhenUsingDeviceOrientation: Boolean = definedExternally
    open var _dragFactor: Any = definedExternally
    open fun enableHorizontalDragging(dragFactor: Number? = definedExternally /* null */): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun _checkInputs(): Unit = definedExternally
    open fun resetToCurrentRotation(axis: Axis? = definedExternally /* null */): Unit = definedExternally
}
external enum class Xbox360Button {
    A /* = 0 */,
    B /* = 1 */,
    X /* = 2 */,
    Y /* = 3 */,
    Start /* = 4 */,
    Back /* = 5 */,
    LB /* = 6 */,
    RB /* = 7 */,
    LeftStick /* = 8 */,
    RightStick /* = 9 */
}
external enum class Xbox360Dpad {
    Up /* = 0 */,
    Down /* = 1 */,
    Left /* = 2 */,
    Right /* = 3 */
}
external open class Xbox360Pad(id: String, index: Number, gamepad: Any, xboxOne: Boolean? = definedExternally /* null */) : Gamepad {
    open var _leftTrigger: Any = definedExternally
    open var _rightTrigger: Any = definedExternally
    open var _onlefttriggerchanged: Any = definedExternally
    open var _onrighttriggerchanged: Any = definedExternally
    open var _onbuttondown: Any = definedExternally
    open var _onbuttonup: Any = definedExternally
    open var _ondpaddown: Any = definedExternally
    open var _ondpadup: Any = definedExternally
    open var onButtonDownObservable: Observable<dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ | Number /* 6 */ | Number /* 7 */ | Number /* 8 */ | Number /* 9 */ */> = definedExternally
    open var onButtonUpObservable: Observable<dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ | Number /* 6 */ | Number /* 7 */ | Number /* 8 */ | Number /* 9 */ */> = definedExternally
    open var onPadDownObservable: Observable<dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ */> = definedExternally
    open var onPadUpObservable: Observable<dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ */> = definedExternally
    open var _buttonA: Any = definedExternally
    open var _buttonB: Any = definedExternally
    open var _buttonX: Any = definedExternally
    open var _buttonY: Any = definedExternally
    open var _buttonBack: Any = definedExternally
    open var _buttonStart: Any = definedExternally
    open var _buttonLB: Any = definedExternally
    open var _buttonRB: Any = definedExternally
    open var _buttonLeftStick: Any = definedExternally
    open var _buttonRightStick: Any = definedExternally
    open var _dPadUp: Any = definedExternally
    open var _dPadDown: Any = definedExternally
    open var _dPadLeft: Any = definedExternally
    open var _dPadRight: Any = definedExternally
    open var _isXboxOnePad: Any = definedExternally
    open fun onlefttriggerchanged(callback: (value: Number) -> Unit): Unit = definedExternally
    open fun onrighttriggerchanged(callback: (value: Number) -> Unit): Unit = definedExternally
    open var leftTrigger: Number = definedExternally
    open var rightTrigger: Number = definedExternally
    open fun onbuttondown(callback: (buttonPressed: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ | Number /* 6 */ | Number /* 7 */ | Number /* 8 */ | Number /* 9 */ */) -> Unit): Unit = definedExternally
    open fun onbuttonup(callback: (buttonReleased: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ | Number /* 6 */ | Number /* 7 */ | Number /* 8 */ | Number /* 9 */ */) -> Unit): Unit = definedExternally
    open fun ondpaddown(callback: (dPadPressed: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ */) -> Unit): Unit = definedExternally
    open fun ondpadup(callback: (dPadReleased: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ */) -> Unit): Unit = definedExternally
    open var _setButtonValue: Any = definedExternally
    open var _setDPadValue: Any = definedExternally
    open var buttonA: Number = definedExternally
    open var buttonB: Number = definedExternally
    open var buttonX: Number = definedExternally
    open var buttonY: Number = definedExternally
    open var buttonStart: Number = definedExternally
    open var buttonBack: Number = definedExternally
    open var buttonLB: Number = definedExternally
    open var buttonRB: Number = definedExternally
    open var buttonLeftStick: Number = definedExternally
    open var buttonRightStick: Number = definedExternally
    open var dPadUp: Number = definedExternally
    open var dPadDown: Number = definedExternally
    open var dPadLeft: Number = definedExternally
    open var dPadRight: Number = definedExternally
    override fun update(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class GamepadManager(_scene: Scene? = definedExternally /* null */) {
    open var _scene: Any = definedExternally
    open var _babylonGamepads: Any = definedExternally
    open var _oneGamepadConnected: Any = definedExternally
    open var _isMonitoring: Boolean = definedExternally
    open var _gamepadEventSupported: Any = definedExternally
    open var _gamepadSupport: Any = definedExternally
    open var onGamepadConnectedObservable: Observable<Gamepad> = definedExternally
    open var onGamepadDisconnectedObservable: Observable<Gamepad> = definedExternally
    open var _onGamepadConnectedEvent: Any = definedExternally
    open var _onGamepadDisconnectedEvent: Any = definedExternally
    open var gamepads: Array<Gamepad> = definedExternally
    open fun getGamepadByType(type: Number? = definedExternally /* null */): Gamepad = definedExternally
    open fun dispose(): Unit = definedExternally
    open var _addNewGamepad: Any = definedExternally
    open var _startMonitoringGamepads: Any = definedExternally
    open var _stopMonitoringGamepads: Any = definedExternally
    open fun _checkGamepadsStatus(): Unit = definedExternally
    open var _updateGamepadObjects: Any = definedExternally
}
external open class GamepadSystemSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _beforeCameraUpdate: Any = definedExternally
}
external open class UniversalCamera(name: String, position: Vector3, scene: Scene) : TouchCamera {
    open var gamepadAngularSensibility: Number = definedExternally
    open var gamepadMoveSensibility: Number = definedExternally
    override fun getClassName(): String = definedExternally
}
external open class GamepadCamera(name: String, position: Vector3, scene: Scene) : UniversalCamera {
    override fun getClassName(): String = definedExternally
}
external object passPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object passCubePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class PassPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
}
external open class PassCubePostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var _face: Any = definedExternally
    open var face: Number = definedExternally
}
external object anaglyphPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class AnaglyphPostProcess : PostProcess {
    constructor(name: String, options: Number, rigCameras: Array<Camera>, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, rigCameras: Array<Camera>, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    open var _passedProcess: Any = definedExternally
}
external open class AnaglyphArcRotateCamera(name: String, alpha: Number, beta: Number, radius: Number, target: Vector3, interaxialDistance: Number, scene: Scene) : ArcRotateCamera {
    override fun getClassName(): String = definedExternally
}
external open class AnaglyphFreeCamera(name: String, position: Vector3, interaxialDistance: Number, scene: Scene) : FreeCamera {
    override fun getClassName(): String = definedExternally
}
external open class AnaglyphGamepadCamera(name: String, position: Vector3, interaxialDistance: Number, scene: Scene) : GamepadCamera {
    override fun getClassName(): String = definedExternally
}
external open class AnaglyphUniversalCamera(name: String, position: Vector3, interaxialDistance: Number, scene: Scene) : UniversalCamera {
    override fun getClassName(): String = definedExternally
}
external object stereoscopicInterlacePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class StereoscopicInterlacePostProcess(name: String, rigCameras: Array<Camera>, isStereoscopicHoriz: Boolean, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */) : PostProcess {
    open var _stepSize: Any = definedExternally
    open var _passedProcess: Any = definedExternally
}
external open class StereoscopicArcRotateCamera(name: String, alpha: Number, beta: Number, radius: Number, target: Vector3, interaxialDistance: Number, isStereoscopicSideBySide: Boolean, scene: Scene) : ArcRotateCamera {
    override fun getClassName(): String = definedExternally
}
external open class StereoscopicFreeCamera(name: String, position: Vector3, interaxialDistance: Number, isStereoscopicSideBySide: Boolean, scene: Scene) : FreeCamera {
    override fun getClassName(): String = definedExternally
}
external open class StereoscopicGamepadCamera(name: String, position: Vector3, interaxialDistance: Number, isStereoscopicSideBySide: Boolean, scene: Scene) : GamepadCamera {
    override fun getClassName(): String = definedExternally
}
external open class StereoscopicUniversalCamera(name: String, position: Vector3, interaxialDistance: Number, isStereoscopicSideBySide: Boolean, scene: Scene) : UniversalCamera {
    override fun getClassName(): String = definedExternally
}
external open class VirtualJoysticksCamera(name: String, position: Vector3, scene: Scene) : FreeCamera {
    override fun getClassName(): String = definedExternally
}
external open class VRCameraMetrics {
    open var hResolution: Number = definedExternally
    open var vResolution: Number = definedExternally
    open var hScreenSize: Number = definedExternally
    open var vScreenSize: Number = definedExternally
    open var vScreenCenter: Number = definedExternally
    open var eyeToScreenDistance: Number = definedExternally
    open var lensSeparationDistance: Number = definedExternally
    open var interpupillaryDistance: Number = definedExternally
    open var distortionK: Array<Number> = definedExternally
    open var chromaAbCorrection: Array<Number> = definedExternally
    open var postProcessScaleFactor: Number = definedExternally
    open var lensCenterOffset: Number = definedExternally
    open var compensateDistortion: Boolean = definedExternally
    open var multiviewEnabled: Boolean = definedExternally
    open var aspectRatio: Number = definedExternally
    open var aspectRatioFov: Number = definedExternally
    open var leftHMatrix: Matrix = definedExternally
    open var rightHMatrix: Matrix = definedExternally
    open var leftPreViewMatrix: Matrix = definedExternally
    open var rightPreViewMatrix: Matrix = definedExternally
    companion object {
        fun GetDefault(): VRCameraMetrics = definedExternally
    }
}
external object vrDistortionCorrectionPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class VRDistortionCorrectionPostProcess(name: String, camera: Camera, isRightEye: Boolean, vrMetrics: VRCameraMetrics) : PostProcess {
    open var _isRightEye: Any = definedExternally
    open var _distortionFactors: Any = definedExternally
    open var _postProcessScaleFactor: Any = definedExternally
    open var _lensCenterOffset: Any = definedExternally
    open var _scaleIn: Any = definedExternally
    open var _scaleFactor: Any = definedExternally
    open var _lensCenter: Any = definedExternally
}
external open class VRDeviceOrientationArcRotateCamera(name: String, alpha: Number, beta: Number, radius: Number, target: Vector3, scene: Scene, compensateDistortion: Boolean? = definedExternally /* null */, vrCameraMetrics: VRCameraMetrics? = definedExternally /* null */) : ArcRotateCamera {
    override fun getClassName(): String = definedExternally
}
external open class VRDeviceOrientationFreeCamera(name: String, position: Vector3, scene: Scene, compensateDistortion: Boolean? = definedExternally /* null */, vrCameraMetrics: VRCameraMetrics? = definedExternally /* null */) : DeviceOrientationCamera {
    override fun getClassName(): String = definedExternally
}
external open class VRDeviceOrientationGamepadCamera(name: String, position: Vector3, scene: Scene, compensateDistortion: Boolean? = definedExternally /* null */, vrCameraMetrics: VRCameraMetrics? = definedExternally /* null */) : VRDeviceOrientationFreeCamera {
    override fun getClassName(): String = definedExternally
}
external open class PushMaterial(name: String, scene: Scene) : Material {
    open var _activeEffect: Effect = definedExternally
    open var _normalMatrix: Matrix = definedExternally
    open var allowShaderHotSwapping: Boolean = definedExternally
    override fun getEffect(): Effect = definedExternally
    override fun isReady(mesh: AbstractMesh?, useInstances: Boolean?): Boolean = definedExternally
    override fun bindOnlyWorldMatrix(world: Matrix): Unit = definedExternally
    open fun bindOnlyNormalMatrix(normalMatrix: Matrix): Unit = definedExternally
    override fun bind(world: Matrix, mesh: Mesh?): Unit = definedExternally
    open fun _afterBind(mesh: Mesh, effect: Effect? = definedExternally /* null */): Unit = definedExternally
    open fun _mustRebind(scene: Scene, effect: Effect, visibility: Number? = definedExternally /* null */): Boolean = definedExternally
}
external open class MaterialFlags {
    companion object {
        var _DiffuseTextureEnabled: Any = definedExternally
        var DiffuseTextureEnabled: Boolean = definedExternally
        var _AmbientTextureEnabled: Any = definedExternally
        var AmbientTextureEnabled: Boolean = definedExternally
        var _OpacityTextureEnabled: Any = definedExternally
        var OpacityTextureEnabled: Boolean = definedExternally
        var _ReflectionTextureEnabled: Any = definedExternally
        var ReflectionTextureEnabled: Boolean = definedExternally
        var _EmissiveTextureEnabled: Any = definedExternally
        var EmissiveTextureEnabled: Boolean = definedExternally
        var _SpecularTextureEnabled: Any = definedExternally
        var SpecularTextureEnabled: Boolean = definedExternally
        var _BumpTextureEnabled: Any = definedExternally
        var BumpTextureEnabled: Boolean = definedExternally
        var _LightmapTextureEnabled: Any = definedExternally
        var LightmapTextureEnabled: Boolean = definedExternally
        var _RefractionTextureEnabled: Any = definedExternally
        var RefractionTextureEnabled: Boolean = definedExternally
        var _ColorGradingTextureEnabled: Any = definedExternally
        var ColorGradingTextureEnabled: Boolean = definedExternally
        var _FresnelEnabled: Any = definedExternally
        var FresnelEnabled: Boolean = definedExternally
        var _ClearCoatTextureEnabled: Any = definedExternally
        var ClearCoatTextureEnabled: Boolean = definedExternally
        var _ClearCoatBumpTextureEnabled: Any = definedExternally
        var ClearCoatBumpTextureEnabled: Boolean = definedExternally
        var _ClearCoatTintTextureEnabled: Any = definedExternally
        var ClearCoatTintTextureEnabled: Boolean = definedExternally
        var _SheenTextureEnabled: Any = definedExternally
        var SheenTextureEnabled: Boolean = definedExternally
        var _AnisotropicTextureEnabled: Any = definedExternally
        var AnisotropicTextureEnabled: Boolean = definedExternally
        var _ThicknessTextureEnabled: Any = definedExternally
        var ThicknessTextureEnabled: Boolean = definedExternally
    }
}
external object defaultFragmentDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object defaultUboDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object lightFragmentDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object lightUboDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object lightsFragmentFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object shadowsFragmentFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object fresnelFunction {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object reflectionFunction {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object bumpFragmentFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object logDepthDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object bumpFragment {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object depthPrePass {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object lightFragment {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object logDepthFragment {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object defaultPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object defaultVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object bumpVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object bumpVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object fogVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object shadowsVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pointCloudVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object logDepthVertex {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object defaultVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class StandardMaterialDefines : MaterialDefines, IImageProcessingConfigurationDefines {
    open var MAINUV1: Boolean = definedExternally
    open var MAINUV2: Boolean = definedExternally
    open var DIFFUSE: Boolean = definedExternally
    open var DIFFUSEDIRECTUV: Number = definedExternally
    open var AMBIENT: Boolean = definedExternally
    open var AMBIENTDIRECTUV: Number = definedExternally
    open var OPACITY: Boolean = definedExternally
    open var OPACITYDIRECTUV: Number = definedExternally
    open var OPACITYRGB: Boolean = definedExternally
    open var REFLECTION: Boolean = definedExternally
    open var EMISSIVE: Boolean = definedExternally
    open var EMISSIVEDIRECTUV: Number = definedExternally
    open var SPECULAR: Boolean = definedExternally
    open var SPECULARDIRECTUV: Number = definedExternally
    open var BUMP: Boolean = definedExternally
    open var BUMPDIRECTUV: Number = definedExternally
    open var PARALLAX: Boolean = definedExternally
    open var PARALLAXOCCLUSION: Boolean = definedExternally
    open var SPECULAROVERALPHA: Boolean = definedExternally
    open var CLIPPLANE: Boolean = definedExternally
    open var CLIPPLANE2: Boolean = definedExternally
    open var CLIPPLANE3: Boolean = definedExternally
    open var CLIPPLANE4: Boolean = definedExternally
    open var ALPHATEST: Boolean = definedExternally
    open var DEPTHPREPASS: Boolean = definedExternally
    open var ALPHAFROMDIFFUSE: Boolean = definedExternally
    open var POINTSIZE: Boolean = definedExternally
    open var FOG: Boolean = definedExternally
    open var SPECULARTERM: Boolean = definedExternally
    open var DIFFUSEFRESNEL: Boolean = definedExternally
    open var OPACITYFRESNEL: Boolean = definedExternally
    open var REFLECTIONFRESNEL: Boolean = definedExternally
    open var REFRACTIONFRESNEL: Boolean = definedExternally
    open var EMISSIVEFRESNEL: Boolean = definedExternally
    open var FRESNEL: Boolean = definedExternally
    open var NORMAL: Boolean = definedExternally
    open var UV1: Boolean = definedExternally
    open var UV2: Boolean = definedExternally
    open var VERTEXCOLOR: Boolean = definedExternally
    open var VERTEXALPHA: Boolean = definedExternally
    open var NUM_BONE_INFLUENCERS: Number = definedExternally
    open var BonesPerMesh: Number = definedExternally
    open var BONETEXTURE: Boolean = definedExternally
    open var INSTANCES: Boolean = definedExternally
    open var GLOSSINESS: Boolean = definedExternally
    open var ROUGHNESS: Boolean = definedExternally
    open var EMISSIVEASILLUMINATION: Boolean = definedExternally
    open var LINKEMISSIVEWITHDIFFUSE: Boolean = definedExternally
    open var REFLECTIONFRESNELFROMSPECULAR: Boolean = definedExternally
    open var LIGHTMAP: Boolean = definedExternally
    open var LIGHTMAPDIRECTUV: Number = definedExternally
    open var OBJECTSPACE_NORMALMAP: Boolean = definedExternally
    open var USELIGHTMAPASSHADOWMAP: Boolean = definedExternally
    open var REFLECTIONMAP_3D: Boolean = definedExternally
    open var REFLECTIONMAP_SPHERICAL: Boolean = definedExternally
    open var REFLECTIONMAP_PLANAR: Boolean = definedExternally
    open var REFLECTIONMAP_CUBIC: Boolean = definedExternally
    open var USE_LOCAL_REFLECTIONMAP_CUBIC: Boolean = definedExternally
    open var REFLECTIONMAP_PROJECTION: Boolean = definedExternally
    open var REFLECTIONMAP_SKYBOX: Boolean = definedExternally
    open var REFLECTIONMAP_SKYBOX_TRANSFORMED: Boolean = definedExternally
    open var REFLECTIONMAP_EXPLICIT: Boolean = definedExternally
    open var REFLECTIONMAP_EQUIRECTANGULAR: Boolean = definedExternally
    open var REFLECTIONMAP_EQUIRECTANGULAR_FIXED: Boolean = definedExternally
    open var REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED: Boolean = definedExternally
    open var INVERTCUBICMAP: Boolean = definedExternally
    open var LOGARITHMICDEPTH: Boolean = definedExternally
    open var REFRACTION: Boolean = definedExternally
    open var REFRACTIONMAP_3D: Boolean = definedExternally
    open var REFLECTIONOVERALPHA: Boolean = definedExternally
    open var TWOSIDEDLIGHTING: Boolean = definedExternally
    open var SHADOWFLOAT: Boolean = definedExternally
    open var MORPHTARGETS: Boolean = definedExternally
    open var MORPHTARGETS_NORMAL: Boolean = definedExternally
    open var MORPHTARGETS_TANGENT: Boolean = definedExternally
    open var NUM_MORPH_INFLUENCERS: Number = definedExternally
    open var NONUNIFORMSCALING: Boolean = definedExternally
    open var PREMULTIPLYALPHA: Boolean = definedExternally
    override var IMAGEPROCESSING: Boolean = definedExternally
    override var VIGNETTE: Boolean = definedExternally
    override var VIGNETTEBLENDMODEMULTIPLY: Boolean = definedExternally
    override var VIGNETTEBLENDMODEOPAQUE: Boolean = definedExternally
    override var TONEMAPPING: Boolean = definedExternally
    override var TONEMAPPING_ACES: Boolean = definedExternally
    override var CONTRAST: Boolean = definedExternally
    override var COLORCURVES: Boolean = definedExternally
    override var COLORGRADING: Boolean = definedExternally
    override var COLORGRADING3D: Boolean = definedExternally
    override var SAMPLER3DGREENDEPTH: Boolean = definedExternally
    override var SAMPLER3DBGRMAP: Boolean = definedExternally
    override var IMAGEPROCESSINGPOSTPROCESS: Boolean = definedExternally
    open var MULTIVIEW: Boolean = definedExternally
    open var IS_REFLECTION_LINEAR: Boolean = definedExternally
    open var IS_REFRACTION_LINEAR: Boolean = definedExternally
    override var EXPOSURE: Boolean = definedExternally
    open fun setReflectionMode(modeToEnable: String): Unit = definedExternally
}
external open class StandardMaterial(name: String, scene: Scene) : PushMaterial {
    open var _diffuseTexture: Any = definedExternally
    open var diffuseTexture: BaseTexture = definedExternally
    open var _ambientTexture: Any = definedExternally
    open var ambientTexture: BaseTexture = definedExternally
    open var _opacityTexture: Any = definedExternally
    open var opacityTexture: BaseTexture = definedExternally
    open var _reflectionTexture: Any = definedExternally
    open var reflectionTexture: BaseTexture = definedExternally
    open var _emissiveTexture: Any = definedExternally
    open var emissiveTexture: BaseTexture = definedExternally
    open var _specularTexture: Any = definedExternally
    open var specularTexture: BaseTexture = definedExternally
    open var _bumpTexture: Any = definedExternally
    open var bumpTexture: BaseTexture = definedExternally
    open var _lightmapTexture: Any = definedExternally
    open var lightmapTexture: BaseTexture = definedExternally
    open var _refractionTexture: Any = definedExternally
    open var refractionTexture: BaseTexture = definedExternally
    open var ambientColor: Color3 = definedExternally
    open var diffuseColor: Color3 = definedExternally
    open var specularColor: Color3 = definedExternally
    open var emissiveColor: Color3 = definedExternally
    open var specularPower: Number = definedExternally
    open var _useAlphaFromDiffuseTexture: Any = definedExternally
    open var useAlphaFromDiffuseTexture: Boolean = definedExternally
    open var _useEmissiveAsIllumination: Any = definedExternally
    open var useEmissiveAsIllumination: Boolean = definedExternally
    open var _linkEmissiveWithDiffuse: Any = definedExternally
    open var linkEmissiveWithDiffuse: Boolean = definedExternally
    open var _useSpecularOverAlpha: Any = definedExternally
    open var useSpecularOverAlpha: Boolean = definedExternally
    open var _useReflectionOverAlpha: Any = definedExternally
    open var useReflectionOverAlpha: Boolean = definedExternally
    open var _disableLighting: Any = definedExternally
    open var disableLighting: Boolean = definedExternally
    open var _useObjectSpaceNormalMap: Any = definedExternally
    open var useObjectSpaceNormalMap: Boolean = definedExternally
    open var _useParallax: Any = definedExternally
    open var useParallax: Boolean = definedExternally
    open var _useParallaxOcclusion: Any = definedExternally
    open var useParallaxOcclusion: Boolean = definedExternally
    open var parallaxScaleBias: Number = definedExternally
    open var _roughness: Any = definedExternally
    open var roughness: Number = definedExternally
    open var indexOfRefraction: Number = definedExternally
    open var invertRefractionY: Boolean = definedExternally
    open var alphaCutOff: Number = definedExternally
    open var _useLightmapAsShadowmap: Any = definedExternally
    open var useLightmapAsShadowmap: Boolean = definedExternally
    open var _diffuseFresnelParameters: Any = definedExternally
    open var diffuseFresnelParameters: FresnelParameters = definedExternally
    open var _opacityFresnelParameters: Any = definedExternally
    open var opacityFresnelParameters: FresnelParameters = definedExternally
    open var _reflectionFresnelParameters: Any = definedExternally
    open var reflectionFresnelParameters: FresnelParameters = definedExternally
    open var _refractionFresnelParameters: Any = definedExternally
    open var refractionFresnelParameters: FresnelParameters = definedExternally
    open var _emissiveFresnelParameters: Any = definedExternally
    open var emissiveFresnelParameters: FresnelParameters = definedExternally
    open var _useReflectionFresnelFromSpecular: Any = definedExternally
    open var useReflectionFresnelFromSpecular: Boolean = definedExternally
    open var _useGlossinessFromSpecularMapAlpha: Any = definedExternally
    open var useGlossinessFromSpecularMapAlpha: Boolean = definedExternally
    open var _maxSimultaneousLights: Any = definedExternally
    open var maxSimultaneousLights: Number = definedExternally
    open var _invertNormalMapX: Any = definedExternally
    open var invertNormalMapX: Boolean = definedExternally
    open var _invertNormalMapY: Any = definedExternally
    open var invertNormalMapY: Boolean = definedExternally
    open var _twoSidedLighting: Any = definedExternally
    open var twoSidedLighting: Boolean = definedExternally
    open var _imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var _imageProcessingObserver: Any = definedExternally
    open fun _attachImageProcessingConfiguration(configuration: ImageProcessingConfiguration): Unit = definedExternally
    open var cameraColorCurvesEnabled: Boolean = definedExternally
    open var cameraColorGradingEnabled: Boolean = definedExternally
    open var cameraToneMappingEnabled: Boolean = definedExternally
    open var cameraExposure: Number = definedExternally
    open var cameraContrast: Number = definedExternally
    open var cameraColorGradingTexture: BaseTexture = definedExternally
    open var cameraColorCurves: ColorCurves = definedExternally
    open var customShaderNameResolve: (shaderName: String, uniforms: Array<String>, uniformBuffers: Array<String>, samplers: Array<String>, defines: StandardMaterialDefines) -> String = definedExternally
    open var _renderTargets: SmartArray<RenderTargetTexture> = definedExternally
    open var _worldViewProjectionMatrix: Matrix = definedExternally
    open var _globalAmbientColor: Color3 = definedExternally
    open var _useLogarithmicDepth: Boolean = definedExternally
    override var hasRenderTargetTextures: Boolean = definedExternally
    override fun getClassName(): String = definedExternally
    open var useLogarithmicDepth: Boolean = definedExternally
    override fun needAlphaBlending(): Boolean = definedExternally
    override fun needAlphaTesting(): Boolean = definedExternally
    open fun _shouldUseAlphaFromDiffuseTexture(): Boolean = definedExternally
    override fun getAlphaTestTexture(): BaseTexture = definedExternally
    open fun isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun buildUniformLayout(): Unit = definedExternally
    override fun unbind(): Unit = definedExternally
    override fun bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): Unit = definedExternally
    open fun getAnimatables(): Array<IAnimatable> = definedExternally
    override fun getActiveTextures(): Array<BaseTexture> = definedExternally
    override fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    open fun dispose(forceDisposeEffect: Boolean? = definedExternally /* null */, forceDisposeTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun clone(name: String): StandardMaterial = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        fun Parse(source: Any, scene: Scene, rootUrl: String): StandardMaterial = definedExternally
        var DiffuseTextureEnabled: Boolean = definedExternally
        var AmbientTextureEnabled: Boolean = definedExternally
        var OpacityTextureEnabled: Boolean = definedExternally
        var ReflectionTextureEnabled: Boolean = definedExternally
        var EmissiveTextureEnabled: Boolean = definedExternally
        var SpecularTextureEnabled: Boolean = definedExternally
        var BumpTextureEnabled: Boolean = definedExternally
        var LightmapTextureEnabled: Boolean = definedExternally
        var RefractionTextureEnabled: Boolean = definedExternally
        var ColorGradingTextureEnabled: Boolean = definedExternally
        var FresnelEnabled: Boolean = definedExternally
    }
}
external open class DynamicTexture(name: String, options: Any, scene: Scene?, generateMipMaps: Boolean, samplingMode: Number? = definedExternally /* null */, format: Number? = definedExternally /* null */) : Texture {
    open var _generateMipMaps: Any = definedExternally
    open var _canvas: Any = definedExternally
    open var _context: Any = definedExternally
    open var _engine: Any = definedExternally
    override fun getClassName(): String = definedExternally
    override var canRescale: Boolean = definedExternally
    open var _recreate: Any = definedExternally
    override fun scale(ratio: Number): Unit = definedExternally
    open fun scaleTo(width: Number, height: Number): Unit = definedExternally
    open fun getContext(): CanvasRenderingContext2D = definedExternally
    open fun clear(): Unit = definedExternally
    open fun update(invertY: Boolean? = definedExternally /* null */, premulAlpha: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun drawText(text: String, x: Number, y: Number, font: String, color: String, clearColor: String, invertY: Boolean? = definedExternally /* null */, update: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun clone(): DynamicTexture = definedExternally
    override fun serialize(): Any = definedExternally
    override fun _rebuild(): Unit = definedExternally
}
external object imageProcessingPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class ImageProcessingPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, imageProcessingConfiguration: ImageProcessingConfiguration? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, imageProcessingConfiguration: ImageProcessingConfiguration? = definedExternally /* null */)
    open var _imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var _imageProcessingObserver: Any = definedExternally
    open fun _attachImageProcessingConfiguration(configuration: ImageProcessingConfiguration, doNotBuild: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var colorCurves: ColorCurves = definedExternally
    open var colorCurvesEnabled: Boolean = definedExternally
    open var colorGradingTexture: BaseTexture = definedExternally
    open var colorGradingEnabled: Boolean = definedExternally
    open var exposure: Number = definedExternally
    open var toneMappingEnabled: Boolean = definedExternally
    open var toneMappingType: Number = definedExternally
    open var contrast: Number = definedExternally
    open var vignetteStretch: Number = definedExternally
    open var vignetteCentreX: Number = definedExternally
    open var vignetteCentreY: Number = definedExternally
    open var vignetteWeight: Number = definedExternally
    open var vignetteColor: Color4 = definedExternally
    open var vignetteCameraFov: Number = definedExternally
    open var vignetteBlendMode: Number = definedExternally
    open var vignetteEnabled: Boolean = definedExternally
    open var _fromLinearSpace: Any = definedExternally
    open var fromLinearSpace: Boolean = definedExternally
    open var _defines: Any = definedExternally
    override fun getClassName(): String = definedExternally
    open fun _updateParameters(): Unit = definedExternally
    override fun dispose(camera: Camera?): Unit = definedExternally
}
external interface `T$79` {
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisionsX: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisionsY: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$80` {
    var w: Number
    var h: Number
}
external interface `T$81` {
    var xmin: Number
    var zmin: Number
    var xmax: Number
    var zmax: Number
    var subdivisions: `T$80`? get() = definedExternally; set(value) = definedExternally
    var precision: `T$80`? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$82` {
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var minHeight: Number? get() = definedExternally; set(value) = definedExternally
    var maxHeight: Number? get() = definedExternally; set(value) = definedExternally
    var colorFilter: Color3? get() = definedExternally; set(value) = definedExternally
    var alphaFilter: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var onReady: ((mesh: GroundMesh) -> Unit)? get() = definedExternally; set(value) = definedExternally
}
external open class GroundBuilder {
    companion object {
        fun CreateGround(name: String, options: `T$79`, scene: Any): Mesh = definedExternally
        fun CreateTiledGround(name: String, options: `T$81`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateGroundFromHeightMap(name: String, url: String, options: `T$82`, scene: Scene? = definedExternally /* null */): GroundMesh = definedExternally
    }
}
external interface `T$83` {
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var thickness: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external open class TorusBuilder {
    companion object {
        fun CreateTorus(name: String, options: `T$83`, scene: Any): Mesh = definedExternally
    }
}
external interface `T$84` {
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var diameterTop: Number? get() = definedExternally; set(value) = definedExternally
    var diameterBottom: Number? get() = definedExternally; set(value) = definedExternally
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var hasRings: Boolean? get() = definedExternally; set(value) = definedExternally
    var enclose: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external open class CylinderBuilder {
    companion object {
        fun CreateCylinder(name: String, options: `T$84`, scene: Any): Mesh = definedExternally
    }
}
external interface VRTeleportationOptions {
    var floorMeshName: String? get() = definedExternally; set(value) = definedExternally
    var floorMeshes: Array<Mesh>? get() = definedExternally; set(value) = definedExternally
}
external interface VRExperienceHelperOptions : WebVROptions {
    var createDeviceOrientationCamera: Boolean? get() = definedExternally; set(value) = definedExternally
    var createFallbackVRDeviceOrientationFreeCamera: Boolean? get() = definedExternally; set(value) = definedExternally
    var laserToggle: Boolean? get() = definedExternally; set(value) = definedExternally
    var floorMeshes: Array<Mesh>? get() = definedExternally; set(value) = definedExternally
    var vrDeviceOrientationCameraMetrics: VRCameraMetrics? get() = definedExternally; set(value) = definedExternally
}
external open class OnAfterEnteringVRObservableEvent {
    open var success: Boolean = definedExternally
}
external open class VRExperienceHelper(scene: Scene, webVROptions: VRExperienceHelperOptions? = definedExternally /* null */) {
    open var webVROptions: VRExperienceHelperOptions = definedExternally
    open var _scene: Any = definedExternally
    open var _position: Any = definedExternally
    open var _btnVR: Any = definedExternally
    open var _btnVRDisplayed: Any = definedExternally
    open var _webVRsupported: Any = definedExternally
    open var _webVRready: Any = definedExternally
    open var _webVRrequesting: Any = definedExternally
    open var _webVRpresenting: Any = definedExternally
    open var _hasEnteredVR: Any = definedExternally
    open var _fullscreenVRpresenting: Any = definedExternally
    open var _canvas: Any = definedExternally
    open var _webVRCamera: Any = definedExternally
    open var _vrDeviceOrientationCamera: Any = definedExternally
    open var _deviceOrientationCamera: Any = definedExternally
    open var _existingCamera: Any = definedExternally
    open var _onKeyDown: Any = definedExternally
    open var _onVrDisplayPresentChange: Any = definedExternally
    open var _onVRDisplayChanged: Any = definedExternally
    open var _onVRRequestPresentStart: Any = definedExternally
    open var _onVRRequestPresentComplete: Any = definedExternally
    open var onEnteringVRObservable: Observable<VRExperienceHelper> = definedExternally
    open var onAfterEnteringVRObservable: Observable<OnAfterEnteringVRObservableEvent> = definedExternally
    open var onExitingVRObservable: Observable<VRExperienceHelper> = definedExternally
    open var onControllerMeshLoadedObservable: Observable<WebVRController> = definedExternally
    open var onEnteringVR: Observable<VRExperienceHelper> = definedExternally
    open var onExitingVR: Observable<VRExperienceHelper> = definedExternally
    open var onControllerMeshLoaded: Observable<WebVRController> = definedExternally
    open var _rayLength: Any = definedExternally
    open var _useCustomVRButton: Any = definedExternally
    open var _teleportationRequested: Any = definedExternally
    open var _teleportActive: Any = definedExternally
    open var _floorMeshName: Any = definedExternally
    open var _floorMeshesCollection: Any = definedExternally
    open var _rotationAllowed: Any = definedExternally
    open var _teleportBackwardsVector: Any = definedExternally
    open var _teleportationTarget: Any = definedExternally
    open var _isDefaultTeleportationTarget: Any = definedExternally
    open var _postProcessMove: Any = definedExternally
    open var _teleportationFillColor: Any = definedExternally
    open var _teleportationBorderColor: Any = definedExternally
    open var _rotationAngle: Any = definedExternally
    open var _haloCenter: Any = definedExternally
    open var _cameraGazer: Any = definedExternally
    open var _padSensibilityUp: Any = definedExternally
    open var _padSensibilityDown: Any = definedExternally
    open var _leftController: Any = definedExternally
    open var _rightController: Any = definedExternally
    open var onNewMeshSelected: Observable<AbstractMesh> = definedExternally
    open var onNewMeshPicked: Observable<PickingInfo> = definedExternally
    open var _circleEase: Any = definedExternally
    open var onBeforeCameraTeleport: Observable<Vector3> = definedExternally
    open var onAfterCameraTeleport: Observable<Vector3> = definedExternally
    open var onSelectedMeshUnselected: Observable<AbstractMesh> = definedExternally
    open var _raySelectionPredicate: Any = definedExternally
    open var raySelectionPredicate: (mesh: AbstractMesh) -> Boolean = definedExternally
    open var meshSelectionPredicate: (mesh: AbstractMesh) -> Boolean = definedExternally
    open var teleportationEnabled: Boolean = definedExternally
    open var _defaultHeight: Any = definedExternally
    open var _teleportationInitialized: Any = definedExternally
    open var _interactionsEnabled: Any = definedExternally
    open var _interactionsRequested: Any = definedExternally
    open var _displayGaze: Any = definedExternally
    open var _displayLaserPointer: Any = definedExternally
    open var teleportationTarget: Mesh = definedExternally
    open var gazeTrackerMesh: Mesh = definedExternally
    open var updateGazeTrackerScale: Boolean = definedExternally
    open var updateGazeTrackerColor: Boolean = definedExternally
    open var leftControllerGazeTrackerMesh: Mesh = definedExternally
    open var rightControllerGazeTrackerMesh: Mesh = definedExternally
    open var displayGaze: Boolean = definedExternally
    open var displayLaserPointer: Boolean = definedExternally
    open var deviceOrientationCamera: DeviceOrientationCamera = definedExternally
    open var currentVRCamera: Camera = definedExternally
    open var webVRCamera: WebVRFreeCamera = definedExternally
    open var vrDeviceOrientationCamera: VRDeviceOrientationFreeCamera = definedExternally
    open var _teleportationRequestInitiated: Any = definedExternally
    open var requestPointerLockOnFullScreen: Boolean = definedExternally
    open var _onDefaultMeshLoaded: Any = definedExternally
    open var _onResize: Any = definedExternally
    open var _onFullscreenChange: Any = definedExternally
    open var isInVRMode: Boolean = definedExternally
    open var onVrDisplayPresentChange: Any = definedExternally
    open var onVRDisplayChanged: Any = definedExternally
    open var moveButtonToBottomRight: Any = definedExternally
    open var displayVRButton: Any = definedExternally
    open var updateButtonVisibility: Any = definedExternally
    open var _cachedAngularSensibility: Any = definedExternally
    open fun enterVR(): Unit = definedExternally
    open fun exitVR(): Unit = definedExternally
    open var position: Vector3 = definedExternally
    open fun enableInteractions(): Unit = definedExternally
    open var _noControllerIsActive: Any = definedExternally
    open var beforeRender: Any = definedExternally
    open var _isTeleportationFloor: Any = definedExternally
    open fun addFloorMesh(floorMesh: Mesh): Unit = definedExternally
    open fun removeFloorMesh(floorMesh: Mesh): Unit = definedExternally
    open fun enableTeleportation(vrTeleportationOptions: VRTeleportationOptions? = definedExternally /* null */): Unit = definedExternally
    open var _onNewGamepadConnected: Any = definedExternally
    open var _tryEnableInteractionOnController: Any = definedExternally
    open var _onNewGamepadDisconnected: Any = definedExternally
    open var _enableInteractionOnController: Any = definedExternally
    open var _checkTeleportWithRay: Any = definedExternally
    open var _checkRotate: Any = definedExternally
    open var _checkTeleportBackwards: Any = definedExternally
    open var _enableTeleportationOnController: Any = definedExternally
    open var _createTeleportationCircles: Any = definedExternally
    open var _displayTeleportationTarget: Any = definedExternally
    open var _hideTeleportationTarget: Any = definedExternally
    open var _rotateCamera: Any = definedExternally
    open var _moveTeleportationSelectorTo: Any = definedExternally
    open var _workingVector: Any = definedExternally
    open var _workingQuaternion: Any = definedExternally
    open var _workingMatrix: Any = definedExternally
    open fun teleportCamera(location: Vector3): Unit = definedExternally
    open var _convertNormalToDirectionOfRay: Any = definedExternally
    open var _castRayAndSelectObject: Any = definedExternally
    open var _notifySelectedMeshUnselected: Any = definedExternally
    open fun changeLaserColor(color: Color3): Unit = definedExternally
    open fun changeGazeColor(color: Color3): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun getClassName(): String = definedExternally
}
external open class WebXRSessionManager(scene: Scene) : IDisposable {
    open var scene: Any = definedExternally
    open var onXRFrameObservable: Observable<Any> = definedExternally
    open var onXRSessionEnded: Observable<Any> = definedExternally
    open var _xrSession: XRSession = definedExternally
    open var _frameOfReference: XRFrameOfReference = definedExternally
    open var _sessionRenderTargetTexture: RenderTargetTexture = definedExternally
    open var _currentXRFrame: XRFrame = definedExternally
    open var _xrNavigator: Any = definedExternally
    open var _xrDevice: Any = definedExternally
    open var _tmpMatrix: Any = definedExternally
    open fun initializeAsync(): Promise<Unit> = definedExternally
    open fun enterXRAsync(sessionCreationOptions: XRSessionCreationOptions, frameOfReferenceType: String): Promise<Unit> = definedExternally
    open fun exitXRAsync(): Promise<Unit> = definedExternally
    open fun environmentPointHitTestAsync(ray: Ray): Promise<Vector3> = definedExternally
    open fun supportsSessionAsync(options: XRSessionCreationOptions): Promise<Boolean> = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        fun _CreateRenderTargetTextureFromSession(session: XRSession, scene: Scene): RenderTargetTexture = definedExternally
    }
}
external open class WebXRCamera(name: String, scene: Scene) : FreeCamera {
    open var _updateNumberOfRigCameras: Any = definedExternally
    open fun _updateForDualEyeDebugging(pupilDistance: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateFromXRSessionManager(xrSessionManager: WebXRSessionManager): Boolean = definedExternally
    companion object {
        var _TmpMatrix: Any = definedExternally
    }
}
external enum class WebXRState {
    ENTERING_XR /* = 0 */,
    EXITING_XR /* = 1 */,
    IN_XR /* = 2 */,
    NOT_IN_XR /* = 3 */
}
external open class WebXRExperienceHelper : IDisposable {
    open var scene: Any = definedExternally
    open var container: AbstractMesh = definedExternally
    open var camera: WebXRCamera = definedExternally
    open var state: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ */ = definedExternally
    open var _setState: Any = definedExternally
    open var onStateChangedObservable: Observable<dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ */> = definedExternally
    open var _sessionManager: WebXRSessionManager = definedExternally
    open var _nonVRCamera: Any = definedExternally
    open var _originalSceneAutoClear: Any = definedExternally
    open var _supported: Any = definedExternally
    open fun exitXRAsync(): Promise<Unit> = definedExternally
    open fun enterXRAsync(sessionCreationOptions: XRSessionCreationOptions, frameOfReference: String): Promise<Unit> = definedExternally
    open fun environmentPointHitTestAsync(ray: Ray): Promise<Vector3> = definedExternally
    open fun setPositionOfCameraUsingContainer(position: Vector3): Unit = definedExternally
    open fun rotateCameraByQuaternionUsingContainer(rotation: Quaternion): Unit = definedExternally
    open fun supportsSessionAsync(options: XRSessionCreationOptions): Promise<Boolean> = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        var _TmpVector: Any = definedExternally
        fun CreateAsync(scene: Scene): Promise<WebXRExperienceHelper> = definedExternally
    }
}
external open class WebXREnterExitUIButton(element: HTMLElement, initializationOptions: XRSessionCreationOptions) {
    open var element: HTMLElement = definedExternally
    open var initializationOptions: XRSessionCreationOptions = definedExternally
    open fun update(activeButton: WebXREnterExitUIButton): Unit = definedExternally
}
external open class WebXREnterExitUIOptions {
    open var outputCanvasContext: WebGLRenderingContext = definedExternally
    open var customButtons: Array<WebXREnterExitUIButton> = definedExternally
}
external open class WebXREnterExitUI : IDisposable {
    open var scene: Any = definedExternally
    open var _overlay: Any = definedExternally
    open var _buttons: Any = definedExternally
    open var _activeButton: Any = definedExternally
    open var activeButtonChangedObservable: Observable<WebXREnterExitUIButton> = definedExternally
    open var _updateButtons: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        fun CreateAsync(scene: Scene, helper: WebXRExperienceHelper, options: WebXREnterExitUIOptions): Promise<WebXREnterExitUI> = definedExternally
    }
}
external open class WebXRController(scene: Scene) {
    open var grip: AbstractMesh = definedExternally
    open var pointer: AbstractMesh = definedExternally
    open fun dispose(): Unit = definedExternally
}
external open class WebXRInput(helper: WebXRExperienceHelper) : IDisposable {
    open var helper: Any = definedExternally
    open var controllers: Array<WebXRController> = definedExternally
    open var _tmpMatrix: Any = definedExternally
    open var _frameObserver: Any = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class WebXRManagedOutputCanvas(helper: WebXRExperienceHelper, canvas: HTMLCanvasElement? = definedExternally /* null */) : IDisposable {
    open var _canvas: Any = definedExternally
    open var canvasContext: WebGLRenderingContext = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _setManagedOutputCanvas: Any = definedExternally
    open var _addCanvas: Any = definedExternally
    open var _removeCanvas: Any = definedExternally
}
external interface IOctreeContainer<T> {
    var blocks: Array<OctreeBlock<T>>
}
external open class OctreeBlock<T>(minPoint: Vector3, maxPoint: Vector3, capacity: Number, depth: Number, maxDepth: Number, creationFunc: (entry: T, block: OctreeBlock<T>) -> Unit) {
    open var entries: Array<T> = definedExternally
    open var blocks: Array<OctreeBlock<T>> = definedExternally
    open var _depth: Any = definedExternally
    open var _maxDepth: Any = definedExternally
    open var _capacity: Any = definedExternally
    open var _minPoint: Any = definedExternally
    open var _maxPoint: Any = definedExternally
    open var _boundingVectors: Any = definedExternally
    open var _creationFunc: Any = definedExternally
    open var capacity: Number = definedExternally
    open var minPoint: Vector3 = definedExternally
    open var maxPoint: Vector3 = definedExternally
    open fun addEntry(entry: T): Unit = definedExternally
    open fun removeEntry(entry: T): Unit = definedExternally
    open fun addEntries(entries: Array<T>): Unit = definedExternally
    open fun select(frustumPlanes: Array<Plane>, selection: SmartArrayNoDuplicate<T>, allowDuplicate: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun intersects(sphereCenter: Vector3, sphereRadius: Number, selection: SmartArrayNoDuplicate<T>, allowDuplicate: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun intersectsRay(ray: Ray, selection: SmartArrayNoDuplicate<T>): Unit = definedExternally
    open fun createInnerBlocks(): Unit = definedExternally
    companion object {
        fun <T> _CreateBlocks(worldMin: Vector3, worldMax: Vector3, entries: Array<T>, maxBlockCapacity: Number, currentDepth: Number, maxDepth: Number, target: IOctreeContainer<T>, creationFunc: (entry: T, block: OctreeBlock<T>) -> Unit): Unit = definedExternally
    }
}
external open class Octree<T>(creationFunc: (entry: T, block: OctreeBlock<T>) -> Unit, maxBlockCapacity: Number? = definedExternally /* null */, maxDepth: Number? = definedExternally /* null */) {
    open var maxDepth: Number = definedExternally
    open var blocks: Array<OctreeBlock<T>> = definedExternally
    open var dynamicContent: Array<T> = definedExternally
    open var _maxBlockCapacity: Any = definedExternally
    open var _selectionContent: Any = definedExternally
    open var _creationFunc: Any = definedExternally
    open fun update(worldMin: Vector3, worldMax: Vector3, entries: Array<T>): Unit = definedExternally
    open fun addMesh(entry: T): Unit = definedExternally
    open fun removeMesh(entry: T): Unit = definedExternally
    open fun select(frustumPlanes: Array<Plane>, allowDuplicate: Boolean? = definedExternally /* null */): SmartArray<T> = definedExternally
    open fun intersects(sphereCenter: Vector3, sphereRadius: Number, allowDuplicate: Boolean? = definedExternally /* null */): SmartArray<T> = definedExternally
    open fun intersectsRay(ray: Ray): SmartArray<T> = definedExternally
    companion object {
        var CreationFuncForMeshes: (entry: AbstractMesh, block: OctreeBlock<AbstractMesh>) -> Unit = definedExternally
        var CreationFuncForSubMeshes: (entry: SubMesh, block: OctreeBlock<SubMesh>) -> Unit = definedExternally
    }
}
external open class OctreeSceneComponent(scene: Scene) {
    open var name: String = definedExternally
    open var scene: Scene = definedExternally
    open var checksIsEnabled: Boolean = definedExternally
    open fun register(): Unit = definedExternally
    open fun getActiveMeshCandidates(): ISmartArrayLike<AbstractMesh> = definedExternally
    open fun getActiveSubMeshCandidates(mesh: AbstractMesh): ISmartArrayLike<SubMesh> = definedExternally
    open var _tempRay: Any = definedExternally
    open fun getIntersectingSubMeshCandidates(mesh: AbstractMesh, localRay: Ray): ISmartArrayLike<SubMesh> = definedExternally
    open fun getCollidingSubMeshCandidates(mesh: AbstractMesh, collider: Collider): ISmartArrayLike<SubMesh> = definedExternally
    open fun rebuild(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
}
external open class UtilityLayerRenderer(originalScene: Scene, handleEvents: Boolean? = definedExternally /* null */) : IDisposable {
    open var originalScene: Scene = definedExternally
    open var _pointerCaptures: Any = definedExternally
    open var _lastPointerEvents: Any = definedExternally
    open var _sharedGizmoLight: Any = definedExternally
    open fun _getSharedGizmoLight(): HemisphericLight = definedExternally
    open var pickUtilitySceneFirst: Boolean = definedExternally
    open var utilityLayerScene: Scene = definedExternally
    open var shouldRender: Boolean = definedExternally
    open var onlyCheckPointerDownEvents: Boolean = definedExternally
    open var processAllEvents: Boolean = definedExternally
    open var onPointerOutObservable: Observable<Number> = definedExternally
    open var mainSceneTrackerPredicate: (mesh: AbstractMesh) -> Boolean = definedExternally
    open var _afterRenderObserver: Any = definedExternally
    open var _sceneDisposeObserver: Any = definedExternally
    open var _originalPointerObserver: Any = definedExternally
    open var _notifyObservers: Any = definedExternally
    open fun render(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _updateCamera: Any = definedExternally
    companion object {
        var _DefaultUtilityLayer: Any = definedExternally
        var _DefaultKeepDepthUtilityLayer: Any = definedExternally
        var DefaultUtilityLayer: UtilityLayerRenderer = definedExternally
        var DefaultKeepDepthUtilityLayer: UtilityLayerRenderer = definedExternally
    }
}
external open class Gizmo(gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */) : IDisposable {
    open var gizmoLayer: UtilityLayerRenderer = definedExternally
    open var _rootMesh: Mesh = definedExternally
    open var _attachedMesh: Any = definedExternally
    open var scaleRatio: Number = definedExternally
    open var _customMeshSet: Boolean = definedExternally
    open var attachedMesh: AbstractMesh = definedExternally
    open fun setCustomMesh(mesh: Mesh): Unit = definedExternally
    open var updateGizmoRotationToMatchAttachedMesh: Boolean = definedExternally
    open var updateGizmoPositionToMatchAttachedMesh: Boolean = definedExternally
    open var _updateScale: Boolean = definedExternally
    open var _interactionsEnabled: Boolean = definedExternally
    open fun _attachedMeshChanged(value: AbstractMesh): Unit = definedExternally
    open var _beforeRenderObserver: Any = definedExternally
    open var _tempVector: Any = definedExternally
    open fun _update(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
}
external interface `T$85` {
    var snapDistance: Number
}
external open class AxisDragGizmo(dragAxis: Vector3, color: Color3? = definedExternally /* null */, gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */) : Gizmo {
    open var dragBehavior: PointerDragBehavior = definedExternally
    open var _pointerObserver: Any = definedExternally
    open var snapDistance: Number = definedExternally
    open var onSnapObservable: Observable<`T$85`> = definedExternally
    override fun _attachedMeshChanged(value: AbstractMesh): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        fun _CreateArrow(scene: Scene, material: StandardMaterial): TransformNode = definedExternally
        fun _CreateArrowInstance(scene: Scene, arrow: TransformNode): TransformNode = definedExternally
    }
}
external interface IExplorerExtensibilityOption {
    var label: String
    var action: (entity: Any) -> Unit
}
external interface IExplorerExtensibilityGroup {
    var predicate: (entity: Any) -> Boolean
    var entries: Array<IExplorerExtensibilityOption>
}
external interface IInspectorOptions {
    var overlay: Boolean? get() = definedExternally; set(value) = definedExternally
    var globalRoot: HTMLElement? get() = definedExternally; set(value) = definedExternally
    var showExplorer: Boolean? get() = definedExternally; set(value) = definedExternally
    var showInspector: Boolean? get() = definedExternally; set(value) = definedExternally
    var embedMode: Boolean? get() = definedExternally; set(value) = definedExternally
    var handleResize: Boolean? get() = definedExternally; set(value) = definedExternally
    var enablePopup: Boolean? get() = definedExternally; set(value) = definedExternally
    var enableClose: Boolean? get() = definedExternally; set(value) = definedExternally
    var explorerExtensibility: Array<IExplorerExtensibilityGroup>? get() = definedExternally; set(value) = definedExternally
    var inspectorURL: String? get() = definedExternally; set(value) = definedExternally
}
external interface `T$86` {
    var `object`: Any
    var property: String
    var value: Any
    var initialValue: Any
}
external open class DebugLayer(scene: Scene) {
    open var _scene: Any = definedExternally
    open var BJSINSPECTOR: Any = definedExternally
    open var onPropertyChangedObservable: Observable<`T$86`> = definedExternally
    open var _createInspector: Any = definedExternally
    open fun select(entity: Any, lineContainerTitle: String? = definedExternally /* null */): Unit = definedExternally
    open var _getGlobalInspector: Any = definedExternally
    open fun isVisible(): Boolean = definedExternally
    open fun hide(): Unit = definedExternally
    open fun show(config: IInspectorOptions? = definedExternally /* null */): Promise<DebugLayer> = definedExternally
    companion object {
        var InspectorURL: String = definedExternally
    }
}
external interface `T$87` {
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var depth: Number? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var wrap: Boolean? get() = definedExternally; set(value) = definedExternally
    var topBaseAt: Number? get() = definedExternally; set(value) = definedExternally
    var bottomBaseAt: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class BoxBuilder {
    companion object {
        fun CreateBox(name: String, options: `T$87`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$88` {
    var segments: Number? get() = definedExternally; set(value) = definedExternally
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var diameterX: Number? get() = definedExternally; set(value) = definedExternally
    var diameterY: Number? get() = definedExternally; set(value) = definedExternally
    var diameterZ: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var slice: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class SphereBuilder {
    companion object {
        fun CreateSphere(name: String, options: `T$88`, scene: Any): Mesh = definedExternally
    }
}
external interface `T$89` {
    var lines: Array<Array<Vector3>>
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var instance: LinesMesh? get() = definedExternally; set(value) = definedExternally
    var colors: Array<Array<Color4>>? get() = definedExternally; set(value) = definedExternally
    var useVertexAlpha: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$90` {
    var points: Array<Vector3>
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var instance: LinesMesh? get() = definedExternally; set(value) = definedExternally
    var colors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var useVertexAlpha: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$91` {
    var points: Array<Vector3>
    var dashSize: Number? get() = definedExternally; set(value) = definedExternally
    var gapSize: Number? get() = definedExternally; set(value) = definedExternally
    var dashNb: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var instance: LinesMesh? get() = definedExternally; set(value) = definedExternally
}
external open class LinesBuilder {
    companion object {
        fun CreateLineSystem(name: String, options: `T$89`, scene: Scene): LinesMesh = definedExternally
        fun CreateLines(name: String, options: `T$90`, scene: Scene? = definedExternally /* null */): LinesMesh = definedExternally
        fun CreateDashedLines(name: String, options: `T$91`, scene: Scene? = definedExternally /* null */): LinesMesh = definedExternally
    }
}
external open class RayHelper(ray: Ray) {
    open var ray: Ray = definedExternally
    open var _renderPoints: Any = definedExternally
    open var _renderLine: Any = definedExternally
    open var _renderFunction: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _updateToMeshFunction: Any = definedExternally
    open var _attachedToMesh: Any = definedExternally
    open var _meshSpaceDirection: Any = definedExternally
    open var _meshSpaceOrigin: Any = definedExternally
    open fun show(scene: Scene, color: Color3? = definedExternally /* null */): Unit = definedExternally
    open fun hide(): Unit = definedExternally
    open var _render: Any = definedExternally
    open fun attachToMesh(mesh: AbstractMesh, meshSpaceDirection: Vector3? = definedExternally /* null */, meshSpaceOrigin: Vector3? = definedExternally /* null */, length: Number? = definedExternally /* null */): Unit = definedExternally
    open fun detachFromMesh(): Unit = definedExternally
    open var _updateToMesh: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        fun CreateAndShow(ray: Ray, scene: Scene, color: Color3): RayHelper = definedExternally
    }
}
external open class NullEngineOptions {
    open var renderWidth: Number = definedExternally
    open var renderHeight: Number = definedExternally
    open var textureSize: Number = definedExternally
    open var deterministicLockstep: Boolean = definedExternally
    open var lockstepMaxSteps: Number = definedExternally
}
external interface `T$92` {
    @nativeGetter
    operator fun get(key: String): VertexBuffer?
    @nativeSetter
    operator fun set(key: String, value: VertexBuffer)
}
external open class NullEngine(options: NullEngineOptions? = definedExternally /* null */) : Engine {
    open var _options: Any = definedExternally
    override fun isDeterministicLockStep(): Boolean = definedExternally
    override fun getLockstepMaxSteps(): Number = definedExternally
    override fun getHardwareScalingLevel(): Number = definedExternally
	override fun createVertexBuffer(vertices: Array<Number>): DataBuffer = definedExternally
    open fun createVertexBuffer(vertices: Float32Array): DataBuffer = definedExternally
    open fun createIndexBuffer(indices: Array<Number>): DataBuffer = definedExternally
    open fun createIndexBuffer(indices: Int32Array): DataBuffer = definedExternally
    open fun createIndexBuffer(indices: Uint32Array): DataBuffer = definedExternally
    open fun createIndexBuffer(indices: Uint16Array): DataBuffer = definedExternally
    override fun clear(color: Color4, backBuffer: Boolean, depth: Boolean, stencil: Boolean?): Unit = definedExternally
    override fun getRenderWidth(useScreen: Boolean?): Number = definedExternally
    override fun getRenderHeight(useScreen: Boolean?): Number = definedExternally
    override fun setViewport(viewport: Viewport, requiredWidth: Number?, requiredHeight: Number?): Unit = definedExternally
    open fun createShaderProgram(pipelineContext: IPipelineContext, vertexCode: String, fragmentCode: String, defines: String, context: WebGLRenderingContext? = definedExternally /* null */): WebGLProgram = definedExternally
    override fun getUniforms(pipelineContext: IPipelineContext, uniformsNames: Array<String>): Array<WebGLUniformLocation> = definedExternally
    override fun getAttributes(pipelineContext: IPipelineContext, attributesNames: Array<String>): Array<Number> = definedExternally
    override fun bindSamplers(effect: Effect): Unit = definedExternally
    override fun enableEffect(effect: Effect): Unit = definedExternally
    override fun setState(culling: Boolean, zOffset: Number?, force: Boolean?, reverseSide: Boolean?): Unit = definedExternally
    override fun setIntArray(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    override fun setIntArray2(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    override fun setIntArray3(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    override fun setIntArray4(uniform: WebGLUniformLocation, array: Int32Array): Unit = definedExternally
    override fun setFloatArray(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    override fun setFloatArray2(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    override fun setFloatArray3(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    override fun setFloatArray4(uniform: WebGLUniformLocation, array: Float32Array): Unit = definedExternally
    override fun setArray(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    override fun setArray2(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    override fun setArray3(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    override fun setArray4(uniform: WebGLUniformLocation, array: Array<Number>): Unit = definedExternally
    override fun setMatrices(uniform: WebGLUniformLocation, matrices: Float32Array): Unit = definedExternally
    override fun setMatrix(uniform: WebGLUniformLocation, matrix: Matrix): Unit = definedExternally
    override fun setMatrix3x3(uniform: WebGLUniformLocation, matrix: Float32Array): Unit = definedExternally
    override fun setMatrix2x2(uniform: WebGLUniformLocation, matrix: Float32Array): Unit = definedExternally
    override fun setFloat(uniform: WebGLUniformLocation, value: Number): Unit = definedExternally
    override fun setFloat2(uniform: WebGLUniformLocation, x: Number, y: Number): Unit = definedExternally
    override fun setFloat3(uniform: WebGLUniformLocation, x: Number, y: Number, z: Number): Unit = definedExternally
    override fun setBool(uniform: WebGLUniformLocation, bool: Number): Unit = definedExternally
    override fun setFloat4(uniform: WebGLUniformLocation, x: Number, y: Number, z: Number, w: Number): Unit = definedExternally
    override fun setColor3(uniform: WebGLUniformLocation, color3: Color3): Unit = definedExternally
    override fun setColor4(uniform: WebGLUniformLocation, color3: Color3, alpha: Number): Unit = definedExternally
    override fun setAlphaMode(mode: Number, noDepthWriteChange: Boolean?): Unit = definedExternally
    open fun bindBuffers(vertexBuffers: `T$92`, indexBuffer: DataBuffer, effect: Effect): Unit = definedExternally
    override fun wipeCaches(bruteForce: Boolean?): Unit = definedExternally
    override fun draw(useTriangles: Boolean, indexStart: Number, indexCount: Number, instancesCount: Number?): Unit = definedExternally
    override fun drawElementsType(fillMode: Number, indexStart: Number, indexCount: Number, instancesCount: Number?): Unit = definedExternally
    override fun drawArraysType(fillMode: Number, verticesStart: Number, verticesCount: Number, instancesCount: Number?): Unit = definedExternally
    override fun _createTexture(): WebGLTexture = definedExternally
    override fun _releaseTexture(texture: InternalTexture): Unit = definedExternally
    open fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String, exception: Any) -> Unit)? = definedExternally /* null */, buffer: HTMLImageElement? = definedExternally /* null */, fallBack: InternalTexture? = definedExternally /* null */, format: Number? = definedExternally /* null */): InternalTexture = definedExternally
    open fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene, samplingMode: Number? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String, exception: Any) -> Unit)? = definedExternally /* null */, buffer: ArrayBuffer? = definedExternally /* null */, fallBack: InternalTexture? = definedExternally /* null */, format: Number? = definedExternally /* null */): InternalTexture = definedExternally
    open fun createRenderTargetTexture(size: Any, options: Boolean): InternalTexture = definedExternally
    open fun createRenderTargetTexture(size: Any, options: RenderTargetCreationOptions): InternalTexture = definedExternally
    override fun updateTextureSamplingMode(samplingMode: Number, texture: InternalTexture): Unit = definedExternally
    open fun bindFramebuffer(texture: InternalTexture, faceIndex: Number? = definedExternally /* null */, requiredWidth: Number? = definedExternally /* null */, requiredHeight: Number? = definedExternally /* null */, forceFullscreenViewport: Boolean? = definedExternally /* null */): Unit = definedExternally
	override fun unBindFramebuffer(texture: InternalTexture, disableGenerateMipMaps: Boolean?  /* null */, onBeforeUnbind: (() -> Unit)?  /* null */): Unit = definedExternally
	override fun createDynamicVertexBuffer(vertices: Array<Number>): DataBuffer = definedExternally
    open fun createDynamicVertexBuffer(vertices: Float32Array): DataBuffer = definedExternally
    open fun updateDynamicTexture(texture: InternalTexture, canvas: HTMLCanvasElement, invertY: Boolean, premulAlpha: Boolean? = definedExternally /* null */, format: Number? = definedExternally /* null */): Unit = definedExternally
    override fun areAllEffectsReady(): Boolean = definedExternally
    override fun getError(): Number = definedExternally
    override fun _getUnpackAlignement(): Number = definedExternally
    override fun _unpackFlipY(value: Boolean): Unit = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: WebGLBuffer, indices: Array<Number>, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: WebGLBuffer, indices: Int32Array, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: WebGLBuffer, indices: Uint32Array, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicIndexBuffer(indexBuffer: WebGLBuffer, indices: Uint16Array, offset: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicVertexBuffer(vertexBuffer: WebGLBuffer, vertices: Array<Number>, byteOffset: Number? = definedExternally /* null */, byteLength: Number? = definedExternally /* null */): Unit = definedExternally
    open fun updateDynamicVertexBuffer(vertexBuffer: WebGLBuffer, vertices: Float32Array, byteOffset: Number? = definedExternally /* null */, byteLength: Number? = definedExternally /* null */): Unit = definedExternally
    open fun _bindTextureDirectly(target: Number, texture: InternalTexture): Boolean = definedExternally
    override fun _bindTexture(channel: Number, texture: InternalTexture): Unit = definedExternally
    override fun _releaseBuffer(buffer: DataBuffer): Boolean = definedExternally
    override fun releaseEffects(): Unit = definedExternally
    override fun displayLoadingUI(): Unit = definedExternally
    override fun hideLoadingUI(): Unit = definedExternally
    override fun _uploadCompressedDataToTextureDirectly(texture: InternalTexture, internalFormat: Number, width: Number, height: Number, data: ArrayBufferView, faceIndex: Number?, lod: Number?): Unit = definedExternally
    override fun _uploadDataToTextureDirectly(texture: InternalTexture, imageData: ArrayBufferView, faceIndex: Number?, lod: Number?): Unit = definedExternally
    override fun _uploadArrayBufferViewToTexture(texture: InternalTexture, imageData: ArrayBufferView, faceIndex: Number?, lod: Number?): Unit = definedExternally
    override fun _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement, faceIndex: Number?, lod: Number?): Unit = definedExternally
	override fun createTexture(urlArg: String, noMipmap: Boolean, invertY: Boolean, scene: Scene): InternalTexture = definedExternally
}
external open class _OcclusionDataStorage {
    open var occlusionInternalRetryCounter: Number = definedExternally
    open var isOcclusionQueryInProgress: Boolean = definedExternally
    open var isOccluded: Boolean = definedExternally
    open var occlusionRetryCount: Number = definedExternally
    open var occlusionType: Number = definedExternally
    open var occlusionQueryAlgorithmType: Number = definedExternally
}
external var _forceTransformFeedbackToBundle: Boolean = definedExternally
external interface IMultiRenderTargetOptions {
    var generateMipMaps: Boolean? get() = definedExternally; set(value) = definedExternally
    var types: Array<Number>? get() = definedExternally; set(value) = definedExternally
    var samplingModes: Array<Number>? get() = definedExternally; set(value) = definedExternally
    var generateDepthBuffer: Boolean? get() = definedExternally; set(value) = definedExternally
    var generateStencilBuffer: Boolean? get() = definedExternally; set(value) = definedExternally
    var generateDepthTexture: Boolean? get() = definedExternally; set(value) = definedExternally
    var textureCount: Number? get() = definedExternally; set(value) = definedExternally
    var doNotChangeAspectRatio: Boolean? get() = definedExternally; set(value) = definedExternally
    var defaultType: Number? get() = definedExternally; set(value) = definedExternally
}
external open class MultiRenderTarget(name: String, size: Any, count: Number, scene: Scene, options: IMultiRenderTargetOptions? = definedExternally /* null */) : RenderTargetTexture {
    open var _internalTextures: Any = definedExternally
    open var _textures: Any = definedExternally
    open var _multiRenderTargetOptions: Any = definedExternally
    open var isSupported: Boolean = definedExternally
    open var textures: Array<Texture> = definedExternally
    open var depthTexture: Texture = definedExternally
    override var wrapU: Number = definedExternally
    override var wrapV: Number = definedExternally
    override fun _rebuild(): Unit = definedExternally
    open var _createInternalTextures: Any = definedExternally
    open var _createTextures: Any = definedExternally
    override var samples: Number = definedExternally
    open fun resize(size: Any): Unit = definedExternally
    override fun unbindFrameBuffer(engine: Engine, faceIndex: Number): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun releaseInternalTextures(): Unit = definedExternally
}
external open class ClipboardEventTypes {
    companion object {
        var COPY: Number = definedExternally
        var CUT: Number = definedExternally
        var PASTE: Number = definedExternally
    }
}
external open class ClipboardInfo(type: Number, event: ClipboardEvent) {
    open var type: Number = definedExternally
    open var event: ClipboardEvent = definedExternally
    companion object {
        fun GetTypeFromCharacter(keyCode: Number): Number = definedExternally
    }
}
external open class SceneLoaderProgressEvent(lengthComputable: Boolean, loaded: Number, total: Number) {
    open var lengthComputable: Boolean = definedExternally
    open var loaded: Number = definedExternally
    open var total: Number = definedExternally
    companion object {
        fun FromProgressEvent(event: ProgressEvent): SceneLoaderProgressEvent = definedExternally
    }
}
external interface `T$93` {
    var isBinary: Boolean
}
external interface ISceneLoaderPluginExtensions {
    @nativeGetter
    operator fun get(extension: String): `T$93`?
    @nativeSetter
    operator fun set(extension: String, value: `T$93`)
}
external interface ISceneLoaderPluginFactory {
    var name: String
    fun createPlugin(): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */
    var canDirectLoad: ((data: String) -> Boolean)? get() = definedExternally; set(value) = definedExternally
}
external interface ISceneLoaderPlugin {
    var name: String
    var extensions: dynamic /* String | ISceneLoaderPluginExtensions */
    fun importMesh(meshesNames: Any, scene: Scene, data: Any, rootUrl: String, meshes: Array<AbstractMesh>, particleSystems: Array<IParticleSystem>, skeletons: Array<Skeleton>, onError: ((message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */): Boolean
    fun load(scene: Scene, data: String, rootUrl: String, onError: ((message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */): Boolean
    var canDirectLoad: ((data: String) -> Boolean)? get() = definedExternally; set(value) = definedExternally
    var rewriteRootURL: ((rootUrl: String, responseURL: String? /*= null*/) -> String)? get() = definedExternally; set(value) = definedExternally
    fun loadAssetContainer(scene: Scene, data: String, rootUrl: String, onError: ((message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */): AssetContainer
}
external interface `T$94` {
    var meshes: Array<AbstractMesh>
    var particleSystems: Array<IParticleSystem>
    var skeletons: Array<Skeleton>
    var animationGroups: Array<AnimationGroup>
}
external interface ISceneLoaderPluginAsync {
    var name: String
    var extensions: dynamic /* String | ISceneLoaderPluginExtensions */
    fun importMeshAsync(meshesNames: Any, scene: Scene, data: Any, rootUrl: String, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, fileName: String? = definedExternally /* null */): Promise<`T$94`>
    fun loadAsync(scene: Scene, data: String, rootUrl: String, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, fileName: String? = definedExternally /* null */): Promise<Unit>
    var canDirectLoad: ((data: String) -> Boolean)? get() = definedExternally; set(value) = definedExternally
    var rewriteRootURL: ((rootUrl: String, responseURL: String? /*= null*/) -> String)? get() = definedExternally; set(value) = definedExternally
    fun loadAssetContainerAsync(scene: Scene, data: String, rootUrl: String, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, fileName: String? = definedExternally /* null */): Promise<AssetContainer>
}
external open class SceneLoader {
    companion object {
        var NO_LOGGING: Number = definedExternally
        var MINIMAL_LOGGING: Number = definedExternally
        var SUMMARY_LOGGING: Number = definedExternally
        var DETAILED_LOGGING: Number = definedExternally
        var ForceFullSceneLoadingForIncremental: Boolean = definedExternally
        var ShowLoadingScreen: Boolean = definedExternally
        var loggingLevel: Number = definedExternally
        var CleanBoneMatrixWeights: Boolean = definedExternally
        var OnPluginActivatedObservable: Observable<dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */> = definedExternally
        var _registeredPlugins: Any = definedExternally
        var _getDefaultPlugin: Any = definedExternally
        var _getPluginForExtension: Any = definedExternally
        var _getPluginForDirectLoad: Any = definedExternally
        var _getPluginForFilename: Any = definedExternally
        var _getDirectLoad: Any = definedExternally
        var _loadData: Any = definedExternally
        var _getFileInfo: Any = definedExternally
        fun GetPluginForExtension(extension: String): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory */ = definedExternally
        fun IsPluginForExtensionAvailable(extension: String): Boolean = definedExternally
        fun RegisterPlugin(plugin: ISceneLoaderPlugin): Unit = definedExternally
        fun RegisterPlugin(plugin: ISceneLoaderPluginAsync): Unit = definedExternally
        fun ImportMesh(meshNames: Any, rootUrl: String, sceneFilename: String? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onSuccess: ((meshes: Array<AbstractMesh>, particleSystems: Array<IParticleSystem>, skeletons: Array<Skeleton>, animationGroups: Array<AnimationGroup>) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun ImportMesh(meshNames: Any, rootUrl: String, sceneFilename: File? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onSuccess: ((meshes: Array<AbstractMesh>, particleSystems: Array<IParticleSystem>, skeletons: Array<Skeleton>, animationGroups: Array<AnimationGroup>) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun ImportMeshAsync(meshNames: Any, rootUrl: String, sceneFilename: String? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): Promise<`T$94`> = definedExternally
        fun ImportMeshAsync(meshNames: Any, rootUrl: String, sceneFilename: File? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): Promise<`T$94`> = definedExternally
        fun Load(rootUrl: String, sceneFilename: String? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, onSuccess: ((scene: Scene) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun Load(rootUrl: String, sceneFilename: File? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, onSuccess: ((scene: Scene) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun LoadAsync(rootUrl: String, sceneFilename: String? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): Promise<Scene> = definedExternally
        fun LoadAsync(rootUrl: String, sceneFilename: File? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): Promise<Scene> = definedExternally
        fun Append(rootUrl: String, sceneFilename: String? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onSuccess: ((scene: Scene) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun Append(rootUrl: String, sceneFilename: File? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onSuccess: ((scene: Scene) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun AppendAsync(rootUrl: String, sceneFilename: String? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): Promise<Scene> = definedExternally
        fun AppendAsync(rootUrl: String, sceneFilename: File? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): Promise<Scene> = definedExternally
        fun LoadAssetContainer(rootUrl: String, sceneFilename: String? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onSuccess: ((assets: AssetContainer) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun LoadAssetContainer(rootUrl: String, sceneFilename: File? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onSuccess: ((assets: AssetContainer) -> Unit)? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, onError: ((scene: Scene, message: String, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun LoadAssetContainerAsync(rootUrl: String, sceneFilename: String? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, onProgress: ((event: SceneLoaderProgressEvent) -> Unit)? = definedExternally /* null */, pluginExtension: String? = definedExternally /* null */): Promise<AssetContainer> = definedExternally
        fun ImportMesh(meshNames: Any, rootUrl: String): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun ImportMeshAsync(meshNames: Any, rootUrl: String): Promise<`T$94`> = definedExternally
        fun Load(rootUrl: String): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun LoadAsync(rootUrl: String): Promise<Scene> = definedExternally
        fun Append(rootUrl: String): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
        fun AppendAsync(rootUrl: String): Promise<Scene> = definedExternally
        fun LoadAssetContainer(rootUrl: String): dynamic /* ISceneLoaderPlugin | ISceneLoaderPluginAsync */ = definedExternally
    }
}
external open class DaydreamController(vrGamepad: Any) : WebVRController {
	override fun initControllerMesh(scene: Scene, meshLoaded: ((mesh: AbstractMesh) -> Unit)?  /* null */): Unit = definedExternally
    override fun _handleButtonChange(buttonIdx: Number, state: ExtendedGamepadButton, changes: GamepadButtonChanges): Unit = definedExternally
    companion object {
        var MODEL_BASE_URL: String = definedExternally
        var MODEL_FILENAME: String = definedExternally
        var GAMEPAD_ID_PREFIX: String = definedExternally
    }
}
external open class GearVRController(vrGamepad: Any) : WebVRController {
    open var _buttonIndexToObservableNameMap: Any = definedExternally
	override fun initControllerMesh(scene: Scene, meshLoaded: ((mesh: AbstractMesh) -> Unit)?  /* null */): Unit = definedExternally
    override fun _handleButtonChange(buttonIdx: Number, state: ExtendedGamepadButton, changes: GamepadButtonChanges): Unit = definedExternally
    companion object {
        var MODEL_BASE_URL: String = definedExternally
        var MODEL_FILENAME: String = definedExternally
        var GAMEPAD_ID_PREFIX: String = definedExternally
    }
}
external open class GenericController(vrGamepad: Any) : WebVRController {
	override fun initControllerMesh(scene: Scene, meshLoaded: ((mesh: AbstractMesh) -> Unit)?  /* null */): Unit = definedExternally
    override fun _handleButtonChange(buttonIdx: Number, state: ExtendedGamepadButton, changes: GamepadButtonChanges): Unit = definedExternally
    companion object {
        var MODEL_BASE_URL: String = definedExternally
        var MODEL_FILENAME: String = definedExternally
    }
}
external open class OculusTouchController(vrGamepad: Any) : WebVRController {
    open var onSecondaryTriggerStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onThumbRestChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
	override fun initControllerMesh(scene: Scene, meshLoaded: ((mesh: AbstractMesh) -> Unit)?  /* null */): Unit = definedExternally
    open var onAButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onBButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onXButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onYButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    override fun _handleButtonChange(buttonIdx: Number, state: ExtendedGamepadButton, changes: GamepadButtonChanges): Unit = definedExternally
    companion object {
        var MODEL_BASE_URL: String = definedExternally
        var MODEL_LEFT_FILENAME: String = definedExternally
        var MODEL_RIGHT_FILENAME: String = definedExternally
    }
}
external open class ViveController(vrGamepad: Any) : WebVRController {
	override fun initControllerMesh(scene: Scene, meshLoaded: ((mesh: AbstractMesh) -> Unit)?  /* null */): Unit = definedExternally
    open var onLeftButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onRightButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onMenuButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    override fun _handleButtonChange(buttonIdx: Number, state: ExtendedGamepadButton, changes: GamepadButtonChanges): Unit = definedExternally
    companion object {
        var MODEL_BASE_URL: String = definedExternally
        var MODEL_FILENAME: String = definedExternally
    }
}
external open class WindowsMotionController(vrGamepad: Any) : WebVRController {
    open var _loadedMeshInfo: Any = definedExternally
    open var _mapping: Any = definedExternally
    open var onTrackpadChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onTrackpadValuesChangedObservable: Observable<StickValues> = definedExternally
    open var trackpad: StickValues = definedExternally
    open var onTriggerButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onMenuButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onGripButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onThumbstickButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onTouchpadButtonStateChangedObservable: Observable<ExtendedGamepadButton> = definedExternally
    open var onTouchpadValuesChangedObservable: Observable<StickValues> = definedExternally
    open var _updateTrackpad: Any = definedExternally
    override fun update(): Unit = definedExternally
    override fun _handleButtonChange(buttonIdx: Number, state: ExtendedGamepadButton, changes: GamepadButtonChanges): Unit = definedExternally
    open fun _lerpButtonTransform(buttonName: String, buttonValue: Number): Unit = definedExternally
    open fun _lerpAxisTransform(axis: Number, axisValue: Number): Unit = definedExternally
    open fun initControllerMesh(scene: Scene, meshLoaded: ((mesh: AbstractMesh) -> Unit)? = definedExternally /* null */, forceDefault: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var processModel: Any = definedExternally
    open var createMeshInfo: Any = definedExternally
    override fun getForwardRay(length: Number?): Ray = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        var MODEL_BASE_URL: String = definedExternally
        var MODEL_LEFT_FILENAME: String = definedExternally
        var MODEL_RIGHT_FILENAME: String = definedExternally
        var GAMEPAD_ID_PREFIX: String = definedExternally
        var GAMEPAD_ID_PATTERN: Any = definedExternally
    }
}
external interface `T$95` {
    var snapDistance: Number
}
external open class AxisScaleGizmo(dragAxis: Vector3, color: Color3? = definedExternally /* null */, gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */) : Gizmo {
    open var _coloredMaterial: Any = definedExternally
    open var dragBehavior: PointerDragBehavior = definedExternally
    open var _pointerObserver: Any = definedExternally
    open var snapDistance: Number = definedExternally
    open var onSnapObservable: Observable<`T$95`> = definedExternally
    open var uniformScaling: Boolean = definedExternally
    override fun _attachedMeshChanged(value: AbstractMesh): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun setCustomMesh(mesh: Mesh, useGizmoMaterial: Boolean? = definedExternally /* null */): Unit = definedExternally
}
external open class BoundingBoxGizmo(color: Color3? = definedExternally /* null */, gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */) : Gizmo {
    open var _lineBoundingBox: Any = definedExternally
    open var _rotateSpheresParent: Any = definedExternally
    open var _scaleBoxesParent: Any = definedExternally
    open var _boundingDimensions: Any = definedExternally
    open var _renderObserver: Any = definedExternally
    open var _pointerObserver: Any = definedExternally
    open var _scaleDragSpeed: Any = definedExternally
    open var _tmpQuaternion: Any = definedExternally
    open var _tmpVector: Any = definedExternally
    open var _tmpRotationMatrix: Any = definedExternally
    open var ignoreChildren: Boolean = definedExternally
    open var includeChildPredicate: (abstractMesh: AbstractMesh) -> Boolean = definedExternally
    open var rotationSphereSize: Number = definedExternally
    open var scaleBoxSize: Number = definedExternally
    open var fixedDragMeshScreenSize: Boolean = definedExternally
    open var fixedDragMeshScreenSizeDistanceFactor: Number = definedExternally
    open var onDragStartObservable: Observable<Any> = definedExternally
    open var onScaleBoxDragObservable: Observable<Any> = definedExternally
    open var onScaleBoxDragEndObservable: Observable<Any> = definedExternally
    open var onRotationSphereDragObservable: Observable<Any> = definedExternally
    open var onRotationSphereDragEndObservable: Observable<Any> = definedExternally
    open var scalePivot: Vector3 = definedExternally
    open var _anchorMesh: Any = definedExternally
    open var _existingMeshScale: Any = definedExternally
    open var _dragMesh: Any = definedExternally
    open var pointerDragBehavior: Any = definedExternally
    open var coloredMaterial: Any = definedExternally
    open var hoverColoredMaterial: Any = definedExternally
    open fun setColor(color: Color3): Unit = definedExternally
    override fun _attachedMeshChanged(value: AbstractMesh): Unit = definedExternally
    open var _selectNode: Any = definedExternally
    open fun updateBoundingBox(): Unit = definedExternally
    open var _updateRotationSpheres: Any = definedExternally
    open var _updateScaleBoxes: Any = definedExternally
    open fun setEnabledRotationAxis(axis: String): Unit = definedExternally
    open fun setEnabledScaling(enable: Boolean): Unit = definedExternally
    open var _updateDummy: Any = definedExternally
    open fun enableDragBehavior(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun setCustomMesh(mesh: Mesh): Unit = definedExternally
    companion object {
        fun MakeNotPickableAndWrapInBoundingBox(mesh: Mesh): Mesh = definedExternally
    }
}
external interface `T$96` {
    var snapDistance: Number
}
external open class PlaneRotationGizmo(planeNormal: Vector3, color: Color3? = definedExternally /* null */, gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */, tessellation: Number? = definedExternally /* null */) : Gizmo {
    open var dragBehavior: PointerDragBehavior = definedExternally
    open var _pointerObserver: Any = definedExternally
    open var snapDistance: Number = definedExternally
    open var onSnapObservable: Observable<`T$96`> = definedExternally
    override fun _attachedMeshChanged(value: AbstractMesh): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class RotationGizmo(gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */, tessellation: Number? = definedExternally /* null */) : Gizmo {
    open var xGizmo: PlaneRotationGizmo = definedExternally
    open var yGizmo: PlaneRotationGizmo = definedExternally
    open var zGizmo: PlaneRotationGizmo = definedExternally
    open var onDragStartObservable: Observable<Any> = definedExternally
    open var onDragEndObservable: Observable<Any> = definedExternally
    override var attachedMesh: AbstractMesh = definedExternally
    override var updateGizmoRotationToMatchAttachedMesh: Boolean = definedExternally
    open var snapDistance: Number = definedExternally
    override var scaleRatio: Number = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun setCustomMesh(mesh: Mesh): Unit = definedExternally
}
external open class PositionGizmo(gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */) : Gizmo {
    open var xGizmo: AxisDragGizmo = definedExternally
    open var yGizmo: AxisDragGizmo = definedExternally
    open var zGizmo: AxisDragGizmo = definedExternally
    open var onDragStartObservable: Observable<Any> = definedExternally
    open var onDragEndObservable: Observable<Any> = definedExternally
    override var attachedMesh: AbstractMesh = definedExternally
    override var updateGizmoRotationToMatchAttachedMesh: Boolean = definedExternally
    open var snapDistance: Number = definedExternally
    override var scaleRatio: Number = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun setCustomMesh(mesh: Mesh): Unit = definedExternally
}
external interface `T$97` {
    var type: Number? get() = definedExternally; set(value) = definedExternally
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var sizeX: Number? get() = definedExternally; set(value) = definedExternally
    var sizeY: Number? get() = definedExternally; set(value) = definedExternally
    var sizeZ: Number? get() = definedExternally; set(value) = definedExternally
    var custom: Any? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var flat: Boolean? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external open class PolyhedronBuilder {
    companion object {
        fun CreatePolyhedron(name: String, options: `T$97`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external open class ScaleGizmo(gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */) : Gizmo {
    open var xGizmo: AxisScaleGizmo = definedExternally
    open var yGizmo: AxisScaleGizmo = definedExternally
    open var zGizmo: AxisScaleGizmo = definedExternally
    open var uniformScaleGizmo: AxisScaleGizmo = definedExternally
    open var onDragStartObservable: Observable<Any> = definedExternally
    open var onDragEndObservable: Observable<Any> = definedExternally
    override var attachedMesh: AbstractMesh = definedExternally
    override var updateGizmoRotationToMatchAttachedMesh: Boolean = definedExternally
    open var snapDistance: Number = definedExternally
    override var scaleRatio: Number = definedExternally
    override fun dispose(): Unit = definedExternally
}
external interface `T$98` {
    var positionGizmo: PositionGizmo
    var rotationGizmo: RotationGizmo
    var scaleGizmo: ScaleGizmo
    var boundingBoxGizmo: BoundingBoxGizmo
}
external open class GizmoManager(scene: Scene) : IDisposable {
    open var scene: Any = definedExternally
    open var gizmos: `T$98` = definedExternally
    open var clearGizmoOnEmptyPointerEvent: Boolean = definedExternally
    open var onAttachedToMeshObservable: Observable<AbstractMesh> = definedExternally
    open var _gizmosEnabled: Any = definedExternally
    open var _pointerObserver: Any = definedExternally
    open var _attachedMesh: Any = definedExternally
    open var _boundingBoxColor: Any = definedExternally
    open var _defaultUtilityLayer: Any = definedExternally
    open var _defaultKeepDepthUtilityLayer: Any = definedExternally
    open var boundingBoxDragBehavior: SixDofDragBehavior = definedExternally
    open var attachableMeshes: Array<AbstractMesh> = definedExternally
    open var usePointerToAttachGizmos: Boolean = definedExternally
    open fun attachToMesh(mesh: AbstractMesh): Unit = definedExternally
    open var positionGizmoEnabled: Boolean = definedExternally
    open var rotationGizmoEnabled: Boolean = definedExternally
    open var scaleGizmoEnabled: Boolean = definedExternally
    open var boundingBoxGizmoEnabled: Boolean = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class DirectionalLight(name: String, direction: Vector3, scene: Scene) : ShadowLight {
    open var _shadowFrustumSize: Any = definedExternally
    open var shadowFrustumSize: Number = definedExternally
    open var _shadowOrthoScale: Any = definedExternally
    open var shadowOrthoScale: Number = definedExternally
    open var autoUpdateExtends: Boolean = definedExternally
    open var _orthoLeft: Any = definedExternally
    open var _orthoRight: Any = definedExternally
    open var _orthoTop: Any = definedExternally
    open var _orthoBottom: Any = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getTypeID(): Number = definedExternally
    override fun _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): Unit = definedExternally
    open fun _setDefaultFixedFrustumShadowProjectionMatrix(matrix: Matrix): Unit = definedExternally
    open fun _setDefaultAutoExtendShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): Unit = definedExternally
    override fun _buildUniformLayout(): Unit = definedExternally
    override fun transferToEffect(effect: Effect, lightIndex: String): DirectionalLight = definedExternally
    override fun getDepthMinZ(activeCamera: Camera): Number = definedExternally
    override fun getDepthMaxZ(activeCamera: Camera): Number = definedExternally
    override fun prepareLightSpecificDefines(defines: Any, lightIndex: Number): Unit = definedExternally
}
external interface `T$99` {
    var segments: Number? get() = definedExternally; set(value) = definedExternally
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
}
external open class HemisphereBuilder {
    companion object {
        fun CreateHemisphere(name: String, options: `T$99`, scene: Any): Mesh = definedExternally
    }
}
external open class SpotLight(name: String, position: Vector3, direction: Vector3, angle: Number, exponent: Number, scene: Scene) : ShadowLight {
    open var _angle: Any = definedExternally
    open var _innerAngle: Any = definedExternally
    open var _cosHalfAngle: Any = definedExternally
    open var _lightAngleScale: Any = definedExternally
    open var _lightAngleOffset: Any = definedExternally
    open var angle: Number = definedExternally
    open var innerAngle: Number = definedExternally
    open var _shadowAngleScale: Any = definedExternally
    open var shadowAngleScale: Number = definedExternally
    open var exponent: Number = definedExternally
    open var _projectionTextureMatrix: Any = definedExternally
    open var projectionTextureMatrix: Matrix = definedExternally
    open var _projectionTextureLightNear: Number = definedExternally
    open var projectionTextureLightNear: Number = definedExternally
    open var _projectionTextureLightFar: Number = definedExternally
    open var projectionTextureLightFar: Number = definedExternally
    open var _projectionTextureUpDirection: Vector3 = definedExternally
    open var projectionTextureUpDirection: Vector3 = definedExternally
    open var _projectionTexture: Any = definedExternally
    open var projectionTexture: BaseTexture = definedExternally
    open var _projectionTextureViewLightDirty: Any = definedExternally
    open var _projectionTextureProjectionLightDirty: Any = definedExternally
    open var _projectionTextureDirty: Any = definedExternally
    open var _projectionTextureViewTargetVector: Any = definedExternally
    open var _projectionTextureViewLightMatrix: Any = definedExternally
    open var _projectionTextureProjectionLightMatrix: Any = definedExternally
    open var _projectionTextureScalingMatrix: Any = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getTypeID(): Number = definedExternally
    override fun _setDirection(value: Vector3): Unit = definedExternally
    override fun _setPosition(value: Vector3): Unit = definedExternally
    override fun _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): Unit = definedExternally
    open fun _computeProjectionTextureViewLightMatrix(): Unit = definedExternally
    open fun _computeProjectionTextureProjectionLightMatrix(): Unit = definedExternally
    open fun _computeProjectionTextureMatrix(): Unit = definedExternally
    override fun _buildUniformLayout(): Unit = definedExternally
    open var _computeAngleValues: Any = definedExternally
    override fun transferToEffect(effect: Effect, lightIndex: String): SpotLight = definedExternally
    open fun dispose(): Unit = definedExternally
    override fun prepareLightSpecificDefines(defines: Any, lightIndex: Number): Unit = definedExternally
}
external open class LightGizmo(gizmoLayer: UtilityLayerRenderer? = definedExternally /* null */) : Gizmo {
    open var _lightMesh: Any = definedExternally
    open var _material: Any = definedExternally
    open var cachedPosition: Any = definedExternally
    open var cachedForward: Any = definedExternally
    open var _light: Any = definedExternally
    open var light: Light = definedExternally
    override fun _update(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        var _Scale: Any = definedExternally
        var _createLightLines: Any = definedExternally
        var _CreateHemisphericLightMesh: Any = definedExternally
        var _CreatePointLightMesh: Any = definedExternally
        var _CreateSpotLightMesh: Any = definedExternally
        var _CreateDirectionalLightMesh: Any = definedExternally
    }
}
external object backgroundFragmentDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object backgroundUboDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object backgroundPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object backgroundVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object backgroundVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class BackgroundMaterial(name: String, scene: Scene) : PushMaterial {
    open var _primaryColor: Color3 = definedExternally
    open var primaryColor: Color3 = definedExternally
    open var __perceptualColor: Color3 = definedExternally
    open var _perceptualColor: Color3 = definedExternally
    open var _primaryColorShadowLevel: Number = definedExternally
    open var primaryColorShadowLevel: Number = definedExternally
    open var _primaryColorHighlightLevel: Number = definedExternally
    open var primaryColorHighlightLevel: Number = definedExternally
    open var _reflectionTexture: BaseTexture = definedExternally
    open var reflectionTexture: BaseTexture = definedExternally
    open var _reflectionBlur: Number = definedExternally
    open var reflectionBlur: Number = definedExternally
    open var _diffuseTexture: BaseTexture = definedExternally
    open var diffuseTexture: BaseTexture = definedExternally
    open var _shadowLights: Array<IShadowLight> = definedExternally
    open var shadowLights: Array<IShadowLight> = definedExternally
    open var _shadowLevel: Number = definedExternally
    open var shadowLevel: Number = definedExternally
    open var _sceneCenter: Vector3 = definedExternally
    open var sceneCenter: Vector3 = definedExternally
    open var _opacityFresnel: Boolean = definedExternally
    open var opacityFresnel: Boolean = definedExternally
    open var _reflectionFresnel: Boolean = definedExternally
    open var reflectionFresnel: Boolean = definedExternally
    open var _reflectionFalloffDistance: Number = definedExternally
    open var reflectionFalloffDistance: Number = definedExternally
    open var _reflectionAmount: Number = definedExternally
    open var reflectionAmount: Number = definedExternally
    open var _reflectionReflectance0: Number = definedExternally
    open var reflectionReflectance0: Number = definedExternally
    open var _reflectionReflectance90: Number = definedExternally
    open var reflectionReflectance90: Number = definedExternally
    open var reflectionStandardFresnelWeight: Number = definedExternally
    open var _useRGBColor: Boolean = definedExternally
    open var useRGBColor: Boolean = definedExternally
    open var _enableNoise: Boolean = definedExternally
    open var enableNoise: Boolean = definedExternally
    open var fovMultiplier: Number = definedExternally
    open var _fovMultiplier: Any = definedExternally
    open var useEquirectangularFOV: Boolean = definedExternally
    open var _maxSimultaneousLights: Any = definedExternally
    open var maxSimultaneousLights: Number = definedExternally
    open var _imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var _imageProcessingObserver: Any = definedExternally
    open fun _attachImageProcessingConfiguration(configuration: ImageProcessingConfiguration): Unit = definedExternally
    open var imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var cameraColorCurvesEnabled: Boolean = definedExternally
    open var cameraColorGradingEnabled: Boolean = definedExternally
    open var cameraToneMappingEnabled: Boolean = definedExternally
    open var cameraExposure: Number = definedExternally
    open var cameraContrast: Number = definedExternally
    open var cameraColorGradingTexture: BaseTexture = definedExternally
    open var cameraColorCurves: ColorCurves = definedExternally
    open var switchToBGR: Boolean = definedExternally
    open var _renderTargets: Any = definedExternally
    open var _reflectionControls: Any = definedExternally
    open var _white: Any = definedExternally
    open var _primaryShadowColor: Any = definedExternally
    open var _primaryHighlightColor: Any = definedExternally
    override var hasRenderTargetTextures: Boolean = definedExternally
    override fun needAlphaTesting(): Boolean = definedExternally
    override fun needAlphaBlending(): Boolean = definedExternally
    open fun isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open var _computePrimaryColorFromPerceptualColor: Any = definedExternally
    open var _computePrimaryColors: Any = definedExternally
    open fun buildUniformLayout(): Unit = definedExternally
    override fun unbind(): Unit = definedExternally
    override fun bindOnlyWorldMatrix(world: Matrix): Unit = definedExternally
    override fun bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): Unit = definedExternally
    open fun dispose(forceDisposeEffect: Boolean? = definedExternally /* null */, forceDisposeTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    override fun clone(name: String): BackgroundMaterial = definedExternally
    override fun serialize(): Any = definedExternally
    override fun getClassName(): String = definedExternally
    companion object {
        var StandardReflectance0: Number = definedExternally
        var StandardReflectance90: Number = definedExternally
        fun Parse(source: Any, scene: Scene, rootUrl: String): BackgroundMaterial = definedExternally
    }
}
external interface IEnvironmentHelperOptions {
    var createGround: Boolean
    var groundSize: Number
    var groundTexture: dynamic /* String | BaseTexture */
    var groundColor: Color3
    var groundOpacity: Number
    var enableGroundShadow: Boolean
    var groundShadowLevel: Number
    var enableGroundMirror: Boolean
    var groundMirrorSizeRatio: Number
    var groundMirrorBlurKernel: Number
    var groundMirrorAmount: Number
    var groundMirrorFresnelWeight: Number
    var groundMirrorFallOffDistance: Number
    var groundMirrorTextureType: Number
    var groundYBias: Number
    var createSkybox: Boolean
    var skyboxSize: Number
    var skyboxTexture: dynamic /* String | BaseTexture */
    var skyboxColor: Color3
    var backgroundYRotation: Number
    var sizeAuto: Boolean
    var rootPosition: Vector3
    var setupImageProcessing: Boolean
    var environmentTexture: dynamic /* String | BaseTexture */
    var cameraExposure: Number
    var cameraContrast: Number
    var toneMappingEnabled: Boolean
}
external interface `T$100` {
    var message: String? get() = definedExternally; set(value) = definedExternally
    var exception: Any? get() = definedExternally; set(value) = definedExternally
}
external open class EnvironmentHelper(options: Any?, scene: Scene) {
    open var _rootMesh: Any = definedExternally
    open var rootMesh: Mesh = definedExternally
    open var _skybox: Any = definedExternally
    open var skybox: Mesh = definedExternally
    open var _skyboxTexture: Any = definedExternally
    open var skyboxTexture: BaseTexture = definedExternally
    open var _skyboxMaterial: Any = definedExternally
    open var skyboxMaterial: BackgroundMaterial = definedExternally
    open var _ground: Any = definedExternally
    open var ground: Mesh = definedExternally
    open var _groundTexture: Any = definedExternally
    open var groundTexture: BaseTexture = definedExternally
    open var _groundMirror: Any = definedExternally
    open var groundMirror: MirrorTexture = definedExternally
    open var groundMirrorRenderList: Array<AbstractMesh> = definedExternally
    open var _groundMaterial: Any = definedExternally
    open var groundMaterial: BackgroundMaterial = definedExternally
    open var _scene: Any = definedExternally
    open var _options: Any = definedExternally
    open var onErrorObservable: Observable<`T$100`> = definedExternally
    open fun updateOptions(options: Any?): Unit = definedExternally
    open fun setMainColor(color: Color3): Unit = definedExternally
    open var _setupImageProcessing: Any = definedExternally
    open var _setupEnvironmentTexture: Any = definedExternally
    open var _setupBackground: Any = definedExternally
    open var _getSceneSize: Any = definedExternally
    open var _setupGround: Any = definedExternally
    open var _setupGroundMaterial: Any = definedExternally
    open var _setupGroundDiffuseTexture: Any = definedExternally
    open var _setupGroundMirrorTexture: Any = definedExternally
    open var _setupMirrorInGroundMaterial: Any = definedExternally
    open var _setupSkybox: Any = definedExternally
    open var _setupSkyboxMaterial: Any = definedExternally
    open var _setupSkyboxReflectionTexture: Any = definedExternally
    open var _errorHandler: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        var _groundTextureCDNUrl: Any = definedExternally
        var _skyboxTextureCDNUrl: Any = definedExternally
        var _environmentTextureCDNUrl: Any = definedExternally
        var _getDefaultOptions: Any = definedExternally
    }
}
external interface `T$101` {
    var resolution: Number? get() = definedExternally; set(value) = definedExternally
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var useDirectMapping: Boolean? get() = definedExternally; set(value) = definedExternally
    var faceForward: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class PhotoDome(name: String, urlOfPhoto: String, options: `T$101`, scene: Scene, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */) : TransformNode {
    open var _useDirectMapping: Any = definedExternally
    open var _photoTexture: Texture = definedExternally
    open var photoTexture: Texture = definedExternally
    open var onLoadErrorObservable: Observable<String> = definedExternally
    open var _material: BackgroundMaterial = definedExternally
    open var _mesh: Mesh = definedExternally
    open var fovMultiplier: Number = definedExternally
    override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
}
external object rgbdDecodePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class BRDFTextureTools {
    companion object {
        var _ExpandDefaultBRDFTexture: Any = definedExternally
        fun GetEnvironmentBRDFTexture(scene: Scene): BaseTexture = definedExternally
        var _environmentBRDFBase64Texture: Any = definedExternally
    }
}
external interface IMaterialClearCoatDefines {
    var CLEARCOAT: Boolean
    var CLEARCOAT_DEFAULTIOR: Boolean
    var CLEARCOAT_TEXTURE: Boolean
    var CLEARCOAT_TEXTUREDIRECTUV: Number
    var CLEARCOAT_BUMP: Boolean
    var CLEARCOAT_BUMPDIRECTUV: Number
    var CLEARCOAT_TINT: Boolean
    var CLEARCOAT_TINT_TEXTURE: Boolean
    var CLEARCOAT_TINT_TEXTUREDIRECTUV: Number
    var _areTexturesDirty: Boolean
}
external open class PBRClearCoatConfiguration(markAllSubMeshesAsTexturesDirty: () -> Unit) {
    open var _isEnabled: Any = definedExternally
    open var isEnabled: Boolean = definedExternally
    open var intensity: Number = definedExternally
    open var roughness: Number = definedExternally
    open var _indiceOfRefraction: Any = definedExternally
    open var indiceOfRefraction: Number = definedExternally
    open var _texture: Any = definedExternally
    open var texture: BaseTexture = definedExternally
    open var _bumpTexture: Any = definedExternally
    open var bumpTexture: BaseTexture = definedExternally
    open var _isTintEnabled: Any = definedExternally
    open var isTintEnabled: Boolean = definedExternally
    open var tintColor: Color3 = definedExternally
    open var tintColorAtDistance: Number = definedExternally
    open var tintThickness: Number = definedExternally
    open var _tintTexture: Any = definedExternally
    open var tintTexture: BaseTexture = definedExternally
    open var _internalMarkAllSubMeshesAsTexturesDirty: Any = definedExternally
    open fun _markAllSubMeshesAsTexturesDirty(): Unit = definedExternally
    open fun isReadyForSubMesh(defines: IMaterialClearCoatDefines, scene: Scene, engine: Engine, disableBumpMap: Boolean): Boolean = definedExternally
    open fun prepareDefines(defines: IMaterialClearCoatDefines, scene: Scene): Unit = definedExternally
    open fun bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, disableBumpMap: Boolean, isFrozen: Boolean, invertNormalMapX: Boolean, invertNormalMapY: Boolean): Unit = definedExternally
    open fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    open fun getActiveTextures(activeTextures: Array<BaseTexture>): Unit = definedExternally
    open fun getAnimatables(animatables: Array<IAnimatable>): Unit = definedExternally
    open fun dispose(forceDisposeTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    open fun copyTo(clearCoatConfiguration: PBRClearCoatConfiguration): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun parse(source: Any): Unit = definedExternally
    companion object {
        var _DefaultIndiceOfRefraction: Any = definedExternally
        fun AddFallbacks(defines: IMaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: Number): Number = definedExternally
        fun AddUniforms(uniforms: Array<String>): Unit = definedExternally
        fun AddSamplers(samplers: Array<String>): Unit = definedExternally
        fun PrepareUniformBuffer(uniformBuffer: UniformBuffer): Unit = definedExternally
    }
}
external interface IMaterialAnisotropicDefines {
    var ANISOTROPIC: Boolean
    var ANISOTROPIC_TEXTURE: Boolean
    var ANISOTROPIC_TEXTUREDIRECTUV: Number
    var MAINUV1: Boolean
    var _areTexturesDirty: Boolean
    var _needUVs: Boolean
}
external open class PBRAnisotropicConfiguration(markAllSubMeshesAsTexturesDirty: () -> Unit) {
    open var _isEnabled: Any = definedExternally
    open var isEnabled: Boolean = definedExternally
    open var intensity: Number = definedExternally
    open var direction: Vector2 = definedExternally
    open var _texture: Any = definedExternally
    open var texture: BaseTexture = definedExternally
    open var _internalMarkAllSubMeshesAsTexturesDirty: Any = definedExternally
    open fun _markAllSubMeshesAsTexturesDirty(): Unit = definedExternally
    open fun isReadyForSubMesh(defines: IMaterialAnisotropicDefines, scene: Scene): Boolean = definedExternally
    open fun prepareDefines(defines: IMaterialAnisotropicDefines, mesh: AbstractMesh, scene: Scene): Unit = definedExternally
    open fun bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, isFrozen: Boolean): Unit = definedExternally
    open fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    open fun getActiveTextures(activeTextures: Array<BaseTexture>): Unit = definedExternally
    open fun getAnimatables(animatables: Array<IAnimatable>): Unit = definedExternally
    open fun dispose(forceDisposeTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    open fun copyTo(anisotropicConfiguration: PBRAnisotropicConfiguration): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun parse(source: Any): Unit = definedExternally
    companion object {
        fun AddFallbacks(defines: IMaterialAnisotropicDefines, fallbacks: EffectFallbacks, currentRank: Number): Number = definedExternally
        fun AddUniforms(uniforms: Array<String>): Unit = definedExternally
        fun PrepareUniformBuffer(uniformBuffer: UniformBuffer): Unit = definedExternally
        fun AddSamplers(samplers: Array<String>): Unit = definedExternally
    }
}
external interface IMaterialBRDFDefines {
    var BRDF_V_HEIGHT_CORRELATED: Boolean
    var MS_BRDF_ENERGY_CONSERVATION: Boolean
    var SPHERICAL_HARMONICS: Boolean
    var _areMiscDirty: Boolean
}
external open class PBRBRDFConfiguration(markAllSubMeshesAsMiscDirty: () -> Unit) {
    open var _useEnergyConservation: Any = definedExternally
    open var useEnergyConservation: Boolean = definedExternally
    open var _useSmithVisibilityHeightCorrelated: Any = definedExternally
    open var useSmithVisibilityHeightCorrelated: Boolean = definedExternally
    open var _useSphericalHarmonics: Any = definedExternally
    open var useSphericalHarmonics: Boolean = definedExternally
    open var _internalMarkAllSubMeshesAsMiscDirty: Any = definedExternally
    open fun _markAllSubMeshesAsMiscDirty(): Unit = definedExternally
    open fun prepareDefines(defines: IMaterialBRDFDefines): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    open fun copyTo(brdfConfiguration: PBRBRDFConfiguration): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun parse(source: Any): Unit = definedExternally
    companion object {
        var DEFAULT_USE_ENERGY_CONSERVATION: Boolean = definedExternally
        var DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED: Boolean = definedExternally
        var DEFAULT_USE_SPHERICAL_HARMONICS: Boolean = definedExternally
    }
}
external interface IMaterialSheenDefines {
    var SHEEN: Boolean
    var SHEEN_TEXTURE: Boolean
    var SHEEN_TEXTUREDIRECTUV: Number
    var SHEEN_LINKWITHALBEDO: Boolean
    var _areTexturesDirty: Boolean
}
external open class PBRSheenConfiguration(markAllSubMeshesAsTexturesDirty: () -> Unit) {
    open var _isEnabled: Any = definedExternally
    open var isEnabled: Boolean = definedExternally
    open var _linkSheenWithAlbedo: Any = definedExternally
    open var linkSheenWithAlbedo: Boolean = definedExternally
    open var intensity: Number = definedExternally
    open var color: Color3 = definedExternally
    open var _texture: Any = definedExternally
    open var texture: BaseTexture = definedExternally
    open var _internalMarkAllSubMeshesAsTexturesDirty: Any = definedExternally
    open fun _markAllSubMeshesAsTexturesDirty(): Unit = definedExternally
    open fun isReadyForSubMesh(defines: IMaterialSheenDefines, scene: Scene): Boolean = definedExternally
    open fun prepareDefines(defines: IMaterialSheenDefines, scene: Scene): Unit = definedExternally
    open fun bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, isFrozen: Boolean): Unit = definedExternally
    open fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    open fun getActiveTextures(activeTextures: Array<BaseTexture>): Unit = definedExternally
    open fun getAnimatables(animatables: Array<IAnimatable>): Unit = definedExternally
    open fun dispose(forceDisposeTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    open fun copyTo(sheenConfiguration: PBRSheenConfiguration): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun parse(source: Any): Unit = definedExternally
    companion object {
        fun AddFallbacks(defines: IMaterialSheenDefines, fallbacks: EffectFallbacks, currentRank: Number): Number = definedExternally
        fun AddUniforms(uniforms: Array<String>): Unit = definedExternally
        fun PrepareUniformBuffer(uniformBuffer: UniformBuffer): Unit = definedExternally
        fun AddSamplers(samplers: Array<String>): Unit = definedExternally
    }
}
external interface IMaterialSubSurfaceDefines {
    var SUBSURFACE: Boolean
    var SS_REFRACTION: Boolean
    var SS_TRANSLUCENCY: Boolean
    var SS_SCATERRING: Boolean
    var SS_THICKNESSANDMASK_TEXTURE: Boolean
    var SS_THICKNESSANDMASK_TEXTUREDIRECTUV: Number
    var SS_REFRACTIONMAP_3D: Boolean
    var SS_REFRACTIONMAP_OPPOSITEZ: Boolean
    var SS_LODINREFRACTIONALPHA: Boolean
    var SS_GAMMAREFRACTION: Boolean
    var SS_RGBDREFRACTION: Boolean
    var SS_LINKREFRACTIONTOTRANSPARENCY: Boolean
    var SS_MASK_FROM_THICKNESS_TEXTURE: Boolean
    var _areTexturesDirty: Boolean
}
external open class PBRSubSurfaceConfiguration(markAllSubMeshesAsTexturesDirty: () -> Unit) {
    open var _isRefractionEnabled: Any = definedExternally
    open var isRefractionEnabled: Boolean = definedExternally
    open var _isTranslucencyEnabled: Any = definedExternally
    open var isTranslucencyEnabled: Boolean = definedExternally
    open var _isScatteringEnabled: Any = definedExternally
    open var refractionIntensity: Number = definedExternally
    open var translucencyIntensity: Number = definedExternally
    open var scatteringIntensity: Number = definedExternally
    open var _thicknessTexture: Any = definedExternally
    open var thicknessTexture: BaseTexture = definedExternally
    open var _refractionTexture: Any = definedExternally
    open var refractionTexture: BaseTexture = definedExternally
    open var _indexOfRefraction: Any = definedExternally
    open var indexOfRefraction: Number = definedExternally
    open var _invertRefractionY: Any = definedExternally
    open var invertRefractionY: Boolean = definedExternally
    open var _linkRefractionWithTransparency: Any = definedExternally
    open var linkRefractionWithTransparency: Boolean = definedExternally
    open var minimumThickness: Number = definedExternally
    open var maximumThickness: Number = definedExternally
    open var tintColor: Color3 = definedExternally
    open var tintColorAtDistance: Number = definedExternally
    open var diffusionDistance: Color3 = definedExternally
    open var _useMaskFromThicknessTexture: Any = definedExternally
    open var useMaskFromThicknessTexture: Boolean = definedExternally
    open var _internalMarkAllSubMeshesAsTexturesDirty: Any = definedExternally
    open fun _markAllSubMeshesAsTexturesDirty(): Unit = definedExternally
    open fun isReadyForSubMesh(defines: IMaterialSubSurfaceDefines, scene: Scene): Boolean = definedExternally
    open fun prepareDefines(defines: IMaterialSubSurfaceDefines, scene: Scene): Unit = definedExternally
    open fun bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, isFrozen: Boolean, lodBasedMicrosurface: Boolean): Unit = definedExternally
    open fun unbind(activeEffect: Effect): Boolean = definedExternally
    open var _getRefractionTexture: Any = definedExternally
    open var disableAlphaBlending: Boolean = definedExternally
    open fun fillRenderTargetTextures(renderTargets: SmartArray<RenderTargetTexture>): Unit = definedExternally
    open fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    open fun hasRenderTargetTextures(): Boolean = definedExternally
    open fun getActiveTextures(activeTextures: Array<BaseTexture>): Unit = definedExternally
    open fun getAnimatables(animatables: Array<IAnimatable>): Unit = definedExternally
    open fun dispose(forceDisposeTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    open fun copyTo(configuration: PBRSubSurfaceConfiguration): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun parse(source: Any): Unit = definedExternally
    companion object {
        fun AddFallbacks(defines: IMaterialSubSurfaceDefines, fallbacks: EffectFallbacks, currentRank: Number): Number = definedExternally
        fun AddUniforms(uniforms: Array<String>): Unit = definedExternally
        fun AddSamplers(samplers: Array<String>): Unit = definedExternally
        fun PrepareUniformBuffer(uniformBuffer: UniformBuffer): Unit = definedExternally
    }
}
external object pbrFragmentDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrUboDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrFragmentExtraDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrFragmentSamplersDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrHelperFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object harmonicsFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrDirectLightingSetupFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrDirectLightingFalloffFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrBRDFFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrDirectLightingFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrIBLFunctions {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrDebug {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pbrVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class PBRMaterialDefines : MaterialDefines, IImageProcessingConfigurationDefines, IMaterialClearCoatDefines, IMaterialAnisotropicDefines, IMaterialBRDFDefines, IMaterialSheenDefines, IMaterialSubSurfaceDefines {
    open var PBR: Boolean = definedExternally
    override var MAINUV1: Boolean = definedExternally
    open var MAINUV2: Boolean = definedExternally
    open var UV1: Boolean = definedExternally
    open var UV2: Boolean = definedExternally
    open var ALBEDO: Boolean = definedExternally
    open var ALBEDODIRECTUV: Number = definedExternally
    open var VERTEXCOLOR: Boolean = definedExternally
    open var AMBIENT: Boolean = definedExternally
    open var AMBIENTDIRECTUV: Number = definedExternally
    open var AMBIENTINGRAYSCALE: Boolean = definedExternally
    open var OPACITY: Boolean = definedExternally
    open var VERTEXALPHA: Boolean = definedExternally
    open var OPACITYDIRECTUV: Number = definedExternally
    open var OPACITYRGB: Boolean = definedExternally
    open var ALPHATEST: Boolean = definedExternally
    open var DEPTHPREPASS: Boolean = definedExternally
    open var ALPHABLEND: Boolean = definedExternally
    open var ALPHAFROMALBEDO: Boolean = definedExternally
    open var ALPHATESTVALUE: String = definedExternally
    open var SPECULAROVERALPHA: Boolean = definedExternally
    open var RADIANCEOVERALPHA: Boolean = definedExternally
    open var ALPHAFRESNEL: Boolean = definedExternally
    open var LINEARALPHAFRESNEL: Boolean = definedExternally
    open var PREMULTIPLYALPHA: Boolean = definedExternally
    open var EMISSIVE: Boolean = definedExternally
    open var EMISSIVEDIRECTUV: Number = definedExternally
    open var REFLECTIVITY: Boolean = definedExternally
    open var REFLECTIVITYDIRECTUV: Number = definedExternally
    open var SPECULARTERM: Boolean = definedExternally
    open var MICROSURFACEFROMREFLECTIVITYMAP: Boolean = definedExternally
    open var MICROSURFACEAUTOMATIC: Boolean = definedExternally
    open var LODBASEDMICROSFURACE: Boolean = definedExternally
    open var MICROSURFACEMAP: Boolean = definedExternally
    open var MICROSURFACEMAPDIRECTUV: Number = definedExternally
    open var METALLICWORKFLOW: Boolean = definedExternally
    open var ROUGHNESSSTOREINMETALMAPALPHA: Boolean = definedExternally
    open var ROUGHNESSSTOREINMETALMAPGREEN: Boolean = definedExternally
    open var METALLNESSSTOREINMETALMAPBLUE: Boolean = definedExternally
    open var AOSTOREINMETALMAPRED: Boolean = definedExternally
    open var ENVIRONMENTBRDF: Boolean = definedExternally
    open var ENVIRONMENTBRDF_RGBD: Boolean = definedExternally
    open var NORMAL: Boolean = definedExternally
    open var TANGENT: Boolean = definedExternally
    open var BUMP: Boolean = definedExternally
    open var BUMPDIRECTUV: Number = definedExternally
    open var OBJECTSPACE_NORMALMAP: Boolean = definedExternally
    open var PARALLAX: Boolean = definedExternally
    open var PARALLAXOCCLUSION: Boolean = definedExternally
    open var NORMALXYSCALE: Boolean = definedExternally
    open var LIGHTMAP: Boolean = definedExternally
    open var LIGHTMAPDIRECTUV: Number = definedExternally
    open var USELIGHTMAPASSHADOWMAP: Boolean = definedExternally
    open var GAMMALIGHTMAP: Boolean = definedExternally
    open var REFLECTION: Boolean = definedExternally
    open var REFLECTIONMAP_3D: Boolean = definedExternally
    open var REFLECTIONMAP_SPHERICAL: Boolean = definedExternally
    open var REFLECTIONMAP_PLANAR: Boolean = definedExternally
    open var REFLECTIONMAP_CUBIC: Boolean = definedExternally
    open var USE_LOCAL_REFLECTIONMAP_CUBIC: Boolean = definedExternally
    open var REFLECTIONMAP_PROJECTION: Boolean = definedExternally
    open var REFLECTIONMAP_SKYBOX: Boolean = definedExternally
    open var REFLECTIONMAP_SKYBOX_TRANSFORMED: Boolean = definedExternally
    open var REFLECTIONMAP_EXPLICIT: Boolean = definedExternally
    open var REFLECTIONMAP_EQUIRECTANGULAR: Boolean = definedExternally
    open var REFLECTIONMAP_EQUIRECTANGULAR_FIXED: Boolean = definedExternally
    open var REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED: Boolean = definedExternally
    open var INVERTCUBICMAP: Boolean = definedExternally
    open var USESPHERICALFROMREFLECTIONMAP: Boolean = definedExternally
    override var SPHERICAL_HARMONICS: Boolean = definedExternally
    open var USESPHERICALINVERTEX: Boolean = definedExternally
    open var REFLECTIONMAP_OPPOSITEZ: Boolean = definedExternally
    open var LODINREFLECTIONALPHA: Boolean = definedExternally
    open var GAMMAREFLECTION: Boolean = definedExternally
    open var RGBDREFLECTION: Boolean = definedExternally
    open var RADIANCEOCCLUSION: Boolean = definedExternally
    open var HORIZONOCCLUSION: Boolean = definedExternally
    open var INSTANCES: Boolean = definedExternally
    open var NUM_BONE_INFLUENCERS: Number = definedExternally
    open var BonesPerMesh: Number = definedExternally
    open var BONETEXTURE: Boolean = definedExternally
    open var NONUNIFORMSCALING: Boolean = definedExternally
    open var MORPHTARGETS: Boolean = definedExternally
    open var MORPHTARGETS_NORMAL: Boolean = definedExternally
    open var MORPHTARGETS_TANGENT: Boolean = definedExternally
    open var NUM_MORPH_INFLUENCERS: Number = definedExternally
    override var IMAGEPROCESSING: Boolean = definedExternally
    override var VIGNETTE: Boolean = definedExternally
    override var VIGNETTEBLENDMODEMULTIPLY: Boolean = definedExternally
    override var VIGNETTEBLENDMODEOPAQUE: Boolean = definedExternally
    override var TONEMAPPING: Boolean = definedExternally
    override var TONEMAPPING_ACES: Boolean = definedExternally
    override var CONTRAST: Boolean = definedExternally
    override var COLORCURVES: Boolean = definedExternally
    override var COLORGRADING: Boolean = definedExternally
    override var COLORGRADING3D: Boolean = definedExternally
    override var SAMPLER3DGREENDEPTH: Boolean = definedExternally
    override var SAMPLER3DBGRMAP: Boolean = definedExternally
    override var IMAGEPROCESSINGPOSTPROCESS: Boolean = definedExternally
    override var EXPOSURE: Boolean = definedExternally
    open var MULTIVIEW: Boolean = definedExternally
    open var USEPHYSICALLIGHTFALLOFF: Boolean = definedExternally
    open var USEGLTFLIGHTFALLOFF: Boolean = definedExternally
    open var TWOSIDEDLIGHTING: Boolean = definedExternally
    open var SHADOWFLOAT: Boolean = definedExternally
    open var CLIPPLANE: Boolean = definedExternally
    open var CLIPPLANE2: Boolean = definedExternally
    open var CLIPPLANE3: Boolean = definedExternally
    open var CLIPPLANE4: Boolean = definedExternally
    open var POINTSIZE: Boolean = definedExternally
    open var FOG: Boolean = definedExternally
    open var LOGARITHMICDEPTH: Boolean = definedExternally
    open var FORCENORMALFORWARD: Boolean = definedExternally
    open var SPECULARAA: Boolean = definedExternally
    override var CLEARCOAT: Boolean = definedExternally
    override var CLEARCOAT_DEFAULTIOR: Boolean = definedExternally
    override var CLEARCOAT_TEXTURE: Boolean = definedExternally
    override var CLEARCOAT_TEXTUREDIRECTUV: Number = definedExternally
    override var CLEARCOAT_BUMP: Boolean = definedExternally
    override var CLEARCOAT_BUMPDIRECTUV: Number = definedExternally
    override var CLEARCOAT_TINT: Boolean = definedExternally
    override var CLEARCOAT_TINT_TEXTURE: Boolean = definedExternally
    override var CLEARCOAT_TINT_TEXTUREDIRECTUV: Number = definedExternally
    override var ANISOTROPIC: Boolean = definedExternally
    override var ANISOTROPIC_TEXTURE: Boolean = definedExternally
    override var ANISOTROPIC_TEXTUREDIRECTUV: Number = definedExternally
    override var BRDF_V_HEIGHT_CORRELATED: Boolean = definedExternally
    override var MS_BRDF_ENERGY_CONSERVATION: Boolean = definedExternally
    override var SHEEN: Boolean = definedExternally
    override var SHEEN_TEXTURE: Boolean = definedExternally
    override var SHEEN_TEXTUREDIRECTUV: Number = definedExternally
    override var SHEEN_LINKWITHALBEDO: Boolean = definedExternally
    override var SUBSURFACE: Boolean = definedExternally
    override var SS_REFRACTION: Boolean = definedExternally
    override var SS_TRANSLUCENCY: Boolean = definedExternally
    override var SS_SCATERRING: Boolean = definedExternally
    override var SS_THICKNESSANDMASK_TEXTURE: Boolean = definedExternally
    override var SS_THICKNESSANDMASK_TEXTUREDIRECTUV: Number = definedExternally
    override var SS_REFRACTIONMAP_3D: Boolean = definedExternally
    override var SS_REFRACTIONMAP_OPPOSITEZ: Boolean = definedExternally
    override var SS_LODINREFRACTIONALPHA: Boolean = definedExternally
    override var SS_GAMMAREFRACTION: Boolean = definedExternally
    override var SS_RGBDREFRACTION: Boolean = definedExternally
    override var SS_LINKREFRACTIONTOTRANSPARENCY: Boolean = definedExternally
    override var SS_MASK_FROM_THICKNESS_TEXTURE: Boolean = definedExternally
    open var UNLIT: Boolean = definedExternally
    open var DEBUGMODE: Number = definedExternally
    override fun reset(): Unit = definedExternally
}
external open class PBRBaseMaterial(name: String, scene: Scene) : PushMaterial {
    open var _directIntensity: Number = definedExternally
    open var _emissiveIntensity: Number = definedExternally
    open var _environmentIntensity: Number = definedExternally
    open var _specularIntensity: Number = definedExternally
    open var _lightingInfos: Any = definedExternally
    open var _disableBumpMap: Boolean = definedExternally
    open var _albedoTexture: BaseTexture = definedExternally
    open var _ambientTexture: BaseTexture = definedExternally
    open var _ambientTextureStrength: Number = definedExternally
    open var _ambientTextureImpactOnAnalyticalLights: Number = definedExternally
    open var _opacityTexture: BaseTexture = definedExternally
    open var _reflectionTexture: BaseTexture = definedExternally
    open var _emissiveTexture: BaseTexture = definedExternally
    open var _reflectivityTexture: BaseTexture = definedExternally
    open var _metallicTexture: BaseTexture = definedExternally
    open var _metallic: Number = definedExternally
    open var _roughness: Number = definedExternally
    open var _microSurfaceTexture: BaseTexture = definedExternally
    open var _bumpTexture: BaseTexture = definedExternally
    open var _lightmapTexture: BaseTexture = definedExternally
    open var _ambientColor: Color3 = definedExternally
    open var _albedoColor: Color3 = definedExternally
    open var _reflectivityColor: Color3 = definedExternally
    open var _reflectionColor: Color3 = definedExternally
    open var _emissiveColor: Color3 = definedExternally
    open var _microSurface: Number = definedExternally
    open var _useLightmapAsShadowmap: Boolean = definedExternally
    open var _useHorizonOcclusion: Boolean = definedExternally
    open var _useRadianceOcclusion: Boolean = definedExternally
    open var _useAlphaFromAlbedoTexture: Boolean = definedExternally
    open var _useSpecularOverAlpha: Boolean = definedExternally
    open var _useMicroSurfaceFromReflectivityMapAlpha: Boolean = definedExternally
    open var _useRoughnessFromMetallicTextureAlpha: Boolean = definedExternally
    open var _useRoughnessFromMetallicTextureGreen: Boolean = definedExternally
    open var _useMetallnessFromMetallicTextureBlue: Boolean = definedExternally
    open var _useAmbientOcclusionFromMetallicTextureRed: Boolean = definedExternally
    open var _useAmbientInGrayScale: Boolean = definedExternally
    open var _useAutoMicroSurfaceFromReflectivityMap: Boolean = definedExternally
    open var _lightFalloff: Number = definedExternally
    open var _useRadianceOverAlpha: Boolean = definedExternally
    open var _useObjectSpaceNormalMap: Boolean = definedExternally
    open var _useParallax: Boolean = definedExternally
    open var _useParallaxOcclusion: Boolean = definedExternally
    open var _parallaxScaleBias: Number = definedExternally
    open var _disableLighting: Boolean = definedExternally
    open var _maxSimultaneousLights: Number = definedExternally
    open var _invertNormalMapX: Boolean = definedExternally
    open var _invertNormalMapY: Boolean = definedExternally
    open var _twoSidedLighting: Boolean = definedExternally
    open var _alphaCutOff: Number = definedExternally
    open var _forceAlphaTest: Boolean = definedExternally
    open var _useAlphaFresnel: Boolean = definedExternally
    open var _useLinearAlphaFresnel: Boolean = definedExternally
    open var _transparencyMode: Number = definedExternally
    open var _environmentBRDFTexture: BaseTexture = definedExternally
    open var _forceIrradianceInFragment: Boolean = definedExternally
    open var _forceNormalForward: Boolean = definedExternally
    open var _enableSpecularAntiAliasing: Boolean = definedExternally
    open var _imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var _imageProcessingObserver: Any = definedExternally
    open fun _attachImageProcessingConfiguration(configuration: ImageProcessingConfiguration): Unit = definedExternally
    open var _renderTargets: Any = definedExternally
    open var _globalAmbientColor: Any = definedExternally
    open var _useLogarithmicDepth: Any = definedExternally
    open var _unlit: Any = definedExternally
    open var _debugMode: Any = definedExternally
    open var debugMode: Number = definedExternally
    open var debugLimit: Any = definedExternally
    open var debugFactor: Any = definedExternally
    open var clearCoat: PBRClearCoatConfiguration = definedExternally
    open var anisotropy: PBRAnisotropicConfiguration = definedExternally
    open var brdf: PBRBRDFConfiguration = definedExternally
    open var sheen: PBRSheenConfiguration = definedExternally
    open var subSurface: PBRSubSurfaceConfiguration = definedExternally
    open var customShaderNameResolve: (shaderName: String, uniforms: Array<String>, uniformBuffers: Array<String>, samplers: Array<String>, defines: PBRMaterialDefines) -> String = definedExternally
    override var hasRenderTargetTextures: Boolean = definedExternally
    override fun getClassName(): String = definedExternally
    open var useLogarithmicDepth: Boolean = definedExternally
    open var transparencyMode: Number = definedExternally
    open var _disableAlphaBlending: Any = definedExternally
    override fun needAlphaBlending(): Boolean = definedExternally
    override fun needAlphaBlendingForMesh(mesh: AbstractMesh): Boolean = definedExternally
    override fun needAlphaTesting(): Boolean = definedExternally
    open fun _shouldUseAlphaFromAlbedoTexture(): Boolean = definedExternally
    override fun getAlphaTestTexture(): BaseTexture = definedExternally
    open fun isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun isMetallicWorkflow(): Boolean = definedExternally
    open var _prepareEffect: Any = definedExternally
    open var _prepareDefines: Any = definedExternally
	override fun forceCompilation(mesh: AbstractMesh, onCompiled: ((material: Material) -> Unit)?  /* null */, options: Any?  /* null */): Unit = definedExternally
    open fun buildUniformLayout(): Unit = definedExternally
    override fun unbind(): Unit = definedExternally
    override fun bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): Unit = definedExternally
    open fun getAnimatables(): Array<IAnimatable> = definedExternally
    open var _getReflectionTexture: Any = definedExternally
    override fun getActiveTextures(): Array<BaseTexture> = definedExternally
    override fun hasTexture(texture: BaseTexture): Boolean = definedExternally
    open fun dispose(forceDisposeEffect: Boolean? = definedExternally /* null */, forceDisposeTextures: Boolean? = definedExternally /* null */): Unit = definedExternally
    companion object {
        var PBRMATERIAL_OPAQUE: Number = definedExternally
        var PBRMATERIAL_ALPHATEST: Number = definedExternally
        var PBRMATERIAL_ALPHABLEND: Number = definedExternally
        var PBRMATERIAL_ALPHATESTANDBLEND: Number = definedExternally
        var DEFAULT_AO_ON_ANALYTICAL_LIGHTS: Number = definedExternally
        var LIGHTFALLOFF_PHYSICAL: Number = definedExternally
        var LIGHTFALLOFF_GLTF: Number = definedExternally
        var LIGHTFALLOFF_STANDARD: Number = definedExternally
    }
}
external open class PBRMaterial(name: String, scene: Scene) : PBRBaseMaterial {
    open var directIntensity: Number = definedExternally
    open var emissiveIntensity: Number = definedExternally
    open var environmentIntensity: Number = definedExternally
    open var specularIntensity: Number = definedExternally
    open var disableBumpMap: Boolean = definedExternally
    open var albedoTexture: BaseTexture = definedExternally
    open var ambientTexture: BaseTexture = definedExternally
    open var ambientTextureStrength: Number = definedExternally
    open var ambientTextureImpactOnAnalyticalLights: Number = definedExternally
    open var opacityTexture: BaseTexture = definedExternally
    open var reflectionTexture: BaseTexture = definedExternally
    open var emissiveTexture: BaseTexture = definedExternally
    open var reflectivityTexture: BaseTexture = definedExternally
    open var metallicTexture: BaseTexture = definedExternally
    open var metallic: Number = definedExternally
    open var roughness: Number = definedExternally
    open var microSurfaceTexture: BaseTexture = definedExternally
    open var bumpTexture: BaseTexture = definedExternally
    open var lightmapTexture: BaseTexture = definedExternally
    open var refractionTexture: BaseTexture = definedExternally
    open var ambientColor: Color3 = definedExternally
    open var albedoColor: Color3 = definedExternally
    open var reflectivityColor: Color3 = definedExternally
    open var reflectionColor: Color3 = definedExternally
    open var emissiveColor: Color3 = definedExternally
    open var microSurface: Number = definedExternally
    open var indexOfRefraction: Number = definedExternally
    open var invertRefractionY: Boolean = definedExternally
    open var linkRefractionWithTransparency: Boolean = definedExternally
    open var useLightmapAsShadowmap: Boolean = definedExternally
    open var useAlphaFromAlbedoTexture: Boolean = definedExternally
    open var forceAlphaTest: Boolean = definedExternally
    open var alphaCutOff: Number = definedExternally
    open var useSpecularOverAlpha: Boolean = definedExternally
    open var useMicroSurfaceFromReflectivityMapAlpha: Boolean = definedExternally
    open var useRoughnessFromMetallicTextureAlpha: Boolean = definedExternally
    open var useRoughnessFromMetallicTextureGreen: Boolean = definedExternally
    open var useMetallnessFromMetallicTextureBlue: Boolean = definedExternally
    open var useAmbientOcclusionFromMetallicTextureRed: Boolean = definedExternally
    open var useAmbientInGrayScale: Boolean = definedExternally
    open var useAutoMicroSurfaceFromReflectivityMap: Boolean = definedExternally
    open var usePhysicalLightFalloff: Boolean = definedExternally
    open var useGLTFLightFalloff: Boolean = definedExternally
    open var useRadianceOverAlpha: Boolean = definedExternally
    open var useObjectSpaceNormalMap: Boolean = definedExternally
    open var useParallax: Boolean = definedExternally
    open var useParallaxOcclusion: Boolean = definedExternally
    open var parallaxScaleBias: Number = definedExternally
    open var disableLighting: Boolean = definedExternally
    open var forceIrradianceInFragment: Boolean = definedExternally
    open var maxSimultaneousLights: Number = definedExternally
    open var invertNormalMapX: Boolean = definedExternally
    open var invertNormalMapY: Boolean = definedExternally
    open var twoSidedLighting: Boolean = definedExternally
    open var useAlphaFresnel: Boolean = definedExternally
    open var useLinearAlphaFresnel: Boolean = definedExternally
    open var environmentBRDFTexture: BaseTexture = definedExternally
    open var forceNormalForward: Boolean = definedExternally
    open var enableSpecularAntiAliasing: Boolean = definedExternally
    open var useHorizonOcclusion: Boolean = definedExternally
    open var useRadianceOcclusion: Boolean = definedExternally
    open var unlit: Boolean = definedExternally
    open var imageProcessingConfiguration: ImageProcessingConfiguration = definedExternally
    open var cameraColorCurvesEnabled: Boolean = definedExternally
    open var cameraColorGradingEnabled: Boolean = definedExternally
    open var cameraToneMappingEnabled: Boolean = definedExternally
    open var cameraExposure: Number = definedExternally
    open var cameraContrast: Number = definedExternally
    open var cameraColorGradingTexture: BaseTexture = definedExternally
    open var cameraColorCurves: ColorCurves = definedExternally
    override fun getClassName(): String = definedExternally
    override fun clone(name: String): PBRMaterial = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var PBRMATERIAL_OPAQUE: Number = definedExternally
        var PBRMATERIAL_ALPHATEST: Number = definedExternally
        var PBRMATERIAL_ALPHABLEND: Number = definedExternally
        var PBRMATERIAL_ALPHATESTANDBLEND: Number = definedExternally
        var DEFAULT_AO_ON_ANALYTICAL_LIGHTS: Number = definedExternally
        fun Parse(source: Any, scene: Scene, rootUrl: String): PBRMaterial = definedExternally
    }
}
external interface DDSInfo {
    var width: Number
    var height: Number
    var mipmapCount: Number
    var isFourCC: Boolean
    var isRGB: Boolean
    var isLuminance: Boolean
    var isCube: Boolean
    var isCompressed: Boolean
    var dxgiFormat: Number
    var textureType: Number
    var sphericalPolynomial: SphericalPolynomial? get() = definedExternally; set(value) = definedExternally
}
external open class DDSTools {
    companion object {
        var StoreLODInAlphaChannel: Boolean = definedExternally
        fun GetDDSInfo(arrayBuffer: Any): DDSInfo = definedExternally
        var _FloatView: Any = definedExternally
        var _Int32View: Any = definedExternally
        var _ToHalfFloat: Any = definedExternally
        var _FromHalfFloat: Any = definedExternally
        var _GetHalfFloatAsFloatRGBAArrayBuffer: Any = definedExternally
        var _GetHalfFloatRGBAArrayBuffer: Any = definedExternally
        var _GetFloatRGBAArrayBuffer: Any = definedExternally
        var _GetFloatAsUIntRGBAArrayBuffer: Any = definedExternally
        var _GetHalfFloatAsUIntRGBAArrayBuffer: Any = definedExternally
        var _GetRGBAArrayBuffer: Any = definedExternally
        var _ExtractLongWordOrder: Any = definedExternally
        var _GetRGBArrayBuffer: Any = definedExternally
        var _GetLuminanceArrayBuffer: Any = definedExternally
        fun UploadDDSLevels(engine: Engine, texture: InternalTexture, arrayBuffer: Any, info: DDSInfo, loadMipmaps: Boolean, faces: Number, lodIndex: Number? = definedExternally /* null */, currentFace: Number? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class _DDSTextureLoader : IInternalTextureLoader {
    override var supportCascades: Boolean = definedExternally
    override fun canLoad(extension: String, textureFormatInUse: String, fallback: InternalTexture, isBase64: Boolean, isBuffer: Boolean): Boolean = definedExternally
    override fun transformUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
    override fun getFallbackTextureUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
    override fun loadCubeData(imgs: String, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(imgs: ArrayBuffer, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(imgs: Array<dynamic /* String | ArrayBuffer */>, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadData(data: ArrayBuffer, texture: InternalTexture, callback: (width: Number, height: Number, loadMipmap: Boolean, isCompressed: Boolean, done: () -> Unit,loadFailed: Boolean?) -> Unit): Unit = definedExternally
}
external object rgbdEncodePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface EnvironmentTextureInfo {
    var version: Number
    var width: Number
    var irradiance: Any
    var specular: Any
}
external open class EnvironmentTextureTools {
    companion object {
        var _MagicBytes: Any = definedExternally
        fun GetEnvInfo(data: ArrayBuffer): EnvironmentTextureInfo = definedExternally
        fun CreateEnvTextureAsync(texture: CubeTexture): Promise<ArrayBuffer> = definedExternally
        var _CreateEnvTextureIrradiance: Any = definedExternally
        fun UploadEnvLevelsAsync(texture: InternalTexture, arrayBuffer: Any, info: EnvironmentTextureInfo): Promise<Unit> = definedExternally
        fun UploadLevelsAsync(texture: InternalTexture, imageData: Array<Array<ArrayBufferView>>): Promise<Unit> = definedExternally
        fun UploadEnvSpherical(texture: InternalTexture, info: EnvironmentTextureInfo): Unit = definedExternally
        fun _UpdateRGBDAsync(internalTexture: InternalTexture, data: Array<Array<ArrayBufferView>>, sphericalPolynomial: SphericalPolynomial, lodScale: Number, lodOffset: Number): Promise<Unit> = definedExternally
    }
}
external open class _ENVTextureLoader : IInternalTextureLoader {
    override var supportCascades: Boolean = definedExternally
    override fun canLoad(extension: String, textureFormatInUse: String, fallback: InternalTexture, isBase64: Boolean, isBuffer: Boolean): Boolean = definedExternally
    override fun transformUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
    override fun getFallbackTextureUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
	override fun loadCubeData(data: String, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(data: ArrayBuffer, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(data: Array<dynamic /* String | ArrayBuffer */>, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadData(data: ArrayBuffer, texture: InternalTexture, callback: (width: Number, height: Number, loadMipmap: Boolean, isCompressed: Boolean, done: () -> Unit,loadFailed: Boolean?) -> Unit): Unit = definedExternally
}
external open class KhronosTextureContainer(arrayBuffer: Any, facesExpected: Number, threeDExpected: Boolean? = definedExternally /* null */, textureArrayExpected: Boolean? = definedExternally /* null */) {
    open var arrayBuffer: Any = definedExternally
    open var glType: Number = definedExternally
    open var glTypeSize: Number = definedExternally
    open var glFormat: Number = definedExternally
    open var glInternalFormat: Number = definedExternally
    open var glBaseInternalFormat: Number = definedExternally
    open var pixelWidth: Number = definedExternally
    open var pixelHeight: Number = definedExternally
    open var pixelDepth: Number = definedExternally
    open var numberOfArrayElements: Number = definedExternally
    open var numberOfFaces: Number = definedExternally
    open var numberOfMipmapLevels: Number = definedExternally
    open var bytesOfKeyValueData: Number = definedExternally
    open var loadType: Number = definedExternally
    open var isInvalid: Boolean = definedExternally
    open fun uploadLevels(texture: InternalTexture, loadMipmaps: Boolean): Unit = definedExternally
    open var _upload2DCompressedLevels: Any = definedExternally
    companion object {
        var HEADER_LEN: Any = definedExternally
        var COMPRESSED_2D: Any = definedExternally
        var COMPRESSED_3D: Any = definedExternally
        var TEX_2D: Any = definedExternally
        var TEX_3D: Any = definedExternally
    }
}
external open class _KTXTextureLoader : IInternalTextureLoader {
    override var supportCascades: Boolean = definedExternally
    override fun canLoad(extension: String, textureFormatInUse: String, fallback: InternalTexture, isBase64: Boolean, isBuffer: Boolean): Boolean = definedExternally
    override fun transformUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
    override fun getFallbackTextureUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
	override fun loadCubeData(data: String, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(data: ArrayBuffer, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(data: Array<dynamic /* String | ArrayBuffer */>, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadData(data: ArrayBuffer, texture: InternalTexture, callback: (width: Number, height: Number, loadMipmap: Boolean, isCompressed: Boolean, done: () -> Unit,loadFailed: Boolean?) -> Unit): Unit = definedExternally
}
external var _forceSceneHelpersToBundle: Boolean = definedExternally
external interface `T$102` {
    var resolution: Number? get() = definedExternally; set(value) = definedExternally
    var clickToPlay: Boolean? get() = definedExternally; set(value) = definedExternally
    var autoPlay: Boolean? get() = definedExternally; set(value) = definedExternally
    var loop: Boolean? get() = definedExternally; set(value) = definedExternally
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var poster: String? get() = definedExternally; set(value) = definedExternally
    var faceForward: Boolean? get() = definedExternally; set(value) = definedExternally
    var useDirectMapping: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class VideoDome : TransformNode {
    constructor(name: String, urlsOrVideo: String, options: `T$102`, scene: Scene)
    constructor(name: String, urlsOrVideo: Array<String>, options: `T$102`, scene: Scene)
    constructor(name: String, urlsOrVideo: HTMLVideoElement, options: `T$102`, scene: Scene)
    open var _useDirectMapping: Any = definedExternally
    open var _videoTexture: VideoTexture = definedExternally
    open var videoTexture: VideoTexture = definedExternally
    open var _material: BackgroundMaterial = definedExternally
    open var _mesh: Mesh = definedExternally
    open var fovMultiplier: Number = definedExternally
    open var _videoMode: Any = definedExternally
    open var videoMode: Number = definedExternally
    open var _onBeforeCameraRenderObserver: Any = definedExternally
    open var _changeVideoMode: Any = definedExternally
    override fun dispose(doNotRecurse: Boolean?, disposeMaterialAndTextures: Boolean?): Unit = definedExternally
    companion object {
        var MODE_MONOSCOPIC: Number = definedExternally
        var MODE_TOPBOTTOM: Number = definedExternally
        var MODE_SIDEBYSIDE: Number = definedExternally
    }
}
external open class EngineInstrumentation(engine: Engine) : IDisposable {
    open var engine: Engine = definedExternally
    open var _captureGPUFrameTime: Any = definedExternally
    open var _gpuFrameTimeToken: Any = definedExternally
    open var _gpuFrameTime: Any = definedExternally
    open var _captureShaderCompilationTime: Any = definedExternally
    open var _shaderCompilationTime: Any = definedExternally
    open var _onBeginFrameObserver: Any = definedExternally
    open var _onEndFrameObserver: Any = definedExternally
    open var _onBeforeShaderCompilationObserver: Any = definedExternally
    open var _onAfterShaderCompilationObserver: Any = definedExternally
    open var gpuFrameTimeCounter: PerfCounter = definedExternally
    open var captureGPUFrameTime: Boolean = definedExternally
    open var shaderCompilationTimeCounter: PerfCounter = definedExternally
    open var captureShaderCompilationTime: Boolean = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class SceneInstrumentation(scene: Scene) : IDisposable {
    open var scene: Scene = definedExternally
    open var _captureActiveMeshesEvaluationTime: Any = definedExternally
    open var _activeMeshesEvaluationTime: Any = definedExternally
    open var _captureRenderTargetsRenderTime: Any = definedExternally
    open var _renderTargetsRenderTime: Any = definedExternally
    open var _captureFrameTime: Any = definedExternally
    open var _frameTime: Any = definedExternally
    open var _captureRenderTime: Any = definedExternally
    open var _renderTime: Any = definedExternally
    open var _captureInterFrameTime: Any = definedExternally
    open var _interFrameTime: Any = definedExternally
    open var _captureParticlesRenderTime: Any = definedExternally
    open var _particlesRenderTime: Any = definedExternally
    open var _captureSpritesRenderTime: Any = definedExternally
    open var _spritesRenderTime: Any = definedExternally
    open var _capturePhysicsTime: Any = definedExternally
    open var _physicsTime: Any = definedExternally
    open var _captureAnimationsTime: Any = definedExternally
    open var _animationsTime: Any = definedExternally
    open var _captureCameraRenderTime: Any = definedExternally
    open var _cameraRenderTime: Any = definedExternally
    open var _onBeforeActiveMeshesEvaluationObserver: Any = definedExternally
    open var _onAfterActiveMeshesEvaluationObserver: Any = definedExternally
    open var _onBeforeRenderTargetsRenderObserver: Any = definedExternally
    open var _onAfterRenderTargetsRenderObserver: Any = definedExternally
    open var _onAfterRenderObserver: Any = definedExternally
    open var _onBeforeDrawPhaseObserver: Any = definedExternally
    open var _onAfterDrawPhaseObserver: Any = definedExternally
    open var _onBeforeAnimationsObserver: Any = definedExternally
    open var _onBeforeParticlesRenderingObserver: Any = definedExternally
    open var _onAfterParticlesRenderingObserver: Any = definedExternally
    open var _onBeforeSpritesRenderingObserver: Any = definedExternally
    open var _onAfterSpritesRenderingObserver: Any = definedExternally
    open var _onBeforePhysicsObserver: Any = definedExternally
    open var _onAfterPhysicsObserver: Any = definedExternally
    open var _onAfterAnimationsObserver: Any = definedExternally
    open var _onBeforeCameraRenderObserver: Any = definedExternally
    open var _onAfterCameraRenderObserver: Any = definedExternally
    open var activeMeshesEvaluationTimeCounter: PerfCounter = definedExternally
    open var captureActiveMeshesEvaluationTime: Boolean = definedExternally
    open var renderTargetsRenderTimeCounter: PerfCounter = definedExternally
    open var captureRenderTargetsRenderTime: Boolean = definedExternally
    open var particlesRenderTimeCounter: PerfCounter = definedExternally
    open var captureParticlesRenderTime: Boolean = definedExternally
    open var spritesRenderTimeCounter: PerfCounter = definedExternally
    open var captureSpritesRenderTime: Boolean = definedExternally
    open var physicsTimeCounter: PerfCounter = definedExternally
    open var capturePhysicsTime: Boolean = definedExternally
    open var animationsTimeCounter: PerfCounter = definedExternally
    open var captureAnimationsTime: Boolean = definedExternally
    open var frameTimeCounter: PerfCounter = definedExternally
    open var captureFrameTime: Boolean = definedExternally
    open var interFrameTimeCounter: PerfCounter = definedExternally
    open var captureInterFrameTime: Boolean = definedExternally
    open var renderTimeCounter: PerfCounter = definedExternally
    open var captureRenderTime: Boolean = definedExternally
    open var cameraRenderTimeCounter: PerfCounter = definedExternally
    open var captureCameraRenderTime: Boolean = definedExternally
    open var drawCallsCounter: PerfCounter = definedExternally
    override fun dispose(): Unit = definedExternally
}
external object glowMapGenerationPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object glowMapGenerationVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface IEffectLayerOptions {
    var mainTextureRatio: Number
    var mainTextureFixedSize: Number? get() = definedExternally; set(value) = definedExternally
    var alphaBlendingMode: Number
    var camera: Camera
    var renderingGroupId: Number
}
external interface `T$103` {
    var texture: BaseTexture
    var color: Color4
}
external open class EffectLayer(name: String, scene: Scene) {
    open var _vertexBuffers: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _cachedDefines: Any = definedExternally
    open var _effectLayerMapGenerationEffect: Any = definedExternally
    open var _effectLayerOptions: Any = definedExternally
    open var _mergeEffect: Any = definedExternally
    open var _scene: Scene = definedExternally
    open var _engine: Engine = definedExternally
    open var _maxSize: Number = definedExternally
    open var _mainTextureDesiredSize: ISize = definedExternally
    open var _mainTexture: RenderTargetTexture = definedExternally
    open var _shouldRender: Boolean = definedExternally
    open var _postProcesses: Array<PostProcess> = definedExternally
    open var _textures: Array<BaseTexture> = definedExternally
    open var _emissiveTextureAndColor: `T$103` = definedExternally
    open var name: String = definedExternally
    open var neutralColor: Color4 = definedExternally
    open var isEnabled: Boolean = definedExternally
    open var camera: Camera = definedExternally
    open var renderingGroupId: Number = definedExternally
    open var onDisposeObservable: Observable<EffectLayer> = definedExternally
    open var onBeforeRenderMainTextureObservable: Observable<EffectLayer> = definedExternally
    open var onBeforeComposeObservable: Observable<EffectLayer> = definedExternally
    open var onAfterComposeObservable: Observable<EffectLayer> = definedExternally
    open var onSizeChangedObservable: Observable<EffectLayer> = definedExternally
    open fun getEffectName(): String = definedExternally
    open fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean = definedExternally
    open fun needStencil(): Boolean = definedExternally
    open fun _createMergeEffect(): Effect = definedExternally
    open fun _createTextureAndPostProcesses(): Unit = definedExternally
    open fun _internalRender(effect: Effect): Unit = definedExternally
    open fun _setEmissiveTextureAndColor(mesh: Mesh, subMesh: SubMesh, material: Material): Unit = definedExternally
    open fun _disposeMesh(mesh: Mesh): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    open fun _init(options: Any?): Unit = definedExternally
    open var _generateIndexBuffer: Any = definedExternally
    open var _generateVertexBuffer: Any = definedExternally
    open var _setMainTextureSize: Any = definedExternally
    open fun _createMainTexture(): Unit = definedExternally
    open fun _addCustomEffectDefines(defines: Array<String>): Unit = definedExternally
    open fun _isReady(subMesh: SubMesh, useInstances: Boolean, emissiveTexture: BaseTexture): Boolean = definedExternally
    open fun render(): Unit = definedExternally
    open fun hasMesh(mesh: AbstractMesh): Boolean = definedExternally
    open fun shouldRender(): Boolean = definedExternally
    open fun _shouldRenderMesh(mesh: AbstractMesh): Boolean = definedExternally
    open fun _canRenderMesh(mesh: AbstractMesh, material: Material): Boolean = definedExternally
    open fun _shouldRenderEmissiveTextureForMesh(): Boolean = definedExternally
    open fun _renderSubMesh(subMesh: SubMesh, enableAlphaMode: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open var _disposeTextureAndPostProcesses: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    companion object {
        var _SceneComponentInitialization: (scene: Scene) -> Unit = definedExternally
        fun Parse(parsedEffectLayer: Any, scene: Scene, rootUrl: String): EffectLayer = definedExternally
    }
}
external open class EffectLayerSceneComponent(scene: Scene) : ISceneSerializableComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    open var _engine: Any = definedExternally
    open var _renderEffects: Any = definedExternally
    open var _needStencil: Any = definedExternally
    open var _previousStencilState: Any = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun serialize(serializationObject: Any): Unit = definedExternally
    override fun addFromContainer(container: AbstractScene): Unit = definedExternally
    override fun removeFromContainer(container: AbstractScene, dispose: Boolean?): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _isReadyForMesh: Any = definedExternally
    open var _renderMainTexture: Any = definedExternally
    open var _setStencil: Any = definedExternally
    open var _setStencilBack: Any = definedExternally
    open var _draw: Any = definedExternally
    open var _drawCamera: Any = definedExternally
    open var _drawRenderingGroup: Any = definedExternally
}
external object glowMapMergePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object glowMapMergeVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface IGlowLayerOptions {
    var mainTextureRatio: Number
    var mainTextureFixedSize: Number? get() = definedExternally; set(value) = definedExternally
    var blurKernelSize: Number
    var camera: Camera
    var mainTextureSamples: Number? get() = definedExternally; set(value) = definedExternally
    var renderingGroupId: Number
}
external open class GlowLayer(name: String, scene: Scene, options: Any? = definedExternally /* null */) : EffectLayer {
    open var blurKernelSize: Number = definedExternally
    open var intensity: Number = definedExternally
    open var _options: Any = definedExternally
    open var _intensity: Any = definedExternally
    open var _horizontalBlurPostprocess1: Any = definedExternally
    open var _verticalBlurPostprocess1: Any = definedExternally
    open var _horizontalBlurPostprocess2: Any = definedExternally
    open var _verticalBlurPostprocess2: Any = definedExternally
    open var _blurTexture1: Any = definedExternally
    open var _blurTexture2: Any = definedExternally
    open var _postProcesses1: Any = definedExternally
    open var _postProcesses2: Any = definedExternally
    open var _includedOnlyMeshes: Any = definedExternally
    open var _excludedMeshes: Any = definedExternally
    open var customEmissiveColorSelector: (mesh: Mesh, subMesh: SubMesh, material: Material, result: Color4) -> Unit = definedExternally
    open var customEmissiveTextureSelector: (mesh: Mesh, subMesh: SubMesh, material: Material) -> Texture = definedExternally
    override fun getEffectName(): String = definedExternally
    override fun _createMergeEffect(): Effect = definedExternally
    override fun _createTextureAndPostProcesses(): Unit = definedExternally
    override fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean = definedExternally
    override fun needStencil(): Boolean = definedExternally
    override fun _canRenderMesh(mesh: AbstractMesh, material: Material): Boolean = definedExternally
    override fun _internalRender(effect: Effect): Unit = definedExternally
    override fun _setEmissiveTextureAndColor(mesh: Mesh, subMesh: SubMesh, material: Material): Unit = definedExternally
    open fun _shouldRenderMesh(mesh: Mesh): Boolean = definedExternally
    override fun _addCustomEffectDefines(defines: Array<String>): Unit = definedExternally
    open fun addExcludedMesh(mesh: Mesh): Unit = definedExternally
    open fun removeExcludedMesh(mesh: Mesh): Unit = definedExternally
    open fun addIncludedOnlyMesh(mesh: Mesh): Unit = definedExternally
    open fun removeIncludedOnlyMesh(mesh: Mesh): Unit = definedExternally
    override fun hasMesh(mesh: AbstractMesh): Boolean = definedExternally
    override fun _disposeMesh(mesh: Mesh): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var EffectName: String = definedExternally
        var DefaultBlurKernelSize: Number = definedExternally
        var DefaultTextureRatio: Number = definedExternally
        fun Parse(parsedGlowLayer: Any, scene: Scene, rootUrl: String): GlowLayer = definedExternally
    }
}
external object glowBlurPostProcessPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface IHighlightLayerOptions {
    var mainTextureRatio: Number
    var mainTextureFixedSize: Number? get() = definedExternally; set(value) = definedExternally
    var blurTextureSizeRatio: Number
    var blurVerticalSize: Number
    var blurHorizontalSize: Number
    var alphaBlendingMode: Number
    var camera: Camera
    var isStroke: Boolean? get() = definedExternally; set(value) = definedExternally
    var renderingGroupId: Number
}
external open class HighlightLayer(name: String, scene: Scene, options: Any? = definedExternally /* null */) : EffectLayer {
    override var name: String = definedExternally
    open var innerGlow: Boolean = definedExternally
    open var outerGlow: Boolean = definedExternally
    open var blurHorizontalSize: Number = definedExternally
    open var blurVerticalSize: Number = definedExternally
    open var onBeforeBlurObservable: Observable<HighlightLayer> = definedExternally
    open var onAfterBlurObservable: Observable<HighlightLayer> = definedExternally
    open var _instanceGlowingMeshStencilReference: Any = definedExternally
    open var _options: Any = definedExternally
    open var _downSamplePostprocess: Any = definedExternally
    open var _horizontalBlurPostprocess: Any = definedExternally
    open var _verticalBlurPostprocess: Any = definedExternally
    open var _blurTexture: Any = definedExternally
    open var _meshes: Any = definedExternally
    open var _excludedMeshes: Any = definedExternally
    override fun getEffectName(): String = definedExternally
    override fun _createMergeEffect(): Effect = definedExternally
    override fun _createTextureAndPostProcesses(): Unit = definedExternally
    override fun needStencil(): Boolean = definedExternally
    override fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean = definedExternally
    override fun _internalRender(effect: Effect): Unit = definedExternally
    override fun shouldRender(): Boolean = definedExternally
    open fun _shouldRenderMesh(mesh: Mesh): Boolean = definedExternally
    override fun _setEmissiveTextureAndColor(mesh: Mesh, subMesh: SubMesh, material: Material): Unit = definedExternally
    open fun addExcludedMesh(mesh: Mesh): Unit = definedExternally
    open fun removeExcludedMesh(mesh: Mesh): Unit = definedExternally
    override fun hasMesh(mesh: AbstractMesh): Boolean = definedExternally
    open fun addMesh(mesh: Mesh, color: Color3, glowEmissiveOnly: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun removeMesh(mesh: Mesh): Unit = definedExternally
    open var _defaultStencilReference: Any = definedExternally
    override fun _disposeMesh(mesh: Mesh): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun getClassName(): String = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var EffectName: String = definedExternally
        var NeutralColor: Color4 = definedExternally
        var GlowingMeshStencilReference: Number = definedExternally
        var NormalMeshStencilReference: Number = definedExternally
        fun Parse(parsedHightlightLayer: Any, scene: Scene, rootUrl: String): HighlightLayer = definedExternally
    }
}
external object lensFlarePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object lensFlareVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class LensFlareSystem(name: String, emitter: Any, scene: Scene) {
    open var name: String = definedExternally
    open var lensFlares: Array<LensFlare> = definedExternally
    open var borderLimit: Number = definedExternally
    open var viewportBorder: Number = definedExternally
    open var meshesSelectionPredicate: (mesh: AbstractMesh) -> Boolean = definedExternally
    open var layerMask: Number = definedExternally
    open var id: String = definedExternally
    open var _scene: Any = definedExternally
    open var _emitter: Any = definedExternally
    open var _vertexBuffers: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    open var _effect: Any = definedExternally
    open var _positionX: Any = definedExternally
    open var _positionY: Any = definedExternally
    open var _isEnabled: Any = definedExternally
    open var isEnabled: Boolean = definedExternally
    open fun getScene(): Scene = definedExternally
    open fun getEmitter(): Any = definedExternally
    open fun setEmitter(newEmitter: Any): Unit = definedExternally
    open fun getEmitterPosition(): Vector3 = definedExternally
    open fun computeEffectivePosition(globalViewport: Viewport): Boolean = definedExternally
    open fun _isVisible(): Boolean = definedExternally
    open fun render(): Boolean = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var _SceneComponentInitialization: (scene: Scene) -> Unit = definedExternally
        fun Parse(parsedLensFlareSystem: Any, scene: Scene, rootUrl: String): LensFlareSystem = definedExternally
    }
}
external open class LensFlare(size: Number, position: Number, color: Color3, imgUrl: String, system: LensFlareSystem) {
    open var size: Number = definedExternally
    open var position: Number = definedExternally
    open var color: Color3 = definedExternally
    open var texture: Texture = definedExternally
    open var alphaMode: Number = definedExternally
    open var _system: Any = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        fun AddFlare(size: Number, position: Number, color: Color3, imgUrl: String, system: LensFlareSystem): LensFlare = definedExternally
    }
}
external open class LensFlareSystemSceneComponent(scene: Scene) : ISceneSerializableComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun addFromContainer(container: AbstractScene): Unit = definedExternally
    override fun removeFromContainer(container: AbstractScene, dispose: Boolean?): Unit = definedExternally
    override fun serialize(serializationObject: Any): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _draw: Any = definedExternally
}
external open class ShadowGeneratorSceneComponent(scene: Scene) : ISceneSerializableComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun serialize(serializationObject: Any): Unit = definedExternally
    override fun addFromContainer(container: AbstractScene): Unit = definedExternally
    override fun removeFromContainer(container: AbstractScene, dispose: Boolean?): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _gatherRenderTargets: Any = definedExternally
}
external open class PointLight(name: String, position: Vector3, scene: Scene) : ShadowLight {
    open var _shadowAngle: Any = definedExternally
    open var shadowAngle: Number = definedExternally
    override var direction: Vector3 = definedExternally
    override fun getClassName(): String = definedExternally
    override fun getTypeID(): Number = definedExternally
    override fun needCube(): Boolean = definedExternally
    override fun getShadowDirection(faceIndex: Number?): Vector3 = definedExternally
    override fun _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): Unit = definedExternally
    override fun _buildUniformLayout(): Unit = definedExternally
    override fun transferToEffect(effect: Effect, lightIndex: String): PointLight = definedExternally
    override fun prepareLightSpecificDefines(defines: Any, lightIndex: Number): Unit = definedExternally
}
external interface HDRInfo {
    var height: Number
    var width: Number
    var dataPosition: Number
}
external open class HDRTools {
    companion object {
        var Ldexp: Any = definedExternally
        var Rgbe2float: Any = definedExternally
        var readStringLine: Any = definedExternally
        fun RGBE_ReadHeader(uint8array: Uint8Array): HDRInfo = definedExternally
        fun GetCubeMapTextureData(buffer: ArrayBuffer, size: Number): CubeMapInfo = definedExternally
        fun RGBE_ReadPixels(uint8array: Uint8Array, hdrInfo: HDRInfo): Float32Array = definedExternally
        var RGBE_ReadPixels_RLE: Any = definedExternally
    }
}
external open class HDRCubeTexture(url: String, scene: Scene, size: Number, noMipmap: Boolean? = definedExternally /* null */, generateHarmonics: Boolean? = definedExternally /* null */, gammaSpace: Boolean? = definedExternally /* null */, reserved: Boolean? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */) : BaseTexture {
    open var _generateHarmonics: Any = definedExternally
    open var _noMipmap: Any = definedExternally
    open var _textureMatrix: Any = definedExternally
    open var _size: Any = definedExternally
    open var _onLoad: Any = definedExternally
    open var _onError: Any = definedExternally
    open var url: String = definedExternally
    override var coordinatesMode: Number = definedExternally
    open var _isBlocking: Boolean = definedExternally
    override var isBlocking: Boolean = definedExternally
    open var _rotationY: Number = definedExternally
    open var rotationY: Number = definedExternally
    open var boundingBoxPosition: Vector3 = definedExternally
    open var _boundingBoxSize: Any = definedExternally
    open var boundingBoxSize: Vector3 = definedExternally
    override fun getClassName(): String = definedExternally
    open var loadTexture: Any = definedExternally
    override fun clone(): HDRCubeTexture = definedExternally
    override fun delayLoad(): Unit = definedExternally
    override fun getReflectionTextureMatrix(): Matrix = definedExternally
    open fun setReflectionTextureMatrix(value: Matrix): Unit = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var _facesMapping: Any = definedExternally
        fun Parse(parsedTexture: Any, scene: Scene, rootUrl: String): HDRCubeTexture = definedExternally
    }
}
external open class PhysicsEngine(gravity: Vector3, _physicsPlugin: IPhysicsEnginePlugin? = definedExternally /* null */) : IPhysicsEngine {
    open var _physicsPlugin: Any = definedExternally
    open var _impostors: Any = definedExternally
    open var _joints: Any = definedExternally
    override var gravity: Vector3 = definedExternally
    override fun setGravity(gravity: Vector3): Unit = definedExternally
	override fun setTimeStep(newTimeStep: Number): Unit = definedExternally
    override fun getTimeStep(): Number = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun getPhysicsPluginName(): String = definedExternally
    override fun addImpostor(impostor: PhysicsImpostor): Unit = definedExternally
    override fun removeImpostor(impostor: PhysicsImpostor): Unit = definedExternally
    override fun addJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint): Unit = definedExternally
    override fun removeJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint): Unit = definedExternally
    override fun _step(delta: Number): Unit = definedExternally
    override fun getPhysicsPlugin(): IPhysicsEnginePlugin = definedExternally
    override fun getImpostors(): Array<PhysicsImpostor> = definedExternally
    override fun getImpostorForPhysicsObject(`object`: IPhysicsEnabledObject): PhysicsImpostor = definedExternally
    override fun getImpostorWithPhysicsBody(body: Any): PhysicsImpostor = definedExternally
    override fun raycast(from: Vector3, to: Vector3): PhysicsRaycastResult = definedExternally
    companion object {
        var Epsilon: Number = definedExternally
        fun DefaultPluginFactory(): IPhysicsEnginePlugin = definedExternally
    }
}
external open class CannonJSPlugin(_useDeltaForWorldStep: Boolean? = definedExternally /* null */, iterations: Number? = definedExternally /* null */, cannonInjection: Any? = definedExternally /* null */) : IPhysicsEnginePlugin {
    open var _useDeltaForWorldStep: Any = definedExternally
    override var world: Any = definedExternally
    override var name: String = definedExternally
    open var _physicsMaterials: Any = definedExternally
    open var _fixedTimeStep: Any = definedExternally
    open var _cannonRaycastResult: Any = definedExternally
    open var _raycastResult: Any = definedExternally
    open var _removeAfterStep: Any = definedExternally
    open var BJSCANNON: Any = definedExternally
    override fun setGravity(gravity: Vector3): Unit = definedExternally
    override fun setTimeStep(timeStep: Number): Unit = definedExternally
    override fun getTimeStep(): Number = definedExternally
	override fun executeStep(delta: Number, impostors: Array<PhysicsImpostor>?): Unit = definedExternally
    override fun applyImpulse(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): Unit = definedExternally
    override fun applyForce(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): Unit = definedExternally
    override fun generatePhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    open var _processChildMeshes: Any = definedExternally
    override fun removePhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun generateJoint(impostorJoint: PhysicsImpostorJoint): Unit = definedExternally
    override fun removeJoint(impostorJoint: PhysicsImpostorJoint): Unit = definedExternally
    open var _addMaterial: Any = definedExternally
    open var _checkWithEpsilon: Any = definedExternally
    open var _createShape: Any = definedExternally
    open var _createHeightmap: Any = definedExternally
    open var _minus90X: Any = definedExternally
    open var _plus90X: Any = definedExternally
    open var _tmpPosition: Any = definedExternally
    open var _tmpDeltaPosition: Any = definedExternally
    open var _tmpUnityRotation: Any = definedExternally
    open var _updatePhysicsBodyTransformation: Any = definedExternally
    override fun setTransformationFromPhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun setPhysicsBodyTransformation(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion): Unit = definedExternally
    override fun isSupported(): Boolean = definedExternally
    override fun setLinearVelocity(impostor: PhysicsImpostor, velocity: Vector3): Unit = definedExternally
    override fun setAngularVelocity(impostor: PhysicsImpostor, velocity: Vector3): Unit = definedExternally
    override fun getLinearVelocity(impostor: PhysicsImpostor): Vector3 = definedExternally
    override fun getAngularVelocity(impostor: PhysicsImpostor): Vector3 = definedExternally
    override fun setBodyMass(impostor: PhysicsImpostor, mass: Number): Unit = definedExternally
    override fun getBodyMass(impostor: PhysicsImpostor): Number = definedExternally
    override fun getBodyFriction(impostor: PhysicsImpostor): Number = definedExternally
    override fun setBodyFriction(impostor: PhysicsImpostor, friction: Number): Unit = definedExternally
    override fun getBodyRestitution(impostor: PhysicsImpostor): Number = definedExternally
    override fun setBodyRestitution(impostor: PhysicsImpostor, restitution: Number): Unit = definedExternally
    override fun sleepBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun wakeUpBody(impostor: PhysicsImpostor): Unit = definedExternally
	override fun updateDistanceJoint(joint: PhysicsJoint, maxDistance: Number, minDistance: Number?): Unit = definedExternally
    override fun setMotor(joint: IMotorEnabledJoint, speed: Number, maxForce: Number?, motorIndex: Number?): Unit = definedExternally
	override fun setLimit(joint: IMotorEnabledJoint, upperLimit: Number, lowerLimit: Number?, motorIndex: Number?  /* null */): Unit = definedExternally
    override fun syncMeshWithImpostor(mesh: AbstractMesh, impostor: PhysicsImpostor): Unit = definedExternally
    override fun getRadius(impostor: PhysicsImpostor): Number = definedExternally
    override fun getBoxSizeToRef(impostor: PhysicsImpostor, result: Vector3): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _extendNamespace: Any = definedExternally
    override fun raycast(from: Vector3, to: Vector3): PhysicsRaycastResult = definedExternally
}
external open class OimoJSPlugin(iterations: Number? = definedExternally /* null */, oimoInjection: Any? = definedExternally /* null */) : IPhysicsEnginePlugin {
    override var world: Any = definedExternally
    override var name: String = definedExternally
    open var BJSOIMO: Any = definedExternally
    open var _raycastResult: Any = definedExternally
    override fun setGravity(gravity: Vector3): Unit = definedExternally
    override fun setTimeStep(timeStep: Number): Unit = definedExternally
    override fun getTimeStep(): Number = definedExternally
    open var _tmpImpostorsArray: Any = definedExternally
    override fun executeStep(delta: Number, impostors: Array<PhysicsImpostor>?): Unit = definedExternally
    override fun applyImpulse(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): Unit = definedExternally
    override fun applyForce(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): Unit = definedExternally
    override fun generatePhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    open var _tmpPositionVector: Any = definedExternally
    override fun removePhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun generateJoint(impostorJoint: PhysicsImpostorJoint): Unit = definedExternally
    override fun removeJoint(impostorJoint: PhysicsImpostorJoint): Unit = definedExternally
    override fun isSupported(): Boolean = definedExternally
    override fun setTransformationFromPhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun setPhysicsBodyTransformation(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion): Unit = definedExternally
    override fun setLinearVelocity(impostor: PhysicsImpostor, velocity: Vector3): Unit = definedExternally
    override fun setAngularVelocity(impostor: PhysicsImpostor, velocity: Vector3): Unit = definedExternally
    override fun getLinearVelocity(impostor: PhysicsImpostor): Vector3 = definedExternally
    override fun getAngularVelocity(impostor: PhysicsImpostor): Vector3 = definedExternally
    override fun setBodyMass(impostor: PhysicsImpostor, mass: Number): Unit = definedExternally
    override fun getBodyMass(impostor: PhysicsImpostor): Number = definedExternally
    override fun getBodyFriction(impostor: PhysicsImpostor): Number = definedExternally
    override fun setBodyFriction(impostor: PhysicsImpostor, friction: Number): Unit = definedExternally
    override fun getBodyRestitution(impostor: PhysicsImpostor): Number = definedExternally
    override fun setBodyRestitution(impostor: PhysicsImpostor, restitution: Number): Unit = definedExternally
    override fun sleepBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun wakeUpBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun updateDistanceJoint(joint: PhysicsJoint, maxDistance: Number, minDistance: Number?): Unit = definedExternally
    override fun setMotor(joint: IMotorEnabledJoint, speed: Number, force: Number?, motorIndex: Number?): Unit = definedExternally
    override fun setLimit(joint: IMotorEnabledJoint, upperLimit: Number, lowerLimit: Number?, motorIndex: Number?): Unit = definedExternally
    override fun syncMeshWithImpostor(mesh: AbstractMesh, impostor: PhysicsImpostor): Unit = definedExternally
    override fun getRadius(impostor: PhysicsImpostor): Number = definedExternally
    override fun getBoxSizeToRef(impostor: PhysicsImpostor, result: Vector3): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun raycast(from: Vector3, to: Vector3): PhysicsRaycastResult = definedExternally
}
external interface `T$104` {
    var pathArray: Array<Array<Vector3>>
    var closeArray: Boolean? get() = definedExternally; set(value) = definedExternally
    var closePath: Boolean? get() = definedExternally; set(value) = definedExternally
    var offset: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
    var uvs: Array<Vector2>? get() = definedExternally; set(value) = definedExternally
    var colors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
}
external open class RibbonBuilder {
    companion object {
        fun CreateRibbon(name: String, options: `T$104`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$105` {
    var shape: Array<Vector3>
    var path: Array<Vector3>
    var scale: Number? get() = definedExternally; set(value) = definedExternally
    var rotation: Number? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$106` {
    var shape: Array<Vector3>
    var path: Array<Vector3>
    var scaleFunction: Any? get() = definedExternally; set(value) = definedExternally
    var rotationFunction: Any? get() = definedExternally; set(value) = definedExternally
    var ribbonCloseArray: Boolean? get() = definedExternally; set(value) = definedExternally
    var ribbonClosePath: Boolean? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class ShapeBuilder {
    companion object {
        fun ExtrudeShape(name: String, options: `T$105`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun ExtrudeShapeCustom(name: String, options: `T$106`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        var _ExtrudeShapeGeneric: Any = definedExternally
    }
}
external open class AmmoJSPlugin(_useDeltaForWorldStep: Boolean? = definedExternally /* null */, ammoInjection: Any? = definedExternally /* null */) : IPhysicsEnginePlugin {
    open var _useDeltaForWorldStep: Any = definedExternally
    open var bjsAMMO: Any = definedExternally
    override var world: Any = definedExternally
    override var name: String = definedExternally
    open var _timeStep: Any = definedExternally
    open var _fixedTimeStep: Any = definedExternally
    open var _maxSteps: Any = definedExternally
    open var _tmpQuaternion: Any = definedExternally
    open var _tmpAmmoTransform: Any = definedExternally
    open var _tmpAmmoQuaternion: Any = definedExternally
    open var _tmpAmmoConcreteContactResultCallback: Any = definedExternally
    open var _collisionConfiguration: Any = definedExternally
    open var _dispatcher: Any = definedExternally
    open var _overlappingPairCache: Any = definedExternally
    open var _solver: Any = definedExternally
    open var _softBodySolver: Any = definedExternally
    open var _tmpAmmoVectorA: Any = definedExternally
    open var _tmpAmmoVectorB: Any = definedExternally
    open var _tmpAmmoVectorC: Any = definedExternally
    open var _tmpAmmoVectorD: Any = definedExternally
    open var _tmpContactCallbackResult: Any = definedExternally
    open var _tmpAmmoVectorRCA: Any = definedExternally
    open var _tmpAmmoVectorRCB: Any = definedExternally
    open var _raycastResult: Any = definedExternally
    override fun setGravity(gravity: Vector3): Unit = definedExternally
    override fun setTimeStep(timeStep: Number): Unit = definedExternally
    open fun setFixedTimeStep(fixedTimeStep: Number): Unit = definedExternally
    open fun setMaxSteps(maxSteps: Number): Unit = definedExternally
    override fun getTimeStep(): Number = definedExternally
    open var _isImpostorInContact: Any = definedExternally
    open var _isImpostorPairInContact: Any = definedExternally
    open var _stepSimulation: Any = definedExternally
    override fun executeStep(delta: Number, impostors: Array<PhysicsImpostor>?): Unit = definedExternally
    open var _afterSoftStep: Any = definedExternally
    open var _ropeStep: Any = definedExternally
    open var _softbodyOrClothStep: Any = definedExternally
    open var _tmpVector: Any = definedExternally
    open var _tmpMatrix: Any = definedExternally
    override fun applyImpulse(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): Unit = definedExternally
    override fun applyForce(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): Unit = definedExternally
    override fun generatePhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun removePhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun generateJoint(impostorJoint: PhysicsImpostorJoint): Unit = definedExternally
    override fun removeJoint(impostorJoint: PhysicsImpostorJoint): Unit = definedExternally
    open var _addMeshVerts: Any = definedExternally
    open var _softVertexData: Any = definedExternally
    open var _createSoftbody: Any = definedExternally
    open var _createCloth: Any = definedExternally
    open var _createRope: Any = definedExternally
    open var _addHullVerts: Any = definedExternally
    open var _createShape: Any = definedExternally
    override fun setTransformationFromPhysicsBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun setPhysicsBodyTransformation(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion): Unit = definedExternally
    override fun isSupported(): Boolean = definedExternally
    override fun setLinearVelocity(impostor: PhysicsImpostor, velocity: Vector3): Unit = definedExternally
    override fun setAngularVelocity(impostor: PhysicsImpostor, velocity: Vector3): Unit = definedExternally
    override fun getLinearVelocity(impostor: PhysicsImpostor): Vector3 = definedExternally
    override fun getAngularVelocity(impostor: PhysicsImpostor): Vector3 = definedExternally
    override fun setBodyMass(impostor: PhysicsImpostor, mass: Number): Unit = definedExternally
    override fun getBodyMass(impostor: PhysicsImpostor): Number = definedExternally
    override fun getBodyFriction(impostor: PhysicsImpostor): Number = definedExternally
    override fun setBodyFriction(impostor: PhysicsImpostor, friction: Number): Unit = definedExternally
    override fun getBodyRestitution(impostor: PhysicsImpostor): Number = definedExternally
    override fun setBodyRestitution(impostor: PhysicsImpostor, restitution: Number): Unit = definedExternally
	open fun getBodyPressure(impostor: PhysicsImpostor): Number = definedExternally
	open fun setBodyPressure(impostor: PhysicsImpostor, pressure: Number): Unit = definedExternally
	open fun getBodyStiffness(impostor: PhysicsImpostor): Number = definedExternally
	open fun setBodyStiffness(impostor: PhysicsImpostor, stiffness: Number): Unit = definedExternally
    open fun getBodyVelocityIterations(impostor: PhysicsImpostor): Number = definedExternally
	open fun setBodyVelocityIterations(impostor: PhysicsImpostor, velocityIterations: Number): Unit = definedExternally
	open fun getBodyPositionIterations(impostor: PhysicsImpostor): Number = definedExternally
	open fun setBodyPositionIterations(impostor: PhysicsImpostor, positionIterations: Number): Unit = definedExternally
	open fun appendAnchor(impostor: PhysicsImpostor, otherImpostor: PhysicsImpostor, width: Number, height: Number, influence: Number?, noCollisionBetweenLinkedBodies: Boolean?): Unit = definedExternally
	open fun appendHook(impostor: PhysicsImpostor, otherImpostor: PhysicsImpostor, length: Number, influence: Number?, noCollisionBetweenLinkedBodies: Boolean?): Unit = definedExternally
    override fun sleepBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun wakeUpBody(impostor: PhysicsImpostor): Unit = definedExternally
    override fun updateDistanceJoint(joint: PhysicsJoint, maxDistance: Number, minDistance: Number?): Unit = definedExternally
	override fun setMotor(joint: IMotorEnabledJoint, speed: Number, maxForce: Number?, motorIndex: Number?): Unit = definedExternally
	override fun setLimit(joint: IMotorEnabledJoint, upperLimit: Number, lowerLimit: Number?, motorIndex: Number?): Unit = definedExternally
    override fun syncMeshWithImpostor(mesh: AbstractMesh, impostor: PhysicsImpostor): Unit = definedExternally
    override fun getRadius(impostor: PhysicsImpostor): Number = definedExternally
    override fun getBoxSizeToRef(impostor: PhysicsImpostor, result: Vector3): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    override fun raycast(from: Vector3, to: Vector3): PhysicsRaycastResult = definedExternally
    companion object {
        var DISABLE_COLLISION_FLAG: Any = definedExternally
        var KINEMATIC_FLAG: Any = definedExternally
        var DISABLE_DEACTIVATION_FLAG: Any = definedExternally
    }
}
external open class ReflectionProbe(name: String, size: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, useFloat: Boolean? = definedExternally /* null */) {
    open var name: String = definedExternally
    open var _scene: Any = definedExternally
    open var _renderTargetTexture: Any = definedExternally
    open var _projectionMatrix: Any = definedExternally
    open var _viewMatrix: Any = definedExternally
    open var _target: Any = definedExternally
    open var _add: Any = definedExternally
    open var _attachedMesh: Any = definedExternally
    open var _invertYAxis: Any = definedExternally
    open var position: Vector3 = definedExternally
    open var samples: Number = definedExternally
    open var refreshRate: Number = definedExternally
    open fun getScene(): Scene = definedExternally
    open var cubeTexture: RenderTargetTexture = definedExternally
    open var renderList: Array<AbstractMesh> = definedExternally
    open fun attachToMesh(mesh: AbstractMesh): Unit = definedExternally
    open fun setRenderingAutoClearDepthStencil(renderingGroupId: Number, autoClearDepthStencil: Boolean): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun toString(fullDetails: Boolean? = definedExternally /* null */): String = definedExternally
    open fun getClassName(): String = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        fun Parse(parsedReflectionProbe: Any, scene: Scene, rootUrl: String): ReflectionProbe = definedExternally
    }
}
external var _BabylonLoaderRegistered: Boolean = definedExternally
external open class PBRBaseSimpleMaterial(name: String, scene: Scene) : PBRBaseMaterial {
    open var maxSimultaneousLights: Number = definedExternally
    open var disableLighting: Boolean = definedExternally
    open var environmentTexture: BaseTexture = definedExternally
    open var invertNormalMapX: Boolean = definedExternally
    open var invertNormalMapY: Boolean = definedExternally
    open var normalTexture: BaseTexture = definedExternally
    open var emissiveColor: Color3 = definedExternally
    open var emissiveTexture: BaseTexture = definedExternally
    open var occlusionStrength: Number = definedExternally
    open var occlusionTexture: BaseTexture = definedExternally
    open var alphaCutOff: Number = definedExternally
    open var doubleSided: Boolean = definedExternally
    open var lightmapTexture: BaseTexture = definedExternally
    open var useLightmapAsShadowmap: Boolean = definedExternally
    override fun getClassName(): String = definedExternally
}
external open class PBRMetallicRoughnessMaterial(name: String, scene: Scene) : PBRBaseSimpleMaterial {
    open var baseColor: Color3 = definedExternally
    open var baseTexture: BaseTexture = definedExternally
    open var metallic: Number = definedExternally
    open var roughness: Number = definedExternally
    open var metallicRoughnessTexture: BaseTexture = definedExternally
    override fun getClassName(): String = definedExternally
    override fun clone(name: String): PBRMetallicRoughnessMaterial = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        fun Parse(source: Any, scene: Scene, rootUrl: String): PBRMetallicRoughnessMaterial = definedExternally
    }
}
external open class PBRSpecularGlossinessMaterial(name: String, scene: Scene) : PBRBaseSimpleMaterial {
    open var diffuseColor: Color3 = definedExternally
    open var diffuseTexture: BaseTexture = definedExternally
    open var specularColor: Color3 = definedExternally
    open var glossiness: Number = definedExternally
    open var specularGlossinessTexture: BaseTexture = definedExternally
    override fun getClassName(): String = definedExternally
    override fun clone(name: String): PBRSpecularGlossinessMaterial = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        fun Parse(source: Any, scene: Scene, rootUrl: String): PBRSpecularGlossinessMaterial = definedExternally
    }
}
external open class ColorGradingTexture(url: String, scene: Scene) : BaseTexture {
    open var _textureMatrix: Any = definedExternally
    open var url: String = definedExternally
    open var _engine: Any = definedExternally
    override fun getTextureMatrix(): Matrix = definedExternally
    open var load3dlTexture: Any = definedExternally
    open var loadTexture: Any = definedExternally
    override fun clone(): ColorGradingTexture = definedExternally
    override fun delayLoad(): Unit = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var _noneEmptyLineRegex: Any = definedExternally
        fun Parse(parsedTexture: Any, scene: Scene): ColorGradingTexture = definedExternally
    }
}
external open class EquiRectangularCubeTexture(url: String, scene: Scene, size: Number, noMipmap: Boolean? = definedExternally /* null */, gammaSpace: Boolean? = definedExternally /* null */, onLoad: (() -> Unit)? = definedExternally /* null */, onError: ((message: String? /*= null*/, exception: Any? /*= null*/) -> Unit)? = definedExternally /* null */) : BaseTexture {
    open var _noMipmap: Any = definedExternally
    open var _onLoad: Any = definedExternally
    open var _onError: Any = definedExternally
    open var _size: Any = definedExternally
    open var _buffer: Any = definedExternally
    open var _width: Any = definedExternally
    open var _height: Any = definedExternally
    open var url: String = definedExternally
    override var coordinatesMode: Number = definedExternally
    open var loadImage: Any = definedExternally
    open var loadTexture: Any = definedExternally
    open var getFloat32ArrayFromArrayBuffer: Any = definedExternally
    override fun getClassName(): String = definedExternally
    override fun clone(): EquiRectangularCubeTexture = definedExternally
    companion object {
        var _FacesMapping: Any = definedExternally
    }
}
external open class TGATools {
    companion object {
        var _TYPE_INDEXED: Any = definedExternally
        var _TYPE_RGB: Any = definedExternally
        var _TYPE_GREY: Any = definedExternally
        var _TYPE_RLE_INDEXED: Any = definedExternally
        var _TYPE_RLE_RGB: Any = definedExternally
        var _TYPE_RLE_GREY: Any = definedExternally
        var _ORIGIN_MASK: Any = definedExternally
        var _ORIGIN_SHIFT: Any = definedExternally
        var _ORIGIN_BL: Any = definedExternally
        var _ORIGIN_BR: Any = definedExternally
        var _ORIGIN_UL: Any = definedExternally
        var _ORIGIN_UR: Any = definedExternally
        fun GetTGAHeader(data: Uint8Array): Any = definedExternally
        fun UploadContent(texture: InternalTexture, data: Uint8Array): Unit = definedExternally
        fun _getImageData8bits(header: Any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: Number, y_step: Number, y_end: Number, x_start: Number, x_step: Number, x_end: Number): Uint8Array = definedExternally
        fun _getImageData16bits(header: Any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: Number, y_step: Number, y_end: Number, x_start: Number, x_step: Number, x_end: Number): Uint8Array = definedExternally
        fun _getImageData24bits(header: Any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: Number, y_step: Number, y_end: Number, x_start: Number, x_step: Number, x_end: Number): Uint8Array = definedExternally
        fun _getImageData32bits(header: Any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: Number, y_step: Number, y_end: Number, x_start: Number, x_step: Number, x_end: Number): Uint8Array = definedExternally
        fun _getImageDataGrey8bits(header: Any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: Number, y_step: Number, y_end: Number, x_start: Number, x_step: Number, x_end: Number): Uint8Array = definedExternally
        fun _getImageDataGrey16bits(header: Any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: Number, y_step: Number, y_end: Number, x_start: Number, x_step: Number, x_end: Number): Uint8Array = definedExternally
    }
}
external open class _TGATextureLoader : IInternalTextureLoader {
    override var supportCascades: Boolean = definedExternally
    override fun canLoad(extension: String, textureFormatInUse: String, fallback: InternalTexture, isBase64: Boolean, isBuffer: Boolean): Boolean = definedExternally
    override fun transformUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
    override fun getFallbackTextureUrl(rootUrl: String, textureFormatInUse: String): String = definedExternally
	override fun loadCubeData(data: String, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(data: ArrayBuffer, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadCubeData(data: Array<dynamic /* String | ArrayBuffer */>, texture: InternalTexture, createPolynomials: Boolean, onLoad: (data: Any? /*= null*/) -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
	override fun loadData(data: ArrayBuffer, texture: InternalTexture, callback: (width: Number, height: Number, loadMipmap: Boolean, isCompressed: Boolean, done: () -> Unit, loadFailed: Boolean? /*= null*/) -> Unit)
}
external open class CustomProceduralTexture(name: String, texturePath: String, size: Number, scene: Scene, fallbackTexture: Texture? = definedExternally /* null */, generateMipMaps: Boolean? = definedExternally /* null */) : ProceduralTexture {
    open var _animate: Any = definedExternally
    open var _time: Any = definedExternally
    open var _config: Any = definedExternally
    open var _texturePath: Any = definedExternally
    open var _loadJson: Any = definedExternally
    override fun isReady(): Boolean = definedExternally
    override fun render(useCameraPostProcess: Boolean?): Unit = definedExternally
    open fun updateTextures(): Unit = definedExternally
    open fun updateShaderUniforms(): Unit = definedExternally
    open var animate: Boolean = definedExternally
}
external object noisePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class NoiseProceduralTexture(name: String, size: Number? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, fallbackTexture: Texture? = definedExternally /* null */, generateMipMaps: Boolean? = definedExternally /* null */) : ProceduralTexture {
    open var _time: Any = definedExternally
    open var brightness: Number = definedExternally
    open var octaves: Number = definedExternally
    open var persistence: Number = definedExternally
    open var animationSpeedFactor: Number = definedExternally
    open var _updateShaderUniforms: Any = definedExternally
    override fun _getDefines(): String = definedExternally
    override fun render(useCameraPostProcess: Boolean?): Unit = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        fun Parse(parsedTexture: Any, scene: Scene): NoiseProceduralTexture = definedExternally
    }
}
external open class RawCubeTexture(scene: Scene, data: Array<ArrayBufferView>, size: Number, format: Number? = definedExternally /* null */, type: Number? = definedExternally /* null */, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, compression: String? = definedExternally /* null */) : CubeTexture {
    open fun update(data: Array<ArrayBufferView>, format: Number, type: Number, invertY: Boolean, compression: String? = definedExternally /* null */): Unit = definedExternally
    open fun updateRGBDAsync(data: Array<Array<ArrayBufferView>>, sphericalPolynomial: SphericalPolynomial? = definedExternally /* null */, lodScale: Number? = definedExternally /* null */, lodOffset: Number? = definedExternally /* null */): Promise<Unit> = definedExternally
    override fun clone(): CubeTexture = definedExternally
    companion object {
        fun _UpdateRGBDAsync(internalTexture: InternalTexture, data: Array<Array<ArrayBufferView>>, sphericalPolynomial: SphericalPolynomial, lodScale: Number, lodOffset: Number): Promise<Unit> = definedExternally
    }
}
external open class RawTexture3D(data: ArrayBufferView, width: Number, height: Number, depth: Number, format: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, textureType: Number? = definedExternally /* null */) : Texture {
    open var format: Number = definedExternally
    open var _engine: Any = definedExternally
    open fun update(data: ArrayBufferView): Unit = definedExternally
}
external open class RefractionTexture(name: String, size: Number, scene: Scene, generateMipMaps: Boolean? = definedExternally /* null */) : RenderTargetTexture {
    open var refractionPlane: Plane = definedExternally
    open var depth: Number = definedExternally
    override fun clone(): RefractionTexture = definedExternally
    override fun serialize(): Any = definedExternally
}
external interface IHtmlElementTextureOptions {
    var generateMipMaps: Boolean? get() = definedExternally; set(value) = definedExternally
    var samplingMode: Number? get() = definedExternally; set(value) = definedExternally
    var engine: Engine
    var scene: Scene
}
external open class HtmlElementTexture : BaseTexture {
    constructor(name: String, element: HTMLCanvasElement, options: IHtmlElementTextureOptions)
    constructor(name: String, element: HTMLVideoElement, options: IHtmlElementTextureOptions)
    open var element: dynamic /* HTMLCanvasElement | HTMLVideoElement */ = definedExternally
    open var _textureMatrix: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _isVideo: Any = definedExternally
    open var _generateMipMaps: Any = definedExternally
    open var _samplingMode: Any = definedExternally
    open var _createInternalTexture: Any = definedExternally
    override fun getTextureMatrix(): Matrix = definedExternally
    open fun update(invertY: Boolean? = definedExternally /* null */): Unit = definedExternally
    companion object {
        var DefaultOptions: Any = definedExternally
    }
}
external open class WorkerPool(workers: Array<Worker>) : IDisposable {
    open var _workerInfos: Any = definedExternally
    open var _pendingActions: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun push(action: (worker: Worker, onComplete: () -> Unit) -> Unit): Unit = definedExternally
    open var _execute: Any = definedExternally
}
external interface `T$107` {
    var wasmUrl: String? get() = definedExternally; set(value) = definedExternally
    var wasmBinaryUrl: String? get() = definedExternally; set(value) = definedExternally
    var fallbackUrl: String? get() = definedExternally; set(value) = definedExternally
}
external interface IDracoCompressionConfiguration {
    var decoder: `T$107`
}
external interface `T$108` {
    @nativeGetter
    operator fun get(kind: String): Number?
    @nativeSetter
    operator fun set(kind: String, value: Number)
}
external open class DracoCompression(numWorkers: Number? = definedExternally /* null */) : IDisposable {
    open var _workerPoolPromise: Any = definedExternally
    open var _decoderModulePromise: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun whenReadyAsync(): Promise<Unit> = definedExternally
    open fun decodeMeshAsync(data: ArrayBuffer, attributes: `T$108`? = definedExternally /* null */): Promise<VertexData> = definedExternally
    open fun decodeMeshAsync(data: ArrayBufferView, attributes: `T$108`? = definedExternally /* null */): Promise<VertexData> = definedExternally
    companion object {
        var Configuration: IDracoCompressionConfiguration = definedExternally
        var DecoderAvailable: Boolean = definedExternally
        var DefaultNumWorkers: Number = definedExternally
        var GetDefaultNumWorkers: Any = definedExternally
        var _Default: Any = definedExternally
        var Default: DracoCompression = definedExternally
    }
}
external open class CSG {
    open var polygons: Any = definedExternally
    open var matrix: Matrix = definedExternally
    open var position: Vector3 = definedExternally
    open var rotation: Vector3 = definedExternally
    open var rotationQuaternion: Quaternion = definedExternally
    open var scaling: Vector3 = definedExternally
    open fun clone(): CSG = definedExternally
    open fun union(csg: CSG): CSG = definedExternally
    open fun unionInPlace(csg: CSG): Unit = definedExternally
    open fun subtract(csg: CSG): CSG = definedExternally
    open fun subtractInPlace(csg: CSG): Unit = definedExternally
    open fun intersect(csg: CSG): CSG = definedExternally
    open fun intersectInPlace(csg: CSG): Unit = definedExternally
    open fun inverse(): CSG = definedExternally
    open fun inverseInPlace(): Unit = definedExternally
    open fun copyTransformAttributes(csg: CSG): CSG = definedExternally
    open fun buildMeshGeometry(name: String, scene: Scene, keepSubMeshes: Boolean): Mesh = definedExternally
    open fun toMesh(name: String, material: Material, scene: Scene, keepSubMeshes: Boolean): Mesh = definedExternally
    companion object {
        fun FromMesh(mesh: Mesh): CSG = definedExternally
        var FromPolygons: Any = definedExternally
    }
}
external open class TrailMesh(name: String, generator: AbstractMesh, scene: Scene, diameter: Number? = definedExternally /* null */, length: Number? = definedExternally /* null */, autoStart: Boolean? = definedExternally /* null */) : Mesh {
    open var _generator: Any = definedExternally
    open var _autoStart: Any = definedExternally
    open var _running: Any = definedExternally
    open var _diameter: Any = definedExternally
    open var _length: Any = definedExternally
    open var _sectionPolygonPointsCount: Any = definedExternally
    open var _sectionVectors: Any = definedExternally
    open var _sectionNormalVectors: Any = definedExternally
    open var _beforeRenderObserver: Any = definedExternally
    override fun getClassName(): String = definedExternally
    open var _createMesh: Any = definedExternally
    open fun start(): Unit = definedExternally
    open fun stop(): Unit = definedExternally
    open fun update(): Unit = definedExternally
    open fun clone(name: String?, newGenerator: AbstractMesh): TrailMesh = definedExternally
    override fun serialize(serializationObject: Any): Unit = definedExternally
    companion object {
        fun Parse(parsedMesh: Any, scene: Scene): TrailMesh = definedExternally
    }
}
external interface `T$109` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tube: Number? get() = definedExternally; set(value) = definedExternally
    var radialSegments: Number? get() = definedExternally; set(value) = definedExternally
    var tubularSegments: Number? get() = definedExternally; set(value) = definedExternally
    var p: Number? get() = definedExternally; set(value) = definedExternally
    var q: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external open class TorusKnotBuilder {
    companion object {
        fun CreateTorusKnot(name: String, options: `T$109`, scene: Any): Mesh = definedExternally
    }
}
external open class Polygon {
    companion object {
        fun Rectangle(xmin: Number, ymin: Number, xmax: Number, ymax: Number): Array<Vector2> = definedExternally
        fun Circle(radius: Number, cx: Number? = definedExternally /* null */, cy: Number? = definedExternally /* null */, numberOfSides: Number? = definedExternally /* null */): Array<Vector2> = definedExternally
        fun Parse(input: String): Array<Vector2> = definedExternally
        fun StartingAt(x: Number, y: Number): Path2 = definedExternally
    }
}
external open class PolygonMeshBuilder {
    constructor(name: String, contours: Path2, scene: Scene? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */)
    constructor(name: String, contours: Array<Vector2>, scene: Scene? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */)
    constructor(name: String, contours: Any, scene: Scene? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */)
    open var _points: Any = definedExternally
    open var _outlinepoints: Any = definedExternally
    open var _holes: Any = definedExternally
    open var _name: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _epoints: Any = definedExternally
    open var _eholes: Any = definedExternally
    open var _addToepoint: Any = definedExternally
    open var bjsEarcut: Any = definedExternally
    open fun addHole(hole: Array<Vector2>): PolygonMeshBuilder = definedExternally
    open fun build(updatable: Boolean? = definedExternally /* null */, depth: Number? = definedExternally /* null */): Mesh = definedExternally
    open fun buildVertexData(depth: Number? = definedExternally /* null */): VertexData = definedExternally
    open var addSide: Any = definedExternally
}
external interface `T$110` {
    var shape: Array<Vector3>
    var holes: Array<Array<Vector3>>? get() = definedExternally; set(value) = definedExternally
    var depth: Number? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external open class PolygonBuilder {
    companion object {
        fun CreatePolygon(name: String, options: `T$110`, scene: Scene? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */): Mesh = definedExternally
        fun ExtrudePolygon(name: String, options: `T$110`, scene: Scene? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$111` {
    var shape: Array<Vector3>
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var clip: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var closed: Boolean? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class LatheBuilder {
    companion object {
        fun CreateLathe(name: String, options: `T$111`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$112` {
    @nativeInvoke
    operator fun invoke(i: Number, distance: Number): Number
}
external interface `T$113` {
    var path: Array<Vector3>
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var radiusFunction: `T$112`? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class TubeBuilder {
    companion object {
        fun CreateTube(name: String, options: `T$113`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$114` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var radiusX: Number? get() = definedExternally; set(value) = definedExternally
    var radiusY: Number? get() = definedExternally; set(value) = definedExternally
    var radiusZ: Number? get() = definedExternally; set(value) = definedExternally
    var flat: Boolean? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external open class IcoSphereBuilder {
    companion object {
        fun CreateIcoSphere(name: String, options: `T$114`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
    }
}
external interface `T$115` {
    var position: Vector3? get() = definedExternally; set(value) = definedExternally
    var normal: Vector3? get() = definedExternally; set(value) = definedExternally
    var size: Vector3? get() = definedExternally; set(value) = definedExternally
    var angle: Number? get() = definedExternally; set(value) = definedExternally
}
external open class DecalBuilder {
    companion object {
        fun CreateDecal(name: String, sourceMesh: AbstractMesh, options: `T$115`): Mesh = definedExternally
    }
}
external interface `T$116` {
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var depth: Number? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}

external interface `T$118` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$119` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var radiusX: Number? get() = definedExternally; set(value) = definedExternally
    var radiusY: Number? get() = definedExternally; set(value) = definedExternally
    var radiusZ: Number? get() = definedExternally; set(value) = definedExternally
    var flat: Boolean? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$120` {
    var pathArray: Array<Array<Vector3>>
    var closeArray: Boolean? get() = definedExternally; set(value) = definedExternally
    var closePath: Boolean? get() = definedExternally; set(value) = definedExternally
    var offset: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
    var uvs: Array<Vector2>? get() = definedExternally; set(value) = definedExternally
    var colors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
}
external interface `T$121` {
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var diameterTop: Number? get() = definedExternally; set(value) = definedExternally
    var diameterBottom: Number? get() = definedExternally; set(value) = definedExternally
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var hasRings: Boolean? get() = definedExternally; set(value) = definedExternally
    var enclose: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$122` {
    var diameter: Number? get() = definedExternally; set(value) = definedExternally
    var thickness: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$123` {
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tube: Number? get() = definedExternally; set(value) = definedExternally
    var radialSegments: Number? get() = definedExternally; set(value) = definedExternally
    var tubularSegments: Number? get() = definedExternally; set(value) = definedExternally
    var p: Number? get() = definedExternally; set(value) = definedExternally
    var q: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$124` {
    var lines: Array<Array<Vector3>>
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var instance: LinesMesh? get() = definedExternally; set(value) = definedExternally
    var colors: Array<Array<Color4>>? get() = definedExternally; set(value) = definedExternally
    var useVertexAlpha: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$125` {
    var points: Array<Vector3>
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var instance: LinesMesh? get() = definedExternally; set(value) = definedExternally
    var colors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var useVertexAlpha: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$126` {
    var points: Array<Vector3>
    var dashSize: Number? get() = definedExternally; set(value) = definedExternally
    var gapSize: Number? get() = definedExternally; set(value) = definedExternally
    var dashNb: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var instance: LinesMesh? get() = definedExternally; set(value) = definedExternally
}
external interface `T$127` {
    var shape: Array<Vector3>
    var path: Array<Vector3>
    var scale: Number? get() = definedExternally; set(value) = definedExternally
    var rotation: Number? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$128` {
    var shape: Array<Vector3>
    var path: Array<Vector3>
    var scaleFunction: Any? get() = definedExternally; set(value) = definedExternally
    var rotationFunction: Any? get() = definedExternally; set(value) = definedExternally
    var ribbonCloseArray: Boolean? get() = definedExternally; set(value) = definedExternally
    var ribbonClosePath: Boolean? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$129` {
    var shape: Array<Vector3>
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var clip: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var closed: Boolean? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$130` {
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sourcePlane: Plane? get() = definedExternally; set(value) = definedExternally
}
external interface `T$131` {
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisionsX: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisionsY: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$132` {
    var w: Number
    var h: Number
}
external interface `T$133` {
    var xmin: Number
    var zmin: Number
    var xmax: Number
    var zmax: Number
    var subdivisions: `T$132`? get() = definedExternally; set(value) = definedExternally
    var precision: `T$132`? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$134` {
    var width: Number? get() = definedExternally; set(value) = definedExternally
    var height: Number? get() = definedExternally; set(value) = definedExternally
    var subdivisions: Number? get() = definedExternally; set(value) = definedExternally
    var minHeight: Number? get() = definedExternally; set(value) = definedExternally
    var maxHeight: Number? get() = definedExternally; set(value) = definedExternally
    var colorFilter: Color3? get() = definedExternally; set(value) = definedExternally
    var alphaFilter: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var onReady: ((mesh: GroundMesh) -> Unit)? get() = definedExternally; set(value) = definedExternally
}
external interface `T$135` {
    var shape: Array<Vector3>
    var holes: Array<Array<Vector3>>? get() = definedExternally; set(value) = definedExternally
    var depth: Number? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$136` {
    @nativeInvoke
    operator fun invoke(i: Number, distance: Number): Number
}
external interface `T$137` {
    var path: Array<Vector3>
    var radius: Number? get() = definedExternally; set(value) = definedExternally
    var tessellation: Number? get() = definedExternally; set(value) = definedExternally
    var radiusFunction: `T$136`? get() = definedExternally; set(value) = definedExternally
    var cap: Number? get() = definedExternally; set(value) = definedExternally
    var arc: Number? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var instance: Mesh? get() = definedExternally; set(value) = definedExternally
    var invertUV: Boolean? get() = definedExternally; set(value) = definedExternally
}
external interface `T$138` {
    var type: Number? get() = definedExternally; set(value) = definedExternally
    var size: Number? get() = definedExternally; set(value) = definedExternally
    var sizeX: Number? get() = definedExternally; set(value) = definedExternally
    var sizeY: Number? get() = definedExternally; set(value) = definedExternally
    var sizeZ: Number? get() = definedExternally; set(value) = definedExternally
    var custom: Any? get() = definedExternally; set(value) = definedExternally
    var faceUV: Array<Vector4>? get() = definedExternally; set(value) = definedExternally
    var faceColors: Array<Color4>? get() = definedExternally; set(value) = definedExternally
    var flat: Boolean? get() = definedExternally; set(value) = definedExternally
    var updatable: Boolean? get() = definedExternally; set(value) = definedExternally
    var sideOrientation: Number? get() = definedExternally; set(value) = definedExternally
    var frontUVs: Vector4? get() = definedExternally; set(value) = definedExternally
    var backUVs: Vector4? get() = definedExternally; set(value) = definedExternally
}
external interface `T$139` {
    var position: Vector3? get() = definedExternally; set(value) = definedExternally
    var normal: Vector3? get() = definedExternally; set(value) = definedExternally
    var size: Vector3? get() = definedExternally; set(value) = definedExternally
    var angle: Number? get() = definedExternally; set(value) = definedExternally
}
external open class MeshBuilder {
    companion object {
        fun CreateBox(name: String, options: `T$116`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateSphere(name: String, options: SphereOptions, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateDisc(name: String, options: `T$118`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateIcoSphere(name: String, options: `T$119`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateRibbon(name: String, options: `T$120`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateCylinder(name: String, options: `T$121`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateTorus(name: String, options: `T$122`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateTorusKnot(name: String, options: `T$123`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateLineSystem(name: String, options: `T$124`, scene: Scene): LinesMesh = definedExternally
        fun CreateLines(name: String, options: `T$125`, scene: Scene? = definedExternally /* null */): LinesMesh = definedExternally
        fun CreateDashedLines(name: String, options: `T$126`, scene: Scene? = definedExternally /* null */): LinesMesh = definedExternally
        fun ExtrudeShape(name: String, options: `T$127`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun ExtrudeShapeCustom(name: String, options: `T$128`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateLathe(name: String, options: `T$129`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreatePlane(name: String, options: `T$130`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateGround(name: String, options: `T$131`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateTiledGround(name: String, options: `T$133`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateGroundFromHeightMap(name: String, url: String, options: `T$134`, scene: Scene? = definedExternally /* null */): GroundMesh = definedExternally
        fun CreatePolygon(name: String, options: `T$135`, scene: Scene? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */): Mesh = definedExternally
        fun ExtrudePolygon(name: String, options: `T$135`, scene: Scene? = definedExternally /* null */, earcutInjection: Any? = definedExternally /* null */): Mesh = definedExternally
        fun CreateTube(name: String, options: `T$137`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreatePolyhedron(name: String, options: `T$138`, scene: Scene? = definedExternally /* null */): Mesh = definedExternally
        fun CreateDecal(name: String, sourceMesh: AbstractMesh, options: `T$139`): Mesh = definedExternally
    }
}
external interface ISimplifier {
    fun simplify(settings: ISimplificationSettings, successCallback: (simplifiedMeshes: Mesh) -> Unit, errorCallback: (() -> Unit)? = definedExternally /* null */)
}
external interface ISimplificationSettings {
    var quality: Number
    var distance: Number
    var optimizeMesh: Boolean?
}
external open class SimplificationSettings(quality: Number, distance: Number, optimizeMesh: Boolean? = definedExternally /* null */) : ISimplificationSettings {
    override var quality: Number = definedExternally
    override var distance: Number = definedExternally
    override var optimizeMesh: Boolean? = definedExternally
}
external interface ISimplificationTask {
    var settings: Array<ISimplificationSettings>
    var simplificationType: Number /* 0 */
    var mesh: Mesh
    var successCallback: (() -> Unit)? get() = definedExternally; set(value) = definedExternally
    var parallelProcessing: Boolean
}
external open class SimplificationQueue {
    open var _simplificationArray: Any = definedExternally
    open var running: Boolean = definedExternally
    open fun addTask(task: ISimplificationTask): Unit = definedExternally
    open fun executeNext(): Unit = definedExternally
    open fun runSimplification(task: ISimplificationTask): Unit = definedExternally
    open var getSimplifier: Any = definedExternally
}
external enum class SimplificationType {
    QUADRATIC /* = 0 */
}
external open class SimplicationQueueSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _beforeCameraUpdate: Any = definedExternally
}
external open class Database(urlToScene: String, callbackManifestChecked: (checked: Boolean) -> Any, disableManifestCheck: Boolean? = definedExternally /* null */) : IOfflineProvider {
    open var _callbackManifestChecked: Any = definedExternally
    open var _currentSceneUrl: Any = definedExternally
    open var _db: Any = definedExternally
    open var _enableSceneOffline: Any = definedExternally
    open var _enableTexturesOffline: Any = definedExternally
    open var _manifestVersionFound: Any = definedExternally
    open var _mustUpdateRessources: Any = definedExternally
    open var _hasReachedQuota: Any = definedExternally
    open var _isSupported: Any = definedExternally
    open var _idbFactory: Any = definedExternally
    override var enableSceneOffline: Boolean = definedExternally
    override var enableTexturesOffline: Boolean = definedExternally
    open var _checkManifestFile: Any = definedExternally
	override fun open(successCallback: () -> Unit, errorCallback: () -> Unit): Unit = definedExternally
    override fun loadImage(url: String, image: HTMLImageElement): Unit = definedExternally
    open var _loadImageFromDBAsync: Any = definedExternally
    open var _saveImageIntoDBAsync: Any = definedExternally
    open var _checkVersionFromDB: Any = definedExternally
    open var _loadVersionFromDBAsync: Any = definedExternally
    open var _saveVersionIntoDBAsync: Any = definedExternally
	override fun loadFile(url: String, sceneLoaded: (data: Any) -> Unit, progressCallBack: ((data: Any) -> Unit)?  /* null */, errorCallback: (() -> Unit)?  /* null */, useArrayBuffer: Boolean?  /* null */): Unit = definedExternally
    open var _loadFileAsync: Any = definedExternally
    open var _saveFileAsync: Any = definedExternally
    companion object {
        var IsUASupportingBlobStorage: Any = definedExternally
        var IDBStorageEnabled: Boolean = definedExternally
        var _ParseURL: Any = definedExternally
        var _ReturnFullUrlLocation: Any = definedExternally
        var _ValidateXHRData: Any = definedExternally
    }
}
external object gpuUpdateParticlesPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object gpuUpdateParticlesVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object clipPlaneFragmentDeclaration2 {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object gpuRenderParticlesPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object clipPlaneVertexDeclaration2 {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object gpuRenderParticlesVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class GPUParticleSystem(name: String, options: Any?, scene: Scene, isAnimationSheetEnabled: Boolean? = definedExternally /* null */) : BaseParticleSystem, IDisposable, IParticleSystem, IAnimatable {
    override var layerMask: Number = definedExternally
    open var _capacity: Any = definedExternally
    open var _activeCount: Any = definedExternally
    open var _currentActiveCount: Any = definedExternally
    open var _accumulatedCount: Any = definedExternally
    open var _renderEffect: Any = definedExternally
    open var _updateEffect: Any = definedExternally
    open var _buffer0: Any = definedExternally
    open var _buffer1: Any = definedExternally
    open var _spriteBuffer: Any = definedExternally
    open var _updateVAO: Any = definedExternally
    open var _renderVAO: Any = definedExternally
    open var _targetIndex: Any = definedExternally
    open var _sourceBuffer: Any = definedExternally
    open var _targetBuffer: Any = definedExternally
    open var _engine: Any = definedExternally
    open var _currentRenderId: Any = definedExternally
    open var _started: Any = definedExternally
    open var _stopped: Any = definedExternally
    open var _timeDelta: Any = definedExternally
    open var _randomTexture: Any = definedExternally
    open var _randomTexture2: Any = definedExternally
    open var _attributesStrideSize: Any = definedExternally
    open var _updateEffectOptions: Any = definedExternally
    open var _randomTextureSize: Any = definedExternally
    open var _actualFrame: Any = definedExternally
    open var _rawTextureWidth: Any = definedExternally
    open var onDisposeObservable: Observable<GPUParticleSystem> = definedExternally
    override fun getCapacity(): Number = definedExternally
    override var forceDepthWrite: Boolean = definedExternally
    open var activeParticleCount: Number = definedExternally
    open var _preWarmDone: Any = definedExternally
    override fun isReady(): Boolean = definedExternally
    override fun isStarted(): Boolean = definedExternally
    override fun start(delay: Number?): Unit = definedExternally
    override fun stop(): Unit = definedExternally
    override fun reset(): Unit = definedExternally
    open fun getClassName(): String = definedExternally
    open var _colorGradientsTexture: Any = definedExternally
    override fun _removeGradientAndTexture(gradient: Number, gradients: Array<IValueGradient>, texture: RawTexture): BaseParticleSystem = definedExternally
    override fun addColorGradient(gradient: Number, color1: Color4, color2: Color4?): GPUParticleSystem = definedExternally
    override fun removeColorGradient(gradient: Number): GPUParticleSystem = definedExternally
    open var _angularSpeedGradientsTexture: Any = definedExternally
    open var _sizeGradientsTexture: Any = definedExternally
    open var _velocityGradientsTexture: Any = definedExternally
    open var _limitVelocityGradientsTexture: Any = definedExternally
    open var _dragGradientsTexture: Any = definedExternally
    open var _addFactorGradient: Any = definedExternally
	override fun addSizeGradient(gradient: Number, factor: Number, factor2: Number?): GPUParticleSystem = definedExternally
    override fun removeSizeGradient(gradient: Number): GPUParticleSystem = definedExternally
	override fun addAngularSpeedGradient(gradient: Number, factor: Number, factor2: Number?): GPUParticleSystem = definedExternally
    override fun removeAngularSpeedGradient(gradient: Number): GPUParticleSystem = definedExternally
	override fun addVelocityGradient(gradient: Number, factor: Number, factor2: Number?): GPUParticleSystem = definedExternally
    override fun removeVelocityGradient(gradient: Number): GPUParticleSystem = definedExternally
	override fun addLimitVelocityGradient(gradient: Number, factor: Number, factor2: Number?): GPUParticleSystem = definedExternally
    override fun removeLimitVelocityGradient(gradient: Number): GPUParticleSystem = definedExternally
	override fun addDragGradient(gradient: Number, factor: Number, factor2: Number?): GPUParticleSystem = definedExternally
    override fun removeDragGradient(gradient: Number): GPUParticleSystem = definedExternally
    override fun addEmitRateGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeEmitRateGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addStartSizeGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeStartSizeGradient(gradient: Number): IParticleSystem = definedExternally
    override fun addColorRemapGradient(gradient: Number, min: Number, max: Number): IParticleSystem = definedExternally
    open fun removeColorRemapGradient(): IParticleSystem = definedExternally
    override fun addAlphaRemapGradient(gradient: Number, min: Number, max: Number): IParticleSystem = definedExternally
    open fun removeAlphaRemapGradient(): IParticleSystem = definedExternally
    override fun addRampGradient(gradient: Number, color: Color3): IParticleSystem = definedExternally
    open fun removeRampGradient(): IParticleSystem = definedExternally
    override fun getRampGradients(): Array<Color3Gradient> = definedExternally
    override var useRampGradients: Boolean = definedExternally
    override fun addLifeTimeGradient(gradient: Number, factor: Number, factor2: Number?): IParticleSystem = definedExternally
    override fun removeLifeTimeGradient(gradient: Number): IParticleSystem = definedExternally
    override fun _reset(): Unit = definedExternally
    open var _createUpdateVAO: Any = definedExternally
    open var _createRenderVAO: Any = definedExternally
    open var _initialize: Any = definedExternally
    open fun _recreateUpdateEffect(): Unit = definedExternally
    open fun _recreateRenderEffect(): Unit = definedExternally
    override fun animate(preWarm: Boolean?  /* null */): Unit = definedExternally
    open var _createFactorGradientTexture: Any = definedExternally
    open var _createSizeGradientTexture: Any = definedExternally
    open var _createAngularSpeedGradientTexture: Any = definedExternally
    open var _createVelocityGradientTexture: Any = definedExternally
    open var _createLimitVelocityGradientTexture: Any = definedExternally
    open var _createDragGradientTexture: Any = definedExternally
    open var _createColorGradientTexture: Any = definedExternally
	override fun render(preWarm: Boolean?  /* null */): Number = definedExternally
    override fun rebuild(): Unit = definedExternally
    open var _releaseBuffers: Any = definedExternally
    open var _releaseVAOs: Any = definedExternally
	override fun dispose(): Unit = definedExternally
	override fun dispose(disposeTexture: Boolean?): Unit = definedExternally
    override fun clone(name: String, newEmitter: Any): GPUParticleSystem = definedExternally
    override fun serialize(): Any = definedExternally
    companion object {
        var IsSupported: Boolean = definedExternally
        fun Parse(parsedParticleSystem: Any, scene: Scene, rootUrl: String, doNotStart: Boolean? = definedExternally /* null */): GPUParticleSystem = definedExternally
    }
}
external interface `T$140` {
    var diameter: Number
    var segments: Number
    var color: Color3
}
external open class ParticleSystemSet : IDisposable {
    open var _emitterCreationOptions: Any = definedExternally
    open var _emitterNode: Any = definedExternally
    open var systems: Array<IParticleSystem> = definedExternally
    open var emitterNode: TransformNode = definedExternally
    open fun setEmitterAsSphere(options: `T$140`, renderingGroupId: Number, scene: Scene): Unit = definedExternally
    open fun start(emitter: AbstractMesh? = definedExternally /* null */): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        fun Parse(data: Any, scene: Scene, gpu: Boolean? = definedExternally /* null */): ParticleSystemSet = definedExternally
    }
}
external open class ParticleHelper {
    companion object {
        var BaseAssetsUrl: String = definedExternally
        fun CreateDefault(emitter: Vector3, capacity: Number? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, useGPU: Boolean? = definedExternally /* null */): IParticleSystem = definedExternally
        fun CreateDefault(emitter: AbstractMesh, capacity: Number? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, useGPU: Boolean? = definedExternally /* null */): IParticleSystem = definedExternally
        fun CreateAsync(type: String, scene: Scene, gpu: Boolean? = definedExternally /* null */): Promise<ParticleSystemSet> = definedExternally
        fun ExportSet(systems: Array<IParticleSystem>): ParticleSystemSet = definedExternally
    }
}
external var _IDoNeedToBeInTheBuild: Number = definedExternally
external open class PhysicsEngineSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
}
external open class PhysicsHelper(scene: Scene) {
    open var _scene: Any = definedExternally
    open var _physicsEngine: Any = definedExternally
    open fun applyRadialExplosionImpulse(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, falloff: Number? /* 0 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionImpulse(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, falloff: Number? /* 1 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionImpulse(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions, strength: Number? = definedExternally /* null */, falloff: Number? /* 0 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionImpulse(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions, strength: Number? = definedExternally /* null */, falloff: Number? /* 1 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionForce(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, falloff: Number? /* 0 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionForce(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, falloff: Number? /* 1 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionForce(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions, strength: Number? = definedExternally /* null */, falloff: Number? /* 0 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionForce(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions, strength: Number? = definedExternally /* null */, falloff: Number? /* 1 */ = definedExternally /* null */): PhysicsRadialExplosionEvent = definedExternally
    open fun gravitationalField(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, falloff: Number? /* 0 */ = definedExternally /* null */): PhysicsGravitationalFieldEvent = definedExternally
    open fun gravitationalField(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, falloff: Number? /* 1 */ = definedExternally /* null */): PhysicsGravitationalFieldEvent = definedExternally
    open fun gravitationalField(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions, strength: Number? = definedExternally /* null */, falloff: Number? /* 0 */ = definedExternally /* null */): PhysicsGravitationalFieldEvent = definedExternally
    open fun gravitationalField(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions, strength: Number? = definedExternally /* null */, falloff: Number? /* 1 */ = definedExternally /* null */): PhysicsGravitationalFieldEvent = definedExternally
    open fun updraft(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, updraftMode: Number? /* 0 */ = definedExternally /* null */): PhysicsUpdraftEvent = definedExternally
    open fun updraft(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, updraftMode: Number? /* 1 */ = definedExternally /* null */): PhysicsUpdraftEvent = definedExternally
    open fun updraft(origin: Vector3, radiusOrEventOptions: PhysicsUpdraftEventOptions, strength: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, updraftMode: Number? /* 0 */ = definedExternally /* null */): PhysicsUpdraftEvent = definedExternally
    open fun updraft(origin: Vector3, radiusOrEventOptions: PhysicsUpdraftEventOptions, strength: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, updraftMode: Number? /* 1 */ = definedExternally /* null */): PhysicsUpdraftEvent = definedExternally
    open fun vortex(origin: Vector3, radiusOrEventOptions: Number, strength: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */): PhysicsVortexEvent = definedExternally
    open fun vortex(origin: Vector3, radiusOrEventOptions: PhysicsVortexEventOptions, strength: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */): PhysicsVortexEvent = definedExternally
    open fun applyRadialExplosionImpulse(origin: Vector3, radiusOrEventOptions: Number): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionImpulse(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionForce(origin: Vector3, radiusOrEventOptions: Number): PhysicsRadialExplosionEvent = definedExternally
    open fun applyRadialExplosionForce(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions): PhysicsRadialExplosionEvent = definedExternally
    open fun gravitationalField(origin: Vector3, radiusOrEventOptions: Number): PhysicsGravitationalFieldEvent = definedExternally
    open fun gravitationalField(origin: Vector3, radiusOrEventOptions: PhysicsRadialExplosionEventOptions): PhysicsGravitationalFieldEvent = definedExternally
    open fun updraft(origin: Vector3, radiusOrEventOptions: Number): PhysicsUpdraftEvent = definedExternally
    open fun updraft(origin: Vector3, radiusOrEventOptions: PhysicsUpdraftEventOptions): PhysicsUpdraftEvent = definedExternally
}
external open class PhysicsRadialExplosionEvent(_scene: Scene, _options: PhysicsRadialExplosionEventOptions) {
    open var _scene: Any = definedExternally
    open var _options: Any = definedExternally
    open var _sphere: Any = definedExternally
    open var _dataFetched: Any = definedExternally
    open fun getData(): PhysicsRadialExplosionEventData = definedExternally
    open fun getImpostorHitData(impostor: PhysicsImpostor, origin: Vector3): PhysicsHitData = definedExternally
    open fun triggerAffectedImpostorsCallback(affectedImpostorsWithData: Array<PhysicsAffectedImpostorWithData>): Unit = definedExternally
    open fun dispose(force: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _prepareSphere: Any = definedExternally
    open var _intersectsWithSphere: Any = definedExternally
}
external open class PhysicsGravitationalFieldEvent(_physicsHelper: PhysicsHelper, _scene: Scene, _origin: Vector3, _options: PhysicsRadialExplosionEventOptions) {
    open var _physicsHelper: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _origin: Any = definedExternally
    open var _options: Any = definedExternally
    open var _tickCallback: Any = definedExternally
    open var _sphere: Any = definedExternally
    open var _dataFetched: Any = definedExternally
    open fun getData(): PhysicsGravitationalFieldEventData = definedExternally
    open fun enable(): Unit = definedExternally
    open fun disable(): Unit = definedExternally
    open fun dispose(force: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _tick: Any = definedExternally
}
external open class PhysicsUpdraftEvent(_scene: Scene, _origin: Vector3, _options: PhysicsUpdraftEventOptions) {
    open var _scene: Any = definedExternally
    open var _origin: Any = definedExternally
    open var _options: Any = definedExternally
    open var _physicsEngine: Any = definedExternally
    open var _originTop: Any = definedExternally
    open var _originDirection: Any = definedExternally
    open var _tickCallback: Any = definedExternally
    open var _cylinder: Any = definedExternally
    open var _cylinderPosition: Any = definedExternally
    open var _dataFetched: Any = definedExternally
    open fun getData(): PhysicsUpdraftEventData = definedExternally
    open fun enable(): Unit = definedExternally
    open fun disable(): Unit = definedExternally
    open fun dispose(force: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var getImpostorHitData: Any = definedExternally
    open var _tick: Any = definedExternally
    open var _prepareCylinder: Any = definedExternally
    open var _intersectsWithCylinder: Any = definedExternally
}
external open class PhysicsVortexEvent(_scene: Scene, _origin: Vector3, _options: PhysicsVortexEventOptions) {
    open var _scene: Any = definedExternally
    open var _origin: Any = definedExternally
    open var _options: Any = definedExternally
    open var _physicsEngine: Any = definedExternally
    open var _originTop: Any = definedExternally
    open var _tickCallback: Any = definedExternally
    open var _cylinder: Any = definedExternally
    open var _cylinderPosition: Any = definedExternally
    open var _dataFetched: Any = definedExternally
    open fun getData(): PhysicsVortexEventData = definedExternally
    open fun enable(): Unit = definedExternally
    open fun disable(): Unit = definedExternally
    open fun dispose(force: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var getImpostorHitData: Any = definedExternally
    open var _tick: Any = definedExternally
    open var _prepareCylinder: Any = definedExternally
    open var _intersectsWithCylinder: Any = definedExternally
}
external interface `T$141` {
    var segments: Number
    var diameter: Number
}
external open class PhysicsRadialExplosionEventOptions {
    open var radius: Number = definedExternally
    open var strength: Number = definedExternally
    open var falloff: dynamic /* Number /* 0 */ | Number /* 1 */ */ = definedExternally
    open var sphere: `T$141` = definedExternally
    open var affectedImpostorsCallback: (affectedImpostorsWithData: Array<PhysicsAffectedImpostorWithData>) -> Unit = definedExternally
}
external open class PhysicsUpdraftEventOptions {
    open var radius: Number = definedExternally
    open var strength: Number = definedExternally
    open var height: Number = definedExternally
    open var updraftMode: dynamic /* Number /* 0 */ | Number /* 1 */ */ = definedExternally
}
external open class PhysicsVortexEventOptions {
    open var radius: Number = definedExternally
    open var strength: Number = definedExternally
    open var height: Number = definedExternally
    open var centripetalForceThreshold: Number = definedExternally
    open var centripetalForceMultiplier: Number = definedExternally
    open var centrifugalForceMultiplier: Number = definedExternally
    open var updraftForceMultiplier: Number = definedExternally
}
external enum class PhysicsRadialImpulseFalloff {
    Constant /* = 0 */,
    Linear /* = 1 */
}
external enum class PhysicsUpdraftMode {
    Center /* = 0 */,
    Perpendicular /* = 1 */
}
external interface PhysicsHitData {
    var force: Vector3
    var contactPoint: Vector3
    var distanceFromOrigin: Number
}
external interface PhysicsRadialExplosionEventData {
    var sphere: Mesh
}
external interface PhysicsGravitationalFieldEventData {
    var sphere: Mesh
}
external interface PhysicsUpdraftEventData {
    var cylinder: Mesh
}
external interface PhysicsVortexEventData {
    var cylinder: Mesh
}
external interface PhysicsAffectedImpostorWithData {
    var impostor: PhysicsImpostor
    var hitData: PhysicsHitData
}
external object blackAndWhitePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class BlackAndWhitePostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    open var degree: Number = definedExternally
}
external open class PostProcessRenderEffect(engine: Engine, name: String, getPostProcesses: () -> dynamic /* PostProcess | Array<PostProcess> */, singleInstance: Boolean? = definedExternally /* null */) {
    open var _postProcesses: Any = definedExternally
    open var _getPostProcesses: Any = definedExternally
    open var _singleInstance: Any = definedExternally
    open var _cameras: Any = definedExternally
    open var _indicesForCamera: Any = definedExternally
    open var _name: String = definedExternally
    open var isSupported: Boolean = definedExternally
    open fun _update(): Unit = definedExternally
    open fun _attachCameras(cameras: Camera): Unit = definedExternally
    open fun _attachCameras(cameras: Array<Camera>): Unit = definedExternally
    open fun _detachCameras(cameras: Camera): Unit = definedExternally
    open fun _detachCameras(cameras: Array<Camera>): Unit = definedExternally
    open fun _enable(cameras: Camera): Unit = definedExternally
    open fun _enable(cameras: Array<Camera>): Unit = definedExternally
    open fun _disable(cameras: Camera): Unit = definedExternally
    open fun _disable(cameras: Array<Camera>): Unit = definedExternally
    open fun getPostProcesses(camera: Camera? = definedExternally /* null */): Array<PostProcess> = definedExternally
}
external object extractHighlightsPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class ExtractHighlightsPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var threshold: Number = definedExternally
    open var _exposure: Number = definedExternally
    open var _inputPostProcess: PostProcess = definedExternally
}
external object bloomMergePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class BloomMergePostProcess : PostProcess {
    constructor(name: String, originalFromInput: PostProcess, blurred: PostProcess, weight: Number, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, originalFromInput: PostProcess, blurred: PostProcess, weight: Number, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var weight: Number = definedExternally
}
external open class BloomEffect(scene: Scene, bloomScale: Number, bloomWeight: Number, bloomKernel: Number, pipelineTextureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */) : PostProcessRenderEffect {
    open var bloomScale: Any = definedExternally
    open var _effects: Array<PostProcess> = definedExternally
    open var _downscale: ExtractHighlightsPostProcess = definedExternally
    open var _blurX: Any = definedExternally
    open var _blurY: Any = definedExternally
    open var _merge: Any = definedExternally
    open var threshold: Number = definedExternally
    open var weight: Number = definedExternally
    open var kernel: Number = definedExternally
    open fun disposeEffects(camera: Camera): Unit = definedExternally
    open fun _updateEffects(): Unit = definedExternally
    open fun _isReady(): Boolean = definedExternally
}
external object chromaticAberrationPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class ChromaticAberrationPostProcess : PostProcess {
    constructor(name: String, screenWidth: Number, screenHeight: Number, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, screenWidth: Number, screenHeight: Number, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var aberrationAmount: Number = definedExternally
    open var radialIntensity: Number = definedExternally
    open var direction: Vector2 = definedExternally
    open var centerPosition: Vector2 = definedExternally
}
external object circleOfConfusionPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class CircleOfConfusionPostProcess : PostProcess {
    constructor(name: String, depthTexture: RenderTargetTexture, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, depthTexture: RenderTargetTexture, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var lensSize: Number = definedExternally
    open var fStop: Number = definedExternally
    open var focusDistance: Number = definedExternally
    open var focalLength: Number = definedExternally
    open var _depthTexture: Any = definedExternally
    open var depthTexture: RenderTargetTexture = definedExternally
}
external object colorCorrectionPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class ColorCorrectionPostProcess : PostProcess {
    constructor(name: String, colorTableUrl: String, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    constructor(name: String, colorTableUrl: String, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    open var _colorTableTexture: Any = definedExternally
}
external object convolutionPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class ConvolutionPostProcess : PostProcess {
    constructor(name: String, kernel: Array<Number>, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */)
    constructor(name: String, kernel: Array<Number>, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */)
    open var kernel: Array<Number> = definedExternally
    companion object {
        var EdgeDetect0Kernel: Array<Number> = definedExternally
        var EdgeDetect1Kernel: Array<Number> = definedExternally
        var EdgeDetect2Kernel: Array<Number> = definedExternally
        var SharpenKernel: Array<Number> = definedExternally
        var EmbossKernel: Array<Number> = definedExternally
        var GaussianKernel: Array<Number> = definedExternally
    }
}
external open class DepthOfFieldBlurPostProcess : BlurPostProcess {
    constructor(name: String, scene: Scene, direction: Vector2, kernel: Number, options: Number, camera: Camera, circleOfConfusion: PostProcess, imageToBlur: PostProcess? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, scene: Scene, direction: Vector2, kernel: Number, options: BABYLON.PostProcessOptions, camera: Camera, circleOfConfusion: PostProcess, imageToBlur: PostProcess? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    override var direction: Vector2 = definedExternally
}
external object depthOfFieldMergePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface `T$142` {
    var circleOfConfusion: PostProcess
    var blurSteps: Array<PostProcess>
}
external interface `T$143` {
    var blurred: PostProcess
    var weight: Number
}
external open class DepthOfFieldMergePostProcessOptions {
    open var originalFromInput: PostProcess = definedExternally
    open var depthOfField: `T$142` = definedExternally
    open var bloom: `T$143` = definedExternally
}
external open class DepthOfFieldMergePostProcess : PostProcess {
    constructor(name: String, originalFromInput: PostProcess, circleOfConfusion: PostProcess, blurSteps: Array<PostProcess>, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, originalFromInput: PostProcess, circleOfConfusion: PostProcess, blurSteps: Array<PostProcess>, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var blurSteps: Any = definedExternally
    override fun updateEffect(defines: String?  /* null */, uniforms: Array<String>?  /* null */, samplers: Array<String>?  /* null */, indexParameters: Any?  /* null */, onCompiled: ((effect: Effect) -> Unit)?  /* null */, onError: ((effect: Effect, errors: String) -> Unit)?  /* null */): Unit = definedExternally
}
external enum class DepthOfFieldEffectBlurLevel {
    Low /* = 0 */,
    Medium /* = 1 */,
    High /* = 2 */
}
external open class DepthOfFieldEffect : PostProcessRenderEffect {
    constructor(scene: Scene, depthTexture: RenderTargetTexture, blurLevel: Number? /* 0 */ = definedExternally /* null */, pipelineTextureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(scene: Scene, depthTexture: RenderTargetTexture, blurLevel: Number? /* 1 */ = definedExternally /* null */, pipelineTextureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(scene: Scene, depthTexture: RenderTargetTexture, blurLevel: Number? /* 2 */ = definedExternally /* null */, pipelineTextureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var _circleOfConfusion: Any = definedExternally
    open var _depthOfFieldBlurX: Array<DepthOfFieldBlurPostProcess> = definedExternally
    open var _depthOfFieldBlurY: Any = definedExternally
    open var _dofMerge: Any = definedExternally
    open var _effects: Array<PostProcess> = definedExternally
    open var focalLength: Number = definedExternally
    open var fStop: Number = definedExternally
    open var focusDistance: Number = definedExternally
    open var lensSize: Number = definedExternally
    open fun getClassName(): String = definedExternally
    open var depthTexture: RenderTargetTexture = definedExternally
    open fun disposeEffects(camera: Camera): Unit = definedExternally
    open fun _updateEffects(): Unit = definedExternally
    open fun _isReady(): Boolean = definedExternally
}
external object displayPassPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class DisplayPassPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
}
external object filterPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class FilterPostProcess : PostProcess {
    constructor(name: String, kernelMatrix: Matrix, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    constructor(name: String, kernelMatrix: Matrix, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    open var kernelMatrix: Matrix = definedExternally
}
external object fxaaPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object fxaaVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class FxaaPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */)
    open var texelWidth: Number = definedExternally
    open var texelHeight: Number = definedExternally
    open var _getDefines: Any = definedExternally
}
external object grainPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class GrainPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var intensity: Number = definedExternally
    open var animated: Boolean = definedExternally
}
external object highlightsPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class HighlightsPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */)
}
external object mrtFragmentDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object geometryPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object geometryVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface ISavedTransformationMatrix {
    var world: Matrix
    var viewProjection: Matrix
}
external interface `T$144` {
    @nativeGetter
    operator fun get(index: Number): ISavedTransformationMatrix?
    @nativeSetter
    operator fun set(index: Number, value: ISavedTransformationMatrix)
}
external interface `T$145` {
    @nativeGetter
    operator fun get(index: Number): Float32Array?
    @nativeSetter
    operator fun set(index: Number, value: Float32Array)
}
external open class GeometryBufferRenderer(scene: Scene, ratio: Number? = definedExternally /* null */) {
    open var _previousTransformationMatrices: `T$144` = definedExternally
    open var _previousBonesTransformationMatrices: `T$145` = definedExternally
    open var excludedSkinnedMeshesFromVelocity: Array<AbstractMesh> = definedExternally
    open var _scene: Any = definedExternally
    open var _multiRenderTarget: Any = definedExternally
    open var _ratio: Any = definedExternally
    open var _enablePosition: Any = definedExternally
    open var _enableVelocity: Any = definedExternally
    open var _positionIndex: Any = definedExternally
    open var _velocityIndex: Any = definedExternally
    open var _effect: Effect = definedExternally
    open var _cachedDefines: String = definedExternally
    open var renderList: Array<Mesh> = definedExternally
    open var isSupported: Boolean = definedExternally
    open fun getTextureIndex(textureType: Number): Number = definedExternally
    open var enablePosition: Boolean = definedExternally
    open var enableVelocity: Boolean = definedExternally
    open var scene: Scene = definedExternally
    open var ratio: Number = definedExternally
    open fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean = definedExternally
    open fun getGBuffer(): MultiRenderTarget = definedExternally
    open var samples: Number = definedExternally
    open fun dispose(): Unit = definedExternally
    open fun _createRenderTargets(): Unit = definedExternally
    open var _copyBonesTransformationMatrices: Any = definedExternally
    companion object {
        var POSITION_TEXTURE_TYPE: Number = definedExternally
        var VELOCITY_TEXTURE_TYPE: Number = definedExternally
        var _SceneComponentInitialization: (scene: Scene) -> Unit = definedExternally
    }
}
external open class GeometryBufferRendererSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _gatherRenderTargets: Any = definedExternally
}
external object motionBlurPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class MotionBlurPostProcess : PostProcess {
    constructor(name: String, scene: Scene, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, scene: Scene, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var motionStrength: Number = definedExternally
    open var motionBlurSamples: Number = definedExternally
    open var _motionBlurSamples: Any = definedExternally
    open var _geometryBufferRenderer: Any = definedExternally
    open fun excludeSkinnedMesh(skinnedMesh: AbstractMesh): Unit = definedExternally
    open fun removeExcludedSkinnedMesh(skinnedMesh: AbstractMesh): Unit = definedExternally
    override fun dispose(camera: Camera?): Unit = definedExternally
}
external object refractionPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class RefractionPostProcess : PostProcess {
    constructor(name: String, refractionTextureUrl: String, color: Color3, depth: Number, colorLevel: Number, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    constructor(name: String, refractionTextureUrl: String, color: Color3, depth: Number, colorLevel: Number, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */)
    open var color: Color3 = definedExternally
    open var depth: Number = definedExternally
    open var colorLevel: Number = definedExternally
    open var _refTexture: Any = definedExternally
    open var _ownRefractionTexture: Any = definedExternally
    open var refractionTexture: Texture = definedExternally
	open fun dispose(camera: Camera): Unit = definedExternally
}
external object sharpenPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class SharpenPostProcess : PostProcess {
    constructor(name: String, options: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    constructor(name: String, options: BABYLON.PostProcessOptions, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, textureType: Number? = definedExternally /* null */, blockCompilation: Boolean? = definedExternally /* null */)
    open var colorAmount: Number = definedExternally
    open var edgeAmount: Number = definedExternally
}
external open class PostProcessRenderPipeline(engine: Engine, name: String) {
    open var engine: Any = definedExternally
    open var _renderEffects: Any = definedExternally
    open var _renderEffectsForIsolatedPass: Any = definedExternally
    open var inspectableCustomProperties: Array<IInspectable> = definedExternally
    open var _cameras: Array<Camera> = definedExternally
    open var _name: String = definedExternally
    open var name: String = definedExternally
    open fun getClassName(): String = definedExternally
    open var isSupported: Boolean = definedExternally
    open fun addEffect(renderEffect: PostProcessRenderEffect): Unit = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun _enableEffect(renderEffectName: String, cameras: Camera): Unit = definedExternally
    open fun _enableEffect(renderEffectName: String, cameras: Array<Camera>): Unit = definedExternally
    open fun _disableEffect(renderEffectName: String, cameras: Array<Camera>): Unit = definedExternally
    open fun _disableEffect(renderEffectName: String, cameras: Array<Camera>): Unit = definedExternally
    open fun _attachCameras(cameras: Camera, unique: Boolean): Unit = definedExternally
    open fun _attachCameras(cameras: Array<Camera>, unique: Boolean): Unit = definedExternally
    open fun _detachCameras(cameras: Camera): Unit = definedExternally
    open fun _detachCameras(cameras: Array<Camera>): Unit = definedExternally
    open fun _update(): Unit = definedExternally
    open fun _reset(): Unit = definedExternally
    open fun _enableMSAAOnFirstPostProcess(sampleCount: Number): Boolean = definedExternally
    open fun dispose(): Unit = definedExternally
}
external open class PostProcessRenderPipelineManager {
    open var _renderPipelines: Any = definedExternally
    open var supportedPipelines: Array<PostProcessRenderPipeline> = definedExternally
    open fun addPipeline(renderPipeline: PostProcessRenderPipeline): Unit = definedExternally
    open fun attachCamerasToRenderPipeline(renderPipelineName: String, cameras: Any, unique: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun attachCamerasToRenderPipeline(renderPipelineName: String, cameras: Array<Camera>, unique: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun attachCamerasToRenderPipeline(renderPipelineName: String, cameras: Camera, unique: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun detachCamerasFromRenderPipeline(renderPipelineName: String, cameras: Any): Unit = definedExternally
    open fun detachCamerasFromRenderPipeline(renderPipelineName: String, cameras: Array<Camera>): Unit = definedExternally
    open fun detachCamerasFromRenderPipeline(renderPipelineName: String, cameras: Camera): Unit = definedExternally
    open fun enableEffectInPipeline(renderPipelineName: String, renderEffectName: String, cameras: Any): Unit = definedExternally
    open fun enableEffectInPipeline(renderPipelineName: String, renderEffectName: String, cameras: Array<Camera>): Unit = definedExternally
    open fun enableEffectInPipeline(renderPipelineName: String, renderEffectName: String, cameras: Camera): Unit = definedExternally
    open fun disableEffectInPipeline(renderPipelineName: String, renderEffectName: String, cameras: Any): Unit = definedExternally
    open fun disableEffectInPipeline(renderPipelineName: String, renderEffectName: String, cameras: Array<Camera>): Unit = definedExternally
    open fun disableEffectInPipeline(renderPipelineName: String, renderEffectName: String, cameras: Camera): Unit = definedExternally
    open fun update(): Unit = definedExternally
    open fun _rebuild(): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
}
external open class PostProcessRenderPipelineManagerSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _gatherRenderTargets: Any = definedExternally
}
external open class DefaultRenderingPipeline(name: String? = definedExternally /* null */, hdr: Boolean? = definedExternally /* null */, scene: Scene? = definedExternally /* null */, cameras: Array<Camera>? = definedExternally /* null */, automaticBuild: Boolean? = definedExternally /* null */) : PostProcessRenderPipeline, IDisposable, IAnimatable {
    open var _scene: Any = definedExternally
    open var _camerasToBeAttached: Any = definedExternally
    open var SharpenPostProcessId: Any = definedExternally
    open var ImageProcessingPostProcessId: String = definedExternally
    open var FxaaPostProcessId: String = definedExternally
    open var ChromaticAberrationPostProcessId: Any = definedExternally
    open var GrainPostProcessId: Any = definedExternally
    open var sharpen: SharpenPostProcess = definedExternally
    open var _sharpenEffect: Any = definedExternally
    open var bloom: Any = definedExternally
    open var depthOfField: DepthOfFieldEffect = definedExternally
    open var fxaa: FxaaPostProcess = definedExternally
    open var imageProcessing: ImageProcessingPostProcess = definedExternally
    open var chromaticAberration: ChromaticAberrationPostProcess = definedExternally
    open var _chromaticAberrationEffect: Any = definedExternally
    open var grain: GrainPostProcess = definedExternally
    open var _grainEffect: Any = definedExternally
    open var _glowLayer: Any = definedExternally
    override var animations: Array<Animation> = definedExternally
    open var _imageProcessingConfigurationObserver: Any = definedExternally
    open var _sharpenEnabled: Any = definedExternally
    open var _bloomEnabled: Any = definedExternally
    open var _depthOfFieldEnabled: Any = definedExternally
    open var _depthOfFieldBlurLevel: Any = definedExternally
    open var _fxaaEnabled: Any = definedExternally
    open var _imageProcessingEnabled: Any = definedExternally
    open var _defaultPipelineTextureType: Any = definedExternally
    open var _bloomScale: Any = definedExternally
    open var _chromaticAberrationEnabled: Any = definedExternally
    open var _grainEnabled: Any = definedExternally
    open var _buildAllowed: Any = definedExternally
    open var scene: Scene = definedExternally
    open var sharpenEnabled: Boolean = definedExternally
    open var _resizeObserver: Any = definedExternally
    open var _hardwareScaleLevel: Any = definedExternally
    open var _bloomKernel: Any = definedExternally
    open var bloomKernel: Number = definedExternally
    open var _bloomWeight: Any = definedExternally
    open var _bloomThreshold: Any = definedExternally
    open var _hdr: Any = definedExternally
    open var bloomWeight: Number = definedExternally
    open var bloomThreshold: Number = definedExternally
    open var bloomScale: Number = definedExternally
    open var bloomEnabled: Boolean = definedExternally
    open var _rebuildBloom: Any = definedExternally
    open var depthOfFieldEnabled: Boolean = definedExternally
    open var depthOfFieldBlurLevel: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ */ = definedExternally
    open var fxaaEnabled: Boolean = definedExternally
    open var _samples: Any = definedExternally
    open var samples: Number = definedExternally
    open var imageProcessingEnabled: Boolean = definedExternally
    open var glowLayerEnabled: Boolean = definedExternally
    open var glowLayer: GlowLayer = definedExternally
    open var chromaticAberrationEnabled: Boolean = definedExternally
    open var grainEnabled: Boolean = definedExternally
    override fun getClassName(): String = definedExternally
    open fun prepare(): Unit = definedExternally
    open var _hasCleared: Any = definedExternally
    open var _prevPostProcess: Any = definedExternally
    open var _prevPrevPostProcess: Any = definedExternally
    open var _setAutoClearAndTextureSharing: Any = definedExternally
    open var _depthOfFieldSceneObserver: Any = definedExternally
    open var _buildPipeline: Any = definedExternally
    open var _disposePostProcesses: Any = definedExternally
    open fun addCamera(camera: Camera): Unit = definedExternally
    open fun removeCamera(camera: Camera): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        fun Parse(source: Any, scene: Scene, rootUrl: String): DefaultRenderingPipeline = definedExternally
    }
}
external object lensHighlightsPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object depthOfFieldPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class LensRenderingPipeline(name: String, parameters: Any, scene: Scene, ratio: Number? = definedExternally /* null */, cameras: Array<Camera>? = definedExternally /* null */) : PostProcessRenderPipeline {
    open var LensChromaticAberrationEffect: String = definedExternally
    open var HighlightsEnhancingEffect: String = definedExternally
    open var LensDepthOfFieldEffect: String = definedExternally
    open var _scene: Any = definedExternally
    open var _depthTexture: Any = definedExternally
    open var _grainTexture: Any = definedExternally
    open var _chromaticAberrationPostProcess: Any = definedExternally
    open var _highlightsPostProcess: Any = definedExternally
    open var _depthOfFieldPostProcess: Any = definedExternally
    open var _edgeBlur: Any = definedExternally
    open var _grainAmount: Any = definedExternally
    open var _chromaticAberration: Any = definedExternally
    open var _distortion: Any = definedExternally
    open var _highlightsGain: Any = definedExternally
    open var _highlightsThreshold: Any = definedExternally
    open var _dofDistance: Any = definedExternally
    open var _dofAperture: Any = definedExternally
    open var _dofDarken: Any = definedExternally
    open var _dofPentagon: Any = definedExternally
    open var _blurNoise: Any = definedExternally
    override fun getClassName(): String = definedExternally
    open var scene: Scene = definedExternally
    open var edgeBlur: Number = definedExternally
    open var grainAmount: Number = definedExternally
    open var chromaticAberration: Number = definedExternally
    open var dofAperture: Number = definedExternally
    open var edgeDistortion: Number = definedExternally
    open var dofDistortion: Number = definedExternally
    open var darkenOutOfFocus: Number = definedExternally
    open var blurNoise: Boolean = definedExternally
    open var pentagonBokeh: Boolean = definedExternally
    open var highlightsGain: Number = definedExternally
    open var highlightsThreshold: Number = definedExternally
    open fun setEdgeBlur(amount: Number): Unit = definedExternally
    open fun disableEdgeBlur(): Unit = definedExternally
    open fun setGrainAmount(amount: Number): Unit = definedExternally
    open fun disableGrain(): Unit = definedExternally
    open fun setChromaticAberration(amount: Number): Unit = definedExternally
    open fun disableChromaticAberration(): Unit = definedExternally
    open fun setEdgeDistortion(amount: Number): Unit = definedExternally
    open fun disableEdgeDistortion(): Unit = definedExternally
    open fun setFocusDistance(amount: Number): Unit = definedExternally
    open fun disableDepthOfField(): Unit = definedExternally
    open fun setAperture(amount: Number): Unit = definedExternally
    open fun setDarkenOutOfFocus(amount: Number): Unit = definedExternally
    open var _pentagonBokehIsEnabled: Any = definedExternally
    open fun enablePentagonBokeh(): Unit = definedExternally
    open fun disablePentagonBokeh(): Unit = definedExternally
    open fun enableNoiseBlur(): Unit = definedExternally
    open fun disableNoiseBlur(): Unit = definedExternally
    open fun setHighlightsGain(amount: Number): Unit = definedExternally
    open fun setHighlightsThreshold(amount: Number): Unit = definedExternally
    open fun disableHighlights(): Unit = definedExternally
    open fun dispose(disableDepthRender: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _createChromaticAberrationPostProcess: Any = definedExternally
    open var _createHighlightsPostProcess: Any = definedExternally
    open var _createDepthOfFieldPostProcess: Any = definedExternally
    open var _createGrainTexture: Any = definedExternally
}
external object ssao2PixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object ssaoCombinePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class SSAO2RenderingPipeline(name: String, scene: Scene, ratio: Any, cameras: Array<Camera>? = definedExternally /* null */) : PostProcessRenderPipeline {
    open var SSAOOriginalSceneColorEffect: String = definedExternally
    open var SSAORenderEffect: String = definedExternally
    open var SSAOBlurHRenderEffect: String = definedExternally
    open var SSAOBlurVRenderEffect: String = definedExternally
    open var SSAOCombineRenderEffect: String = definedExternally
    open var totalStrength: Number = definedExternally
    open var maxZ: Number = definedExternally
    open var minZAspect: Number = definedExternally
    open var _samples: Any = definedExternally
    open var samples: Number = definedExternally
    open var _textureSamples: Any = definedExternally
    open var textureSamples: Number = definedExternally
    open var _ratio: Any = definedExternally
    open var _sampleSphere: Any = definedExternally
    open var _samplerOffsets: Any = definedExternally
    open var _expensiveBlur: Any = definedExternally
    open var expensiveBlur: Boolean = definedExternally
    open var radius: Number = definedExternally
    open var base: Number = definedExternally
    open var _scene: Any = definedExternally
    open var _depthTexture: Any = definedExternally
    open var _normalTexture: Any = definedExternally
    open var _randomTexture: Any = definedExternally
    open var _originalColorPostProcess: Any = definedExternally
    open var _ssaoPostProcess: Any = definedExternally
    open var _blurHPostProcess: Any = definedExternally
    open var _blurVPostProcess: Any = definedExternally
    open var _ssaoCombinePostProcess: Any = definedExternally
    open var _firstUpdate: Any = definedExternally
    open var scene: Scene = definedExternally
    override fun getClassName(): String = definedExternally
    open fun dispose(disableGeometryBufferRenderer: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _createBlurPostProcess: Any = definedExternally
    override fun _rebuild(): Unit = definedExternally
    open var _bits: Any = definedExternally
    open var _radicalInverse_VdC: Any = definedExternally
    open var _hammersley: Any = definedExternally
    open var _hemisphereSample_uniform: Any = definedExternally
    open var _generateHemisphere: Any = definedExternally
    open var _createSSAOPostProcess: Any = definedExternally
    open var _createSSAOCombinePostProcess: Any = definedExternally
    open var _createRandomTexture: Any = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        var IsSupported: Boolean = definedExternally
        fun Parse(source: Any, scene: Scene, rootUrl: String): SSAO2RenderingPipeline = definedExternally
    }
}
external object ssaoPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class SSAORenderingPipeline(name: String, scene: Scene, ratio: Any, cameras: Array<Camera>? = definedExternally /* null */) : PostProcessRenderPipeline {
    open var SSAOOriginalSceneColorEffect: String = definedExternally
    open var SSAORenderEffect: String = definedExternally
    open var SSAOBlurHRenderEffect: String = definedExternally
    open var SSAOBlurVRenderEffect: String = definedExternally
    open var SSAOCombineRenderEffect: String = definedExternally
    open var totalStrength: Number = definedExternally
    open var radius: Number = definedExternally
    open var area: Number = definedExternally
    open var fallOff: Number = definedExternally
    open var base: Number = definedExternally
    open var _scene: Any = definedExternally
    open var _depthTexture: Any = definedExternally
    open var _randomTexture: Any = definedExternally
    open var _originalColorPostProcess: Any = definedExternally
    open var _ssaoPostProcess: Any = definedExternally
    open var _blurHPostProcess: Any = definedExternally
    open var _blurVPostProcess: Any = definedExternally
    open var _ssaoCombinePostProcess: Any = definedExternally
    open var _firstUpdate: Any = definedExternally
    open var scene: Scene = definedExternally
    override fun getClassName(): String = definedExternally
    open fun dispose(disableDepthRender: Boolean? = definedExternally /* null */): Unit = definedExternally
    open var _createBlurPostProcess: Any = definedExternally
    override fun _rebuild(): Unit = definedExternally
    open var _createSSAOPostProcess: Any = definedExternally
    open var _createSSAOCombinePostProcess: Any = definedExternally
    open var _createRandomTexture: Any = definedExternally
}
external object standardPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class StandardRenderingPipeline(name: String, scene: Scene, ratio: Number, originalPostProcess: PostProcess? = definedExternally /* null */, cameras: Array<Camera>? = definedExternally /* null */) : PostProcessRenderPipeline, IDisposable, IAnimatable {
    open var originalPostProcess: PostProcess = definedExternally
    open var downSampleX4PostProcess: PostProcess = definedExternally
    open var brightPassPostProcess: PostProcess = definedExternally
    open var blurHPostProcesses: Array<PostProcess> = definedExternally
    open var blurVPostProcesses: Array<PostProcess> = definedExternally
    open var textureAdderPostProcess: PostProcess = definedExternally
    open var volumetricLightPostProcess: PostProcess = definedExternally
    open var volumetricLightSmoothXPostProcess: BlurPostProcess = definedExternally
    open var volumetricLightSmoothYPostProcess: BlurPostProcess = definedExternally
    open var volumetricLightMergePostProces: PostProcess = definedExternally
    open var volumetricLightFinalPostProcess: PostProcess = definedExternally
    open var luminancePostProcess: PostProcess = definedExternally
    open var luminanceDownSamplePostProcesses: Array<PostProcess> = definedExternally
    open var hdrPostProcess: PostProcess = definedExternally
    open var textureAdderFinalPostProcess: PostProcess = definedExternally
    open var lensFlareFinalPostProcess: PostProcess = definedExternally
    open var hdrFinalPostProcess: PostProcess = definedExternally
    open var lensFlarePostProcess: PostProcess = definedExternally
    open var lensFlareComposePostProcess: PostProcess = definedExternally
    open var motionBlurPostProcess: PostProcess = definedExternally
    open var depthOfFieldPostProcess: PostProcess = definedExternally
    open var fxaaPostProcess: FxaaPostProcess = definedExternally
    open var brightThreshold: Number = definedExternally
    open var blurWidth: Number = definedExternally
    open var horizontalBlur: Boolean = definedExternally
    open var exposure: Number = definedExternally
    open var lensTexture: Texture = definedExternally
    open var volumetricLightCoefficient: Number = definedExternally
    open var volumetricLightPower: Number = definedExternally
    open var volumetricLightBlurScale: Number = definedExternally
    open var sourceLight: dynamic /* DirectionalLight | SpotLight */ = definedExternally
    open var hdrMinimumLuminance: Number = definedExternally
    open var hdrDecreaseRate: Number = definedExternally
    open var hdrIncreaseRate: Number = definedExternally
    open var hdrAutoExposure: Boolean = definedExternally
    open var lensColorTexture: Texture = definedExternally
    open var lensFlareStrength: Number = definedExternally
    open var lensFlareGhostDispersal: Number = definedExternally
    open var lensFlareHaloWidth: Number = definedExternally
    open var lensFlareDistortionStrength: Number = definedExternally
    open var lensStarTexture: Texture = definedExternally
    open var lensFlareDirtTexture: Texture = definedExternally
    open var depthOfFieldDistance: Number = definedExternally
    open var depthOfFieldBlurWidth: Number = definedExternally
    open var motionStrength: Number = definedExternally
    override var animations: Array<Animation> = definedExternally
    open var _scene: Any = definedExternally
    open var _currentDepthOfFieldSource: Any = definedExternally
    open var _basePostProcess: Any = definedExternally
    open var _fixedExposure: Any = definedExternally
    open var _currentExposure: Any = definedExternally
    open var _hdrAutoExposure: Any = definedExternally
    open var _hdrCurrentLuminance: Any = definedExternally
    open var _floatTextureType: Any = definedExternally
    open var _ratio: Any = definedExternally
    open var _bloomEnabled: Any = definedExternally
    open var _depthOfFieldEnabled: Any = definedExternally
    open var _vlsEnabled: Any = definedExternally
    open var _lensFlareEnabled: Any = definedExternally
    open var _hdrEnabled: Any = definedExternally
    open var _motionBlurEnabled: Any = definedExternally
    open var _fxaaEnabled: Any = definedExternally
    open var _motionBlurSamples: Any = definedExternally
    open var _volumetricLightStepsCount: Any = definedExternally
    open var _samples: Any = definedExternally
    open var BloomEnabled: Boolean = definedExternally
    open var DepthOfFieldEnabled: Boolean = definedExternally
    open var LensFlareEnabled: Boolean = definedExternally
    open var HDREnabled: Boolean = definedExternally
    open var VLSEnabled: Boolean = definedExternally
    open var MotionBlurEnabled: Boolean = definedExternally
    open var fxaaEnabled: Boolean = definedExternally
    open var volumetricLightStepsCount: Number = definedExternally
    open var motionBlurSamples: Number = definedExternally
    open var samples: Number = definedExternally
    open var _buildPipeline: Any = definedExternally
    open var _createDownSampleX4PostProcess: Any = definedExternally
    open var _createBrightPassPostProcess: Any = definedExternally
    open var _createBlurPostProcesses: Any = definedExternally
    open var _createTextureAdderPostProcess: Any = definedExternally
    open var _createVolumetricLightPostProcess: Any = definedExternally
    open var _createLuminancePostProcesses: Any = definedExternally
    open var _createHdrPostProcess: Any = definedExternally
    open var _createLensFlarePostProcess: Any = definedExternally
    open var _createDepthOfFieldPostProcess: Any = definedExternally
    open var _createMotionBlurPostProcess: Any = definedExternally
    open var _getDepthTexture: Any = definedExternally
    open var _disposePostProcesses: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun serialize(): Any = definedExternally
    companion object {
        fun Parse(source: Any, scene: Scene, rootUrl: String): StandardRenderingPipeline = definedExternally
        var LuminanceSteps: Number = definedExternally
    }
}
external object tonemapPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external enum class TonemappingOperator {
    Hable /* = 0 */,
    Reinhard /* = 1 */,
    HejiDawson /* = 2 */,
    Photographic /* = 3 */
}
external open class TonemapPostProcess : PostProcess {
    constructor(name: String, _operator: Number /* 0 */, exposureAdjustment: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, textureFormat: Number? = definedExternally /* null */)
    constructor(name: String, _operator: Number /* 1 */, exposureAdjustment: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, textureFormat: Number? = definedExternally /* null */)
    constructor(name: String, _operator: Number /* 2 */, exposureAdjustment: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, textureFormat: Number? = definedExternally /* null */)
    constructor(name: String, _operator: Number /* 3 */, exposureAdjustment: Number, camera: Camera, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, textureFormat: Number? = definedExternally /* null */)
    open var _operator: Any = definedExternally
    open var exposureAdjustment: Number = definedExternally
}
external object depthVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object volumetricLightScatteringPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object volumetricLightScatteringPassPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external interface `T$146` {
    var position: Vector3
}
external open class VolumetricLightScatteringPostProcess(name: String, ratio: Any, camera: Camera, mesh: Mesh? = definedExternally /* null */, samples: Number? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */, engine: Engine? = definedExternally /* null */, reusable: Boolean? = definedExternally /* null */, scene: Scene? = definedExternally /* null */) : PostProcess {
    open var _volumetricLightScatteringPass: Any = definedExternally
    open var _volumetricLightScatteringRTT: Any = definedExternally
    open var _viewPort: Any = definedExternally
    open var _screenCoordinates: Any = definedExternally
    open var _cachedDefines: Any = definedExternally
    open var attachedNode: `T$146` = definedExternally
    open var customMeshPosition: Vector3 = definedExternally
    open var useCustomMeshPosition: Boolean = definedExternally
    open var invert: Boolean = definedExternally
    open var mesh: Mesh = definedExternally
    open var useDiffuseColor: Boolean = definedExternally
    open var excludedMeshes: Array<AbstractMesh> = definedExternally
    open var exposure: Number = definedExternally
    open var decay: Number = definedExternally
    open var weight: Number = definedExternally
    open var density: Number = definedExternally
    override fun getClassName(): String = definedExternally
    open var _isReady: Any = definedExternally
    open fun setCustomMeshPosition(position: Vector3): Unit = definedExternally
    open fun getCustomMeshPosition(): Vector3 = definedExternally
	open fun dispose(camera: Camera): Unit = definedExternally
    open fun getPass(): RenderTargetTexture = definedExternally
    open var _meshExcluded: Any = definedExternally
    open var _createPass: Any = definedExternally
    open var _updateMeshScreenCoordinates: Any = definedExternally
    companion object {
        fun CreateDefaultMesh(name: String, scene: Scene): Mesh = definedExternally
    }
}
external open class BoundingBoxRenderer(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    open var frontColor: Color3 = definedExternally
    open var backColor: Color3 = definedExternally
    open var showBackLines: Boolean = definedExternally
    open var renderList: SmartArray<BoundingBox> = definedExternally
    open var _colorShader: Any = definedExternally
    open var _vertexBuffers: Any = definedExternally
    open var _indexBuffer: Any = definedExternally
    override fun register(): Unit = definedExternally
    open var _evaluateSubMesh: Any = definedExternally
    open var _activeMesh: Any = definedExternally
    open var _prepareRessources: Any = definedExternally
    open var _createIndexBuffer: Any = definedExternally
    override fun rebuild(): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open fun render(renderingGroupId: Number): Unit = definedExternally
    open fun renderOcclusionBoundingBox(mesh: AbstractMesh): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
}
external object depthPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class DepthRenderer(scene: Scene, type: Number? = definedExternally /* null */, camera: Camera? = definedExternally /* null */) {
    open var _scene: Any = definedExternally
    open var _depthMap: Any = definedExternally
    open var _effect: Any = definedExternally
    open var _cachedDefines: Any = definedExternally
    open var _camera: Any = definedExternally
    open var useOnlyInActiveCamera: Boolean = definedExternally
    open fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean = definedExternally
    open fun getDepthMap(): RenderTargetTexture = definedExternally
    open fun dispose(): Unit = definedExternally
    companion object {
        var _SceneComponentInitialization: (scene: Scene) -> Unit = definedExternally
    }
}
external interface `T$147` {
    @nativeGetter
    operator fun get(id: String): DepthRenderer?
    @nativeSetter
    operator fun set(id: String, value: DepthRenderer)
}
external open class DepthRendererSceneComponent(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open var _gatherRenderTargets: Any = definedExternally
    open var _gatherActiveCameraRenderTargets: Any = definedExternally
}
external object outlinePixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object outlineVertexShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external open class OutlineRenderer(scene: Scene) : ISceneComponent {
    override var name: String = definedExternally
    override var scene: Scene = definedExternally
    open var zOffset: Number = definedExternally
    open var _engine: Any = definedExternally
    open var _effect: Any = definedExternally
    open var _cachedDefines: Any = definedExternally
    open var _savedDepthWrite: Any = definedExternally
    override fun register(): Unit = definedExternally
    override fun rebuild(): Unit = definedExternally
    override fun dispose(): Unit = definedExternally
    open fun render(subMesh: SubMesh, batch: _InstancesBatch, useOverlay: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun isReady(subMesh: SubMesh, useInstances: Boolean): Boolean = definedExternally
    open var _beforeRenderingMesh: Any = definedExternally
    open var _afterRenderingMesh: Any = definedExternally
    companion object {
        var _StencilReference: Any = definedExternally
    }
}
external enum class AssetTaskState {
    INIT /* = 0 */,
    RUNNING /* = 1 */,
    DONE /* = 2 */,
    ERROR /* = 3 */
}
external interface `T$148` {
    var message: String? get() = definedExternally; set(value) = definedExternally
    var exception: Any? get() = definedExternally; set(value) = definedExternally
}
external open class AbstractAssetTask<T>(name: String) {
    open var name: String = definedExternally
    open var onSuccess: (task: T) -> Unit = definedExternally
    open var onError: (task: T, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
    open var _isCompleted: Any = definedExternally
    open var _taskState: Any = definedExternally
    open var _errorObject: Any = definedExternally
    open var isCompleted: Boolean = definedExternally
    open var taskState: dynamic /* Number /* 0 */ | Number /* 1 */ | Number /* 2 */ | Number /* 3 */ */ = definedExternally
    open var errorObject: `T$148` = definedExternally
    open fun _setErrorObject(message: String? = definedExternally /* null */, exception: Any? = definedExternally /* null */): Unit = definedExternally
    open fun run(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
    open fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open var onErrorCallback: Any = definedExternally
    open var onDoneCallback: Any = definedExternally
}
external interface IAssetsProgressEvent {
    var remainingCount: Number
    var totalCount: Number
    var task: AbstractAssetTask<Any>
}
external open class AssetsProgressEvent(remainingCount: Number, totalCount: Number, task: AbstractAssetTask<Any>) : IAssetsProgressEvent {
    override var remainingCount: Number = definedExternally
    override var totalCount: Number = definedExternally
    override var task: AbstractAssetTask<Any> = definedExternally
}
external open class MeshAssetTask(name: String, meshesNames: Any, rootUrl: String, sceneFilename: String) : AbstractAssetTask<MeshAssetTask> {
    override var name: String = definedExternally
    open var meshesNames: Any = definedExternally
    open var rootUrl: String = definedExternally
    open var sceneFilename: String = definedExternally
    open var loadedMeshes: Array<AbstractMesh> = definedExternally
    open var loadedParticleSystems: Array<IParticleSystem> = definedExternally
    open var loadedSkeletons: Array<Skeleton> = definedExternally
    open var loadedAnimationGroups: Array<AnimationGroup> = definedExternally
	override var onSuccess: (task: MeshAssetTask) -> Unit = definedExternally
	override var onError: (task: MeshAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external open class TextFileAssetTask(name: String, url: String) : AbstractAssetTask<TextFileAssetTask> {
    override var name: String = definedExternally
    open var url: String = definedExternally
    open var text: String = definedExternally
	override var onSuccess: (task: TextFileAssetTask) -> Unit = definedExternally
	override var onError: (task: TextFileAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external open class BinaryFileAssetTask(name: String, url: String) : AbstractAssetTask<BinaryFileAssetTask> {
    override var name: String = definedExternally
    open var url: String = definedExternally
    open var data: ArrayBuffer = definedExternally
	override var onSuccess: (task: BinaryFileAssetTask) -> Unit = definedExternally
	override var onError: (task: BinaryFileAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external open class ImageAssetTask(name: String, url: String) : AbstractAssetTask<ImageAssetTask> {
    override var name: String = definedExternally
    open var url: String = definedExternally
    open var image: HTMLImageElement = definedExternally
	override var onSuccess: (task: ImageAssetTask) -> Unit = definedExternally
	override var onError: (task: ImageAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external interface ITextureAssetTask<TEX : BaseTexture> {
    var texture: TEX
}
external open class TextureAssetTask(name: String, url: String, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */) : AbstractAssetTask<TextureAssetTask>, ITextureAssetTask<Texture> {
    override var name: String = definedExternally
    open var url: String = definedExternally
    open var noMipmap: Boolean = definedExternally
    open var invertY: Boolean = definedExternally
    open var samplingMode: Number = definedExternally
    override var texture: Texture = definedExternally
	override var onSuccess: (task: TextureAssetTask) -> Unit = definedExternally
	override var onError: (task: TextureAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external open class CubeTextureAssetTask(name: String, url: String, extensions: Array<String>? = definedExternally /* null */, noMipmap: Boolean? = definedExternally /* null */, files: Array<String>? = definedExternally /* null */) : AbstractAssetTask<CubeTextureAssetTask>, ITextureAssetTask<CubeTexture> {
    override var name: String = definedExternally
    open var url: String = definedExternally
    open var extensions: Array<String>? = definedExternally
    open var noMipmap: Boolean = definedExternally
    open var files: Array<String>? = definedExternally
    override var texture: CubeTexture = definedExternally
	override var onSuccess: (task: CubeTextureAssetTask) -> Unit = definedExternally
	override var onError: (task: CubeTextureAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external open class HDRCubeTextureAssetTask(name: String, url: String, size: Number, noMipmap: Boolean? = definedExternally /* null */, generateHarmonics: Boolean? = definedExternally /* null */, gammaSpace: Boolean? = definedExternally /* null */, reserved: Boolean? = definedExternally /* null */) : AbstractAssetTask<HDRCubeTextureAssetTask>, ITextureAssetTask<HDRCubeTexture> {
    override var name: String = definedExternally
    open var url: String = definedExternally
    open var size: Number = definedExternally
    open var noMipmap: Boolean = definedExternally
    open var generateHarmonics: Boolean = definedExternally
    open var gammaSpace: Boolean = definedExternally
    open var reserved: Boolean = definedExternally
    override var texture: HDRCubeTexture = definedExternally
	override var onSuccess: (task: HDRCubeTextureAssetTask) -> Unit = definedExternally
	override var onError: (task: HDRCubeTextureAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external open class EquiRectangularCubeTextureAssetTask(name: String, url: String, size: Number, noMipmap: Boolean? = definedExternally /* null */, gammaSpace: Boolean? = definedExternally /* null */) : AbstractAssetTask<EquiRectangularCubeTextureAssetTask>, ITextureAssetTask<EquiRectangularCubeTexture> {
    override var name: String = definedExternally
    open var url: String = definedExternally
    open var size: Number = definedExternally
    open var noMipmap: Boolean = definedExternally
    open var gammaSpace: Boolean = definedExternally
	override var texture: EquiRectangularCubeTexture = definedExternally
	override var onSuccess: (task: EquiRectangularCubeTextureAssetTask) -> Unit = definedExternally
	override var onError: (task: EquiRectangularCubeTextureAssetTask, message: String? /*= null*/, exception: Any? /*= null*/) -> Unit = definedExternally
	override fun runTask(scene: Scene, onSuccess: () -> Unit, onError: (message: String? /*= null*/, exception: Any? /*= null*/) -> Unit): Unit = definedExternally
}
external open class AssetsManager(scene: Scene) {
    open var _scene: Any = definedExternally
    open var _isLoading: Any = definedExternally
    open var _tasks: Array<AbstractAssetTask<Any>> = definedExternally
    open var _waitingTasksCount: Number = definedExternally
    open var _totalTasksCount: Number = definedExternally
    open var onFinish: (tasks: Array<AbstractAssetTask<Any>>) -> Unit = definedExternally
    open var onTaskSuccess: (task: AbstractAssetTask<Any>) -> Unit = definedExternally
    open var onTaskError: (task: AbstractAssetTask<Any>) -> Unit = definedExternally
    open var onProgress: (remainingCount: Number, totalCount: Number, task: AbstractAssetTask<Any>) -> Unit = definedExternally
    open var onTaskSuccessObservable: Observable<AbstractAssetTask<Any>> = definedExternally
    open var onTaskErrorObservable: Observable<AbstractAssetTask<Any>> = definedExternally
    open var onTasksDoneObservable: Observable<Array<AbstractAssetTask<Any>>> = definedExternally
    open var onProgressObservable: Observable<IAssetsProgressEvent> = definedExternally
    open var useDefaultLoadingScreen: Boolean = definedExternally
    open fun addMeshTask(taskName: String, meshesNames: Any, rootUrl: String, sceneFilename: String): MeshAssetTask = definedExternally
    open fun addTextFileTask(taskName: String, url: String): TextFileAssetTask = definedExternally
    open fun addBinaryFileTask(taskName: String, url: String): BinaryFileAssetTask = definedExternally
    open fun addImageTask(taskName: String, url: String): ImageAssetTask = definedExternally
    open fun addTextureTask(taskName: String, url: String, noMipmap: Boolean? = definedExternally /* null */, invertY: Boolean? = definedExternally /* null */, samplingMode: Number? = definedExternally /* null */): TextureAssetTask = definedExternally
    open fun addCubeTextureTask(taskName: String, url: String, extensions: Array<String>? = definedExternally /* null */, noMipmap: Boolean? = definedExternally /* null */, files: Array<String>? = definedExternally /* null */): CubeTextureAssetTask = definedExternally
    open fun addHDRCubeTextureTask(taskName: String, url: String, size: Number, noMipmap: Boolean? = definedExternally /* null */, generateHarmonics: Boolean? = definedExternally /* null */, gammaSpace: Boolean? = definedExternally /* null */, reserved: Boolean? = definedExternally /* null */): HDRCubeTextureAssetTask = definedExternally
    open fun addEquiRectangularCubeTextureAssetTask(taskName: String, url: String, size: Number, noMipmap: Boolean? = definedExternally /* null */, gammaSpace: Boolean? = definedExternally /* null */): EquiRectangularCubeTextureAssetTask = definedExternally
    open fun removeTask(task: AbstractAssetTask<Any>): Unit = definedExternally
    open var _decreaseWaitingTasksCount: Any = definedExternally
    open var _runTask: Any = definedExternally
    open fun reset(): AssetsManager = definedExternally
    open fun load(): AssetsManager = definedExternally
    open fun loadAsync(): Promise<Unit> = definedExternally
}
external open class Deferred<T> {
    open var promise: Promise<T> = definedExternally
    open var _resolve: Any = definedExternally
    open var _reject: Any = definedExternally
    open var resolve: (value: dynamic /* T | PromiseLike<T> | Nothing? */ /*= null*/) -> Unit = definedExternally
    open var reject: (reason: Any? /*= null*/) -> Unit = definedExternally
}
external open class MeshExploder(meshes: Array<Mesh>, centerMesh: Mesh? = definedExternally /* null */) {
    open var _centerMesh: Any = definedExternally
    open var _meshes: Any = definedExternally
    open var _meshesOrigins: Any = definedExternally
    open var _toCenterVectors: Any = definedExternally
    open var _scaledDirection: Any = definedExternally
    open var _newPosition: Any = definedExternally
    open var _centerPosition: Any = definedExternally
    open var _setCenterMesh: Any = definedExternally
    open fun getClassName(): String = definedExternally
    open fun getMeshes(): Array<Mesh> = definedExternally
    open fun explode(direction: Number? = definedExternally /* null */): Unit = definedExternally
}
external interface `T$149` {
    @nativeGetter
    operator fun get(key: String): File?
    @nativeSetter
    operator fun set(key: String, value: File)
}
external open class FilesInput(engine: Engine, scene: Scene, sceneLoadedCallback: (sceneFile: File, scene: Scene) -> Unit, progressCallback: (progress: SceneLoaderProgressEvent) -> Unit, additionalRenderLoopLogicCallback: () -> Unit, textureLoadingCallback: (remaining: Number) -> Unit, startingProcessingFilesCallback: (files: Array<File>? /*= null*/) -> Unit, onReloadCallback: (sceneFile: File) -> Unit, errorCallback: (sceneFile: File, scene: Scene, message: String) -> Unit) {
    open var onProcessFileCallback: (file: File, name: String, extension: String) -> Boolean = definedExternally
    open var _engine: Any = definedExternally
    open var _currentScene: Any = definedExternally
    open var _sceneLoadedCallback: Any = definedExternally
    open var _progressCallback: Any = definedExternally
    open var _additionalRenderLoopLogicCallback: Any = definedExternally
    open var _textureLoadingCallback: Any = definedExternally
    open var _startingProcessingFilesCallback: Any = definedExternally
    open var _onReloadCallback: Any = definedExternally
    open var _errorCallback: Any = definedExternally
    open var _elementToMonitor: Any = definedExternally
    open var _sceneFileToLoad: Any = definedExternally
    open var _filesToLoad: Any = definedExternally
    open var _dragEnterHandler: Any = definedExternally
    open var _dragOverHandler: Any = definedExternally
    open var _dropHandler: Any = definedExternally
    open fun monitorElementForDragNDrop(elementToMonitor: HTMLElement): Unit = definedExternally
    open fun dispose(): Unit = definedExternally
    open var renderFunction: Any = definedExternally
    open var drag: Any = definedExternally
    open var drop: Any = definedExternally
    open var _traverseFolder: Any = definedExternally
    open var _processFiles: Any = definedExternally
    open fun loadFiles(event: Any): Unit = definedExternally
    open var _processReload: Any = definedExternally
    open fun reload(): Unit = definedExternally
    companion object {
        var FilesToLoad: `T$149` = definedExternally
    }
}
external open class SceneOptimization(priority: Number? = definedExternally /* null */) {
    open var priority: Number = definedExternally
    open fun getDescription(): String = definedExternally
    open fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class TextureOptimization(priority: Number? = definedExternally /* null */, maximumSize: Number? = definedExternally /* null */, step: Number? = definedExternally /* null */) : SceneOptimization {
    override var priority: Number = definedExternally
    open var maximumSize: Number = definedExternally
    open var step: Number = definedExternally
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class HardwareScalingOptimization(priority: Number? = definedExternally /* null */, maximumScale: Number? = definedExternally /* null */, step: Number? = definedExternally /* null */) : SceneOptimization {
    override var priority: Number = definedExternally
    open var maximumScale: Number = definedExternally
    open var step: Number = definedExternally
    open var _currentScale: Any = definedExternally
    open var _directionOffset: Any = definedExternally
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class ShadowsOptimization : SceneOptimization {
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class PostProcessesOptimization : SceneOptimization {
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class LensFlaresOptimization : SceneOptimization {
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class CustomOptimization : SceneOptimization {
    open var onApply: (scene: Scene, optimizer: SceneOptimizer) -> Boolean = definedExternally
    open var onGetDescription: () -> String = definedExternally
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class ParticlesOptimization : SceneOptimization {
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class RenderTargetsOptimization : SceneOptimization {
    override fun getDescription(): String = definedExternally
    override fun apply(scene: Scene, optimizer: SceneOptimizer): Boolean = definedExternally
}
external open class MergeMeshesOptimization : SceneOptimization {
    override fun getDescription(): String = definedExternally
    open var _canBeMerged: Any = definedExternally
    open fun apply(scene: Scene, optimizer: SceneOptimizer, updateSelectionTree: Boolean? = definedExternally /* null */): Boolean = definedExternally
    companion object {
        var _UpdateSelectionTree: Any = definedExternally
        var UpdateSelectionTree: Boolean = definedExternally
    }
}
external open class SceneOptimizerOptions(targetFrameRate: Number? = definedExternally /* null */, trackerDuration: Number? = definedExternally /* null */) {
    open var targetFrameRate: Number = definedExternally
    open var trackerDuration: Number = definedExternally
    open var optimizations: Array<SceneOptimization> = definedExternally
    open fun addOptimization(optimization: SceneOptimization): SceneOptimizerOptions = definedExternally
    open fun addCustomOptimization(onApply: (scene: Scene) -> Boolean, onGetDescription: () -> String, priority: Number? = definedExternally /* null */): SceneOptimizerOptions = definedExternally
    companion object {
        fun LowDegradationAllowed(targetFrameRate: Number? = definedExternally /* null */): SceneOptimizerOptions = definedExternally
        fun ModerateDegradationAllowed(targetFrameRate: Number? = definedExternally /* null */): SceneOptimizerOptions = definedExternally
        fun HighDegradationAllowed(targetFrameRate: Number? = definedExternally /* null */): SceneOptimizerOptions = definedExternally
    }
}
external open class SceneOptimizer(scene: Scene, options: SceneOptimizerOptions? = definedExternally /* null */, autoGeneratePriorities: Boolean? = definedExternally /* null */, improvementMode: Boolean? = definedExternally /* null */) : IDisposable {
    open var _isRunning: Any = definedExternally
    open var _options: Any = definedExternally
    open var _scene: Any = definedExternally
    open var _currentPriorityLevel: Any = definedExternally
    open var _targetFrameRate: Any = definedExternally
    open var _trackerDuration: Any = definedExternally
    open var _currentFrameRate: Any = definedExternally
    open var _sceneDisposeObserver: Any = definedExternally
    open var _improvementMode: Any = definedExternally
    open var onSuccessObservable: Observable<SceneOptimizer> = definedExternally
    open var onNewOptimizationAppliedObservable: Observable<SceneOptimization> = definedExternally
    open var onFailureObservable: Observable<SceneOptimizer> = definedExternally
    open var isInImprovementMode: Boolean = definedExternally
    open var currentPriorityLevel: Number = definedExternally
    open var currentFrameRate: Number = definedExternally
    open var targetFrameRate: Number = definedExternally
    open var trackerDuration: Number = definedExternally
    open var optimizations: Array<SceneOptimization> = definedExternally
    open fun stop(): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open fun start(): Unit = definedExternally
    open var _checkCurrentState: Any = definedExternally
    override fun dispose(): Unit = definedExternally
    companion object {
        fun OptimizeAsync(scene: Scene, options: SceneOptimizerOptions? = definedExternally /* null */, onSuccess: (() -> Unit)? = definedExternally /* null */, onFailure: (() -> Unit)? = definedExternally /* null */): SceneOptimizer = definedExternally
    }
}
external open class SceneSerializer {
    companion object {
        fun ClearCache(): Unit = definedExternally
        fun Serialize(scene: Scene): Any = definedExternally
        fun SerializeMesh(toSerialize: Any, withParents: Boolean? = definedExternally /* null */, withChildren: Boolean? = definedExternally /* null */): Any = definedExternally
    }
}
external open class TextureTools {
    companion object {
        fun CreateResizedCopy(texture: Texture, width: Number, height: Number, useBilinearMode: Boolean? = definedExternally /* null */): Texture = definedExternally
    }
}
external interface VideoRecorderOptions {
    var mimeType: String
    var fps: Number
    var recordChunckSize: Number
    var audioTracks: Array<MediaStreamTrack>? get() = definedExternally; set(value) = definedExternally
}
external open class VideoRecorder(engine: Engine, options: VideoRecorderOptions? = definedExternally /* null */) {
    open var _options: Any = definedExternally
    open var _canvas: Any = definedExternally
    open var _mediaRecorder: Any = definedExternally
    open var _recordedChunks: Any = definedExternally
    open var _fileName: Any = definedExternally
    open var _resolve: Any = definedExternally
    open var _reject: Any = definedExternally
    open var isRecording: Boolean = definedExternally
    open fun stopRecording(): Unit = definedExternally
    open fun startRecording(fileName: String? = definedExternally /* null */, maxDuration: Number? = definedExternally /* null */): Promise<Blob> = definedExternally
    open fun dispose(): Unit = definedExternally
    open var _handleDataAvailable: Any = definedExternally
    open var _handleError: Any = definedExternally
    open var _handleStop: Any = definedExternally
    companion object {
        var _defaultOptions: Any = definedExternally
        fun IsSupported(engine: Engine): Boolean = definedExternally
    }
}
external open class ScreenshotTools {
    companion object {
        fun CreateScreenshot(engine: Engine, camera: Camera, size: Any, successCallback: ((data: String) -> Unit)? = definedExternally /* null */, mimeType: String? = definedExternally /* null */): Unit = definedExternally
        fun CreateScreenshotUsingRenderTarget(engine: Engine, camera: Camera, size: Any, successCallback: ((data: String) -> Unit)? = definedExternally /* null */, mimeType: String? = definedExternally /* null */, samples: Number? = definedExternally /* null */, antialiasing: Boolean? = definedExternally /* null */, fileName: String? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class PathCursor(path: Path2) {
    open var path: Any = definedExternally
    open var _onchange: Any = definedExternally
    open var value: Number = definedExternally
    open var animations: Array<Animation> = definedExternally
    open fun getPoint(): Vector3 = definedExternally
    open fun moveAhead(step: Number? = definedExternally /* null */): PathCursor = definedExternally
    open fun moveBack(step: Number? = definedExternally /* null */): PathCursor = definedExternally
    open fun move(step: Number): PathCursor = definedExternally
    open var ensureLimits: Any = definedExternally
    open var raiseOnChange: Any = definedExternally
    open fun onchange(f: (cursor: PathCursor) -> Unit): PathCursor = definedExternally
}
external object blurPixelShader {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object bones300Declaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object instances300Declaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
external object pointCloudVertexDeclaration {
    var name: String = definedExternally
    var shader: String = definedExternally
}
